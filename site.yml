---
- hosts: all
  tasks:
    - name: uninstall product
      import_tasks: scripts/uninstall-fworch.yml
      when: "installation_mode == 'uninstall'"
      become: yes
  tags:
    - backend
    - frontend

- hosts: all
  roles:
    - { role: common, when: "not installation_mode == 'uninstall'" }

  tags:
    - backend

- hosts: backendserver
  roles:
    - { role: database, when: "not installation_mode == 'uninstall'" }
  tags:
    - backend

- hosts: middlewareserver
  roles:
    - { role: openldap-server, when: "not installation_mode == 'uninstall'" }
    - { role: lib, when: "not installation_mode == 'uninstall'" }
    - { role: middleware, when: "not installation_mode == 'uninstall'" }
  tags:
    - backend

- hosts: apiserver
  roles:
    - { role: docker, when: "'run_on_github' is not defined and not installation_mode == 'uninstall'" }
    - { role: api, when: "run_on_github is not defined and not installation_mode == 'uninstall'" }
  tags:
    - backend
   # todo: make api (and docker) work with github actions

# restart middlewareserver now that the API is ready.
- hosts: middlewareserver
  tasks:
    - name: restart middleware service
      command: "systemctl restart {{ middleware_service_name }}"
      become: yes
      when: "not installation_mode == 'uninstall'"
  tags:
    - backend

- hosts: frontends
  roles:
    # do not install lib role twice (for non distributed install, already installed for middlewareserver)
    - { role: lib, when: "'middlewareserver' not in group_names and not installation_mode == 'uninstall'"}
    - { role: ui, when: "not installation_mode == 'uninstall'"}
    - { role: frontend-php, when: "ui_php is defined and not installation_mode == 'uninstall'"}
  tags:
    - frontend

- hosts: importers
  roles:
    - { role: importer, when: "not installation_mode == 'uninstall'" }
  tags:
    - frontend

- hosts: sampleserver
  roles:
    - { role: sample-data, when: "without_sample_data is not defined and not installation_mode == 'uninstall'" }
    - { role: sample-data-connect-sting, when: "connect_sting is defined and not installation_mode == 'uninstall'" }
  tags:
    - samples
    - backend

- hosts: middlewareserver
  roles:
    - { role: sample-auth-data, when: "without_sample_data is not defined and not installation_mode == 'uninstall'" }
  tags:
    - samples
    - backend
  # todo: add a meta dependency on role sample-data

# restart importer to make sure it works correctly with sample data
- hosts: importers
  tasks:
    - name: restart importer service
      command: "/etc/init.d/fworch-importer restart"
      become: yes
      when: "not installation_mode == 'uninstall'"

  tags:
    - backend

# simply set new version in config file
- hosts: all
  roles:
    - { role: upgrade-completion, when: "installation_mode == 'upgrade'" }
  tags:
    - backend
    - frontend

- hosts: all
  roles:
    - { role: test, when: "not installation_mode == 'uninstall'" }
  tags:
    - test

- hosts: all
  tasks:
    - name: show listener status
      import_tasks: scripts/show-fworch-listeners.yml
      become: yes
      # when: "installation_mode == 'uninstall'"
  tags:
    - backend
    - frontend
