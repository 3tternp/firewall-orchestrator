#!/usr/bin/php
<?php
// $Id: reporting_tables_config_cli.php,v 1.1.2.17 2012-03-14 23:35:17 tim Exp $
// $Source: /home/cvs/iso/package/web/htdocs/Attic/reporting_tables_config_cli.php,v $
	if (!isset($_SESSION)) session_start();
	require_once ("cli_functions.php");
	require_once ("db-input.php");
	$cleaner = new DbInput();  // for clean-function
	setlocale(LC_CTYPE, "de_DE.UTF-8");
	
	$longopts = array("dev_id:","reportformat:","mgm_filter:","client::","stamm:","reportdate:");
	$opt = $cleaner->clean_structure(getopt("d:r:m:c::s::r:", $longopts));
	$dev_id			= $opt['dev_id'];
	$report_format	= $opt['reportformat'];
	$mgm_filter		= $opt['mgm_filter'];
	$client_id		= $opt['client'];
	$stamm			= $opt['stamm'];
	$report_date	= convert_report_date_to_postgres($opt['reportdate']);

	$config = new Config();	
	$_SESSION["loglevel"] = $config->getLogLevel();
	$_SESSION["logtarget"] = $config->getLogTarget();
	$_SESSION["logfacility"] = $config->getLogFacility();
	$e = new PEAR();

	require_once ("check_privs.php");
	require_once ("display-filter.php");
	require_once ("db-rule.php");
	require_once ("display_rule_config.php");
	require_once ("db-nwobject.php");
	require_once ("display_nwobject_config.php");
	require_once ("db-service.php");
	require_once ("display_service_config.php");
	require_once ("db-user.php");
	require_once ("display_user_config.php");

	$start = explode(" ", microtime());	$stime = $start[0] + $start[1];
	if (is_numeric($dev_id)) {
		$dev_name = getDevName ($dev_id, 'confexporter', '');
		if (!isset($dev_name) or $dev_name == 'NULL' or $dev_name == '') { echo "ERROR: device with ID $dev_id not found - aborting\n"; exit (1); }	
	} else {
		$dev_name = strtolower($dev_id);
		$dev_id = getDevId ($dev_name, 'confexporter', '');	
		if (!isset($dev_id) or $dev_id == 'NULL' or $dev_id == '') { echo "ERROR: device with name $dev_name not found - aborting\n"; exit (1); }	
	}
	$_REQUEST['Device'] = $dev_name;
	$_REQUEST['ManSystem'] = getMgmNameFromDevId ($dev_id, 'itsecorg', '');
	$_SESSION['ManagementFilter'] = $mgm_filter;
	if (isset($client_id) and !($client_id == '')) $_SESSION['ClientFilter'] = " (client_id=$client_id) ";
	$_REQUEST['devId'] = $dev_id;
	$_REQUEST['zeitpunkteins'] = $report_date;	
	$_REQUEST['inactive'] = "0";
	$_REQUEST['notused'] = "1";
	$_REQUEST['client_id'] = $client_id;
	$request = $cleaner->clean_structure($_REQUEST);
	$session = $cleaner->clean_structure($_SESSION);

	$config = new Config();
	$log = new LogConnection(); 
	$log->log_debug("reporting_tables_config_cli.php: starting report generation for device $dev_name (id=$dev_id, format: $report_format)");
	
	if ($report_format == 'html' or $report_format == 'simple.html') {
		$linie="<table width='730' cellspacing='0' cellpadding='0' style='margin:6px 0px;'><tr>\n" . 
 			"<td style='background-color:#FFD;'><img src='".$stamm."img/1p_tr.gif' width='730' height='2' alt=''></td>\n" .
 			"</tr></table>\n";
		output_html_header_config_report($stamm);
		include ($stamm . "inctxt/report_header.inc.php");
	} else $linie = '';
	
	$db_connection = new DbConnection(new DbConfig('itsecorg',''));
	$ruleFilter = new RuleConfigurationFilter($request,$session);
	$import_ids = new ImportIds($ruleFilter); // generating relevant import ids per mgmt in temp table  // to optimize for a single device
	$import_ids->set_all_tables();
	$rule_list = new RuleList($ruleFilter, $import_ids);
	$ruleTable = new RuleConfigTable($headers = array("Nr","ID","Quelle","Ziel","Dienst","Aktion","Tracking","Install on","Kommentar","Name"), $rule_list);

	if ($e->isError($ruleTable)) { $err = $ruleTable; echo "An error occured." . $err->getMessage(); }	
	else {
		if ($report_format <> 'html' and $report_format <> 'simple.html' and $report_format<>'csv' and $report_format<>'ARS.csv' 
				and $report_format<>'ARS.noname.csv' and $report_format<>'json') {
			echo $ruleTable->displayCommentLineSeparator ($report_format);
			echo $ruleTable->displayCommentLine("ITSecOrg config export for $report_format format", $report_format);
			echo $ruleTable->displayCommentLine("[generated by IT Security Organizer, (c) Cactus eSecurity GmbH, http://www.cactus.de]", $report_format);
			echo $ruleTable->displayCommentLine("report time: $report_date", $report_format);
			echo $ruleTable->displayCommentLine("device id = $dev_id, device name = $dev_name, management name = " . $request['ManSystem'], $report_format);
			echo $ruleTable->displayCommentLineSeparator($report_format);
		}
		$rules_out = $ruleTable->display($ruleFilter, $report_format, $import_ids);

		if ($report_format<>'csv' and $report_format<>'ARS.csv' and $report_format<>'ARS.noname.csv') {
			$filtered_rule_id = $ruleTable->getFilteredRuleIds();
			$ruleFilter->setFilteredRuleIds($filtered_rule_id);
	
			$objectTable = new NwObjectConfigTable($headers = array("Name","Zone","Typ","IP","Member","UID","Kommentar"), new NetworkObjectList($ruleFilter, $order=NULL, $import_ids));
			$nwobjects_out = $objectTable->display($ruleFilter, $report_format);
	
			$headers = array("Name","Typ","Member","IP-Proto.","Zielport","Quellport","Timeout<br>(sec)","UID","Kommentar");
			$serviceTable = new ServiceConfigTable($headers,new ServiceList($ruleFilter, $order=NULL, $import_ids));
			$services_out = $serviceTable->display($ruleFilter, $report_format);
	
			$userTable = new UserConfigTable($headers = array("Name","Typ","Uid","Kommentar","Member"), new UserList($ruleFilter, $order=NULL, $import_ids));
			$users_out = $userTable->display($ruleFilter, $report_format);
		}
		switch ($report_format) {	// dealing with different orders of config output
			case 'html': case 'simple.html':
				echo $rules_out . $nwobjects_out . $services_out . $users_out; break;
			case 'json':
				echo "{\n\"device_id\":" . $dev_id . "\n" .
					'"report_time":' . $report_date . "\n" .
					'"client_id":' . $client_id . "\n";
				// rules:
				$tmp = $ruleTable->ruleList->rule_list;
				unset($tmp->db_connection);	unset($tmp->import_ids); unset($tmp->filter); unset($tmp->error);
				foreach ($tmp as $el) { 
						unset ($el->error); unset ($el->db_connection); unset ($el->display); unset ($el->filter);
						unset($el->import_ids); 
						foreach ($el->rule_src as $el2) unset ($el2->error);
						foreach ($el->rule_dst as $el2) unset ($el2->error);
						foreach ($el->rule_svc as $el2) unset ($el2->error);
				}
				echo '"rules": ' . json_encode($tmp,JSON_PRETTY_PRINT) . "\n";
				// nwobjects:
				$tmp = $objectTable->nwobjectList->obj_list;
				unset($tmp->db_connection);	unset($tmp->import_ids); unset($tmp->filter); unset($tmp->error);
				foreach ($tmp as $el) { unset ($el->error); unset ($el->db_connection); unset ($el->display); unset ($el->filter); }
				echo '"network_objects": ' . json_encode($tmp,JSON_PRETTY_PRINT) . "\n";
				// nwservices:
				$tmp = $serviceTable->serviceList->service_list;
				unset($tmp->db_connection);	unset($tmp->import_ids); unset($tmp->filter); unset($tmp->error);
				foreach ($tmp as $el) { unset ($el->error); unset ($el->db_connection); unset ($el->display); unset ($el->filter); }
				echo '"network_services": ' . json_encode($tmp,JSON_PRETTY_PRINT) . "\n";
				// users:
				$tmp = $userTable->userList->user_list;
				unset($tmp->db_connection);	unset($tmp->import_ids); unset($tmp->filter); unset($tmp->error);
				foreach ($tmp as $el) { unset ($el->error); unset ($el->db_connection); unset ($el->display); unset ($el->filter); }
				echo '"users": ' . json_encode($tmp,JSON_PRETTY_PRINT);
				echo "\n}";
				break;				
			case 'csv': case 'ARS.csv': case 'ARS.noname.csv': // Nur Regeln ausgeben
						echo $rules_out; break;
			case 'junos':
				echo "security {\n";
				echo "\tzones {\n$nwobjects_out\t}\n";
				echo "\tpolicies {\n$rules_out\t}\n}\n";
				echo "applications {\n$services_out}\n";
//				ignoring users
				break;
		} 
	}
//	cleanup
	$import_ids->delete_relevant_import_times_from_temp_table();
	$rule_list->deleteTempReport($ruleFilter->getReportId());
	session_destroy();
	if ($report_format == 'html' or $report_format == 'simple.html') echo '<p></form></div></body></html>';
	else {
		if ($report_format<>'json')
			echo $ruleTable->displayCommentLineSeparator($report_format) . 
				$ruleTable->displayCommentLine("end of configuration", $report_format) . $ruleTable->displayCommentLineSeparator ($report_format);
	}
	$endtime = explode(" ", microtime()); $etime = $endtime[0] + $endtime[1];
	$log->log_debug("report generation for device $dev_name (id=$dev_id, format: $report_format) took " . sprintf('%.2f', $etime - $stime) . " seconds.");
?>
