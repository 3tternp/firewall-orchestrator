---

- block:
  - name: Create the directory for ldap database
    file: 
      path: "/var/lib/ldap/{{ openldap_server_domain_name }}/"
      state: directory 
      owner: "{{ openldap_server_user }}"
      group: "{{ openldap_server_user }}"

  - name: Create the directory for ldap certificates
    file: 
      path: "{{ openldap_server_app_path }}/certs/"
      state: directory
      owner: "{{ openldap_server_user }}"
      group: "{{ openldap_server_user }}"

  #########################
  - name: Generate an OpenSSL private key
    openssl_privatekey:
      path: "{{ openldap_server_app_path }}/certs/openldap_private_key.pem"
      size: 1024
      #cipher: aes256
      type: RSA

  - name: Generate an OpenSSL Certificate Signing Request with Subject information
    openssl_csr:
      path: "{{ openldap_server_app_path }}/certs/openldap_private_key.csr"
      privatekey_path: "{{ openldap_server_app_path }}/certs/openldap_private_key.pem"
      country_name: "{{ openldap_server_country }}"
      locality_name: "{{ openldap_server_location }}"
      organization_name: "{{ openldap_server_organization }}"
      #email_address: "{{ email_address }}"
      common_name: "{{ ansible_hostname }}"

  - name: Generate a Self Signed OpenSSL certificate
    openssl_certificate:
      path: "{{ openldap_server_app_path }}/certs/openldap_certificate.pem"
      privatekey_path: "{{ openldap_server_app_path }}/certs/openldap_private_key.pem"
      csr_path: "{{ openldap_server_app_path }}/certs/openldap_private_key.csr"
      provider: selfsigned
  ############################

#  - name: Generate the private key for certificate request
##    From man oppenssl:
##    pass:password
##    The actual password is password. Since the password is visible to utilities (like 'ps' under Unix) this form should only be used where
##    security is not important.
##
##   This does not seem to work. When executed in consol:
##   Extra arguments given.
##   genrsa: Use -help for summary.
#    command: "openssl genrsa -des3 -passout pass:password -out my1.key 1024 chdir={{ openldap_server_app_path }}/certs/"
#    args:
#      creates: "{{ openldap_server_app_path }}/certs/my1.key"
#
##neu
#  - name: Generate the private key for certificate request
#    openssl_privatekey:
#      path: "{{ openldap_server_app_path }}/certs/my1.key"
#      cipher: aes256   # could use des3 as well
#      size: 1024
#      passphrase: password
#
#  - name: Strip the passphrase from the key
#    command: "openssl rsa -in my1.key -passin pass:password -out my.key chdir={{ openldap_server_app_path }}/certs/"
#    args:
#      creates: "{{ openldap_server_app_path }}/certs/my.key"
#
#  - name: Create and sign the the new certificate
#    command: "openssl req -new -x509 -subj '/C={{ openldap_server_country }}/ST={{ openldap_server_state }}/L={{ openldap_server_location }}/O={{ openldap_server_organization }}/CN={{ ansible_hostname }}/' -days 3650 -key my.key -out cert.crt -extensions v3_ca chdir={{ openldap_server_app_path }}/certs/"
#    args:
#      creates: "{{ openldap_server_app_path }}/certs/cert.crt"
#
#  - name: Create and sign the the new certificate
#    #command: "openssl req -new -x509 -subj '/C={{ openldap_server_country }}/ST={{ openldap_server_state }}/L={{ openldap_server_location }}/O={{ openldap_server_organization }}/CN={{ ansible_hostname }}/' -days 3650 -key my.key -out cert.crt -extensions v3_ca chdir={{ openldap_server_app_path }}/certs/"
#    #openssl_certificate:
#    x509_certificate:
#      path: "{{ openldap_server_app_path }}/certs/"
#      privatekey_path: "{{ openldap_server_app_path }}/certs/my.key"
#      subject: {
#                'C': '{{ openldap_server_country }}',
#                'ST': '{{ openldap_server_state }}',
#                'L': '{{ openldap_server_location }}',
#                'O': '{{ openldap_server_organization }}',
#                'CN': '{{ ansible_hostname }}'
#                }
#
#    args:
#      creates: "{{ openldap_server_app_path }}/certs/cert.crt"

  - name: set permissions on key
    file: 
      path: "{{ openldap_server_app_path }}/certs/openldap_private_key.pem"
      state: file
      owner: "{{ openldap_server_user }}"
      group: "{{ openldap_server_user }}"

  - name: set permissions on cert
    file: 
      path: "{{ openldap_server_app_path }}/certs/openldap_certificate.pem"
      state: file
      owner: "{{ openldap_server_user }}"
      group: "{{ openldap_server_user }}"

  - name: copy the supporting files
    copy: 
      src: ldap
      dest: /etc/sysconfig/ldap 
      mode: "0755"
    when: openldap_server_enable_ssl and ansible_os_family == 'RedHat'
    notify: 
    - restart slapd

  - name: copy the supporting files
    copy: 
      src: slapd_fedora
      dest: /etc/sysconfig/slapd 
      mode: "0755"
    when: openldap_server_enable_ssl and ansible_distribution == "Fedora"
    notify: 
    - restart slapd

  - name: copy the supporting files
    copy: 
      src: slapd 
      dest: /etc/default/slapd 
      mode: "0755"
    when: openldap_server_enable_ssl and ansible_os_family == 'Debian'
    notify: 
    - restart slapd

  - name: start the slapd service
    service: 
      name: slapd 
      state: restarted 
      enabled: yes 
    
  - name: Copy the template for creating base dn
    template: 
      src: "{{ openldap_server_ldif }}"
      dest: /tmp/
    register: result

  # the following was moved to auth module
  # - name: add the base domain
  #   shell: "ldapadd -x -D \"{{ auth_ldap_superuser_name }}\" -w {{ openldap_server_random_rootpw }} -f {{ result.dest|default(result.path) }} && touch {{ openldap_server_app_path }}/rootdn_created"
  #   args:
  #     creates: "{{ openldap_server_app_path }}/rootdn_created"
  #   when: not is_manger_pw_present_flag.stat.exists
  
  become: yes