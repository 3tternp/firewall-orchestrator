
  # install all upgrades between running version and version currently being installed

- name: guard - stop when trying anything but an upgrade with existing database
  fail:
    msg: "Error: You choose new installation on a system with existing database {{ fworch_db_name }}"
  when: installation_mode != "upgrade" or db_exists.stdout == "0"

- set_fact: 
    installed_version: "{{ old_version }}"

- set_fact: 
    current_version: "{{ product_version }}"

- set_fact: 
    all_upgrades_available: "{{ lookup('fileglob', 'upgrade/*.sql') }}"

- set_fact:
    upgrade_files: []

- name: create upgrade dir
  file:
    path: "{{ database_install_dir }}/upgrade"
    state: directory
  become: yes
 
- name: set list of relevant upgrade files (without extension)
  set_fact:
    upgrade_files: "{{ upgrade_files + [ item | basename | splitext | first | regex_replace('([\\d\\.]+)\\.sql', '\\1') ] }}"
  when: installed_version < item | basename | splitext | first | regex_replace('([\\d\\.]+)\\.sql', '\\1')
  with_fileglob:
    - "upgrade/*.sql"

- name: Copy relevant upgrade files
  copy:
    src: "upgrade/{{ item }}.sql"
    dest: "{{ database_install_dir }}/upgrade/"
  loop: "{{ upgrade_files }}"
  become: yes

- name: install upgrades   
  command: 'psql -d {{ fworch_db_name }} -c "\i {{ database_install_dir }}/upgrade/{{ item }}.sql"'
  loop: "{{ upgrade_files | sort }}"
  become: yes
  become_user: postgres
