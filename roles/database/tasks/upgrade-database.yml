
  # install all upgrades between running version and version currently being installed

- name: guard - stop when trying anything but an upgrade with existing database
  fail:
    msg: "Error: You choose new installation on a system with existing database {{ fworch_db_name }}"
  when: installation_mode != "upgrade" or db_exists.stdout == "0"

- set_fact: installed_version=old_version|int
- set_fact: current_version=product_version|int
- set_fact: all_upgrades_available={{ lookup('fileglob', 'upgrade/*.sql') }}

- name: list versions
  debug:
    msg:
      - "installed_version: {{ installed_version }}"
      - "current_version: {{ installed_version }}"

- name: list relevant upgrade files
  debug:
    msg:
      - "item: {{ item }}"
      - "version: {{ item | basename | splitext | first }}"
      - "version_version: (item | basename | splitext | first), '<' is version ('5.0')"
  with_fileglob:
    - "upgrade/*.sql"

- name: create upgrade dir
  file:
    path: "{{ database_install_dir }}/upgrade"
    state: directory
  become: yes
 
- name: Copy relevant upgrade files
  copy:
    src: "{{ item }}"
    dest: "{{ database_install_dir }}/upgrade/"
  when: (installed_version | int) < (item | basename | splitext | first | int)
  with_fileglob:
    - "upgrade/*.sql"
  become: yes

- block:

  # - name: build upgrade list
  #   set_fact:
  #      upgrade_files: "{{ upgrade_files + [item] }}"
  #   loop: "{{ lookup('fileglob', 'upgrade/*.sql') }}" 

  # - name: show available upgrades
  #   debug: 
  #     - var=all_upgrades_available verbositiy=0
  #     - var=upgrade_files verbositiy=0

  # - name: show available upgrades
  #   debug: var=item
  #   loop: "{{ all_upgrades_available }}"

  # - name: show available upgrades
  #   debug: var=item verbositiy=0
  #   with_fileglob: upgrade/*.sql

  # - name: copying relevant upgrades to target (those with higher version than the installed one)
  #   copy:
  #     src: "{{ item }}"
  #     dest: "{{ database_install_dir }}/"
  #   when: "installed_version is version (item | basename | splitext | first, '<')"
  #   loop: "{{ all_upgrades_available.split(',') }}"

  - name: getting list of applicable upgrades
    find:
      paths: "{{ database_install_dir }}/upgrade"
      patterns: '*.sql'
    register: upgrades

  - set_fact: upgrade_files=[]
  
  # - name: build upgrade list
  #   set_fact: upgrade_files=upgrade_files+ [item.path]
  #   #when: installed_version < (item.path | basename | splitext | first)
  #   #when: "{{ item.path | basename | splitext | first }} is version({{ installed_version }}, '>=')"
  #   #when: (item.path | basename | splitext | first) is version(installed_version, '>=')
  #   when: (item.path | basename | splitext | first | int) is version(installed_version, '>=')
  #   loop: "{{ upgrades.files }}"

  # - name: install upgrades   
  #   command: 'psql -d {{ fworch_db_name }} -c "\i {{ database_install_dir }}/upgrade/{{ item }}"'
  #   loop: "{{ upgrade_files | sort }}"

  become: yes
  become_user: postgres
