
- block:

  - name: fail upon new installation with existing database
    fail:
      msg: "Error: You choose new installation on a system with existing database {{ fworch_db_name }}"
    when: installation_mode == "new" and db_exists.query_result.0.count != 0

  - name: create postgres user "{{ fworch_dbadmin_name }}"
    postgresql_user: 
      name: "{{ fworch_dbadmin_name }}"
      password: "{{ dbadmin_pwd }}"
      encrypted: yes
      role_attr_flags: CREATEDB,SUPERUSER,CREATEROLE,INHERIT,LOGIN

  - name: create postgres user "{{ fworch_user }}"
    postgresql_user: 
      name: "{{ fworch_user }}"
      password: "{{ fworch_pwd }}"
      encrypted: yes
      role_attr_flags: LOGIN

  # include add-tablespace.yml here

    #  - name: drop database {{ fworch_db_name }}
    #    command: 'psql -c "DROP DATABASE IF EXISTS {{ fworch_db_name }}"'

  - name: create database {{ fworch_db_name }}
    postgresql_db:
      name: "{{ fworch_db_name }}"
      state: present

  - name: test module postgresql_query functionality (only works with ansible >= 2.8) in case of an error message you may run scripts/install-lastes-ansible.yml
    postgresql_query:
      db: "{{ fworch_db_name }}"
      query: 'select version()'
    register: test_query
    when: ansible_version.string is version_compare('2.8', '>=')

  - name: show dummy query result
    debug:
      msg: "test_query result: {{ test_query }}"

  - name: creating {{ fworch_db_name }}-db-model
    postgresql_query:
      db: "{{ fworch_db_name }}"
      path_to_script: "{{ database_install_dir }}/sql/creation/{{ item }}"
      as_single_query: "{{ postgresql_query_as_single_query }}"
    loop:
      - fworch-create-tables.sql
      - fworch-create-constraints.sql
      - fworch-create-foreign-keys.sql
      - fworch-create-indices.sql
    when: installation_mode == "new" and ansible_version.string is version_compare('2.10', '>=')

  - name: creating {{ fworch_db_name }}-db-model
    postgresql_query:
      db: "{{ fworch_db_name }}"
      path_to_script: "{{ database_install_dir }}/sql/creation/{{ item }}"
    loop:
      - fworch-create-tables.sql
      - fworch-create-constraints.sql
      - fworch-create-foreign-keys.sql
      - fworch-create-indices.sql
    when: installation_mode == "new" and ansible_version.string is version_compare('2.10', '<')

  - name: create db users with group memmberships
    import_tasks: create-users.yml
    when: installation_mode == "new"

  - name: add colors to the database
    postgresql_copy:
      db: "{{ fworch_db_name }}"
      copy_from: "{{ database_install_dir }}/csv/color.csv"
      dst: stm_color
      columns:
        - color_name
        - color_rgb
      options:
        delimiter: ';'
        format: csv
    when: installation_mode == "new"

  - name: add error messages to the database
    postgresql_copy:
      db: "{{ fworch_db_name }}"
      copy_from: "{{ database_install_dir }}/csv/error.csv"
      dst: error
      columns:
        - error_id
        - error_lvl
        - error_txt_ger
        - error_txt_eng
      options:
        delimiter: ';'
        format: csv
    when: installation_mode == "new"

  - name: add ip protocols to the database
    postgresql_copy:
      db: "{{ fworch_db_name }}"
      copy_from: "{{ database_install_dir }}/csv/ip-protocol-list.csv"
      dst: stm_ip_proto
      columns:
        - ip_proto_id
        - ip_proto_name
        - ip_proto_comment
      options:
        delimiter: ';'
        format: csv
    when: installation_mode == "new"

# non-ascii sql file cannot be executed under red hat
# revert to command + psql?
  - name: add base data to database fworch-fill-stm.sql
    postgresql_query:
      db: "{{ fworch_db_name }}"
      path_to_script: "{{ database_install_dir }}/sql/creation/fworch-fill-stm.sql"
      as_single_query: yes
      # encoding: UTF-8

  become: yes
  become_user: postgres
