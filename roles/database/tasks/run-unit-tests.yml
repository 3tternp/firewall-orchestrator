
# - name: run db unit tests from ansible 2.10
#   postgresql_query:
#     db: "{{ fworch_db_name }}"
#     path_to_script: "{{ database_install_dir }}/sql/test/unit-tests.sql"
#     as_single_query: "{{ postgresql_query_as_single_query }}"
#   become: yes
#   become_user: postgres
#   when: ansible_version.string is version_compare('2.10', '>=')

# - name: run db unit tests prior to ansible 2.10
#   postgresql_query:
#     db: "{{ fworch_db_name }}"
#     path_to_script: "{{ database_install_dir }}/sql/test/unit-tests.sql"
#   become: yes
#   become_user: postgres
#   when: ansible_version.string is version_compare('2.10', '<')
#   register: testresults

- name: run db unit tests from ansible 2.10
  postgresql_query:
    db: "{{ fworch_db_name }}"
    path_to_script: "{{ database_install_dir }}/sql/test/{{ item }}"
    as_single_query: "{{ postgresql_query_as_single_query }}"
  become: yes
  become_user: postgres
  when: ansible_version.string is version_compare('2.10', '>=')
  loop:
    - unit-tests.sql
    - import-test.sql

- name: run db unit tests prior to ansible 2.10
  postgresql_query:
    db: "{{ fworch_db_name }}"
    path_to_script: "{{ database_install_dir }}/sql/test/{{ item }}"
  become: yes
  become_user: postgres
  when: ansible_version.string is version_compare('2.10', '<')
  register: testresults
  loop:
    - unit-tests.sql
    - import-test.sql

# - name: collect results of tests in list and check for "# Looks like you failed"
#   set_fact:
#     msg: "Key={{ item.0.key }} value={{ item.1 }}"
#   loop: "{{ testresults.results }}"    

# - name: Print db test status failure
#   fail: 
#     msg: "Some database unit tests failed: {{ testresults }}"
#   when: testresults.failed | bool

- name: Print db test status success
  debug: 
    msg: "All database unit tests completed successfully"
  when: not testresults.failed | bool

# - name: fail
#   fail:
#     msg: stopping after tests
