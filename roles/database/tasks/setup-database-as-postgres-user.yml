
- block:
  - name: create postgres user "{{ fworch_dbadmin_name }}"
    postgresql_user: 
      name: "{{ fworch_dbadmin_name }}"
      password: "{{ dbadmin_pwd }}"
      encrypted: yes
      role_attr_flags: CREATEDB,SUPERUSER,CREATEROLE,INHERIT,LOGIN

  - name: create postgres user "{{ fworch_user }}"
    postgresql_user: 
      name: "{{ fworch_user }}"
      password: "{{ fworch_pwd }}"
      encrypted: yes
      role_attr_flags: LOGIN

# include add-tablespace.yml here

#  - name: create new database - drop existing db before when clean_install is set
#    import_tasks: db-init1-user-and-structure.yml
#    # Dieses when muss angepasst werden, Tim fragen
#    when: clean_install is defined or db_exists.stdout=="0"

    #  - name: drop database {{ fworch_db_name }}
    #    postgresql_db:
    #      name: "{{ fworch_db_name }}"
    #      state: absent
    #      login_host: "{{ fworch_db_host }}"
    #      login_user: "{{ fworch_dbadmin_name }}"
    #      template: template1
    #
    #  - name: create database {{ fworch_db_name }}
    #    postgresql_db:
    #      name: "{{ fworch_db_name }}"
    #      state: present
    #      login_host: "{{ fworch_db_host }}"
    #      login_user: "{{ fworch_dbadmin_name }}"
    #      template: template1

    #  - name: drop database {{ fworch_db_name }}
    #    command: 'psql -c "DROP DATABASE IF EXISTS {{ fworch_db_name }}"'

  - name: create database {{ fworch_db_name }}
    command: 'psql -c "CREATE DATABASE {{ fworch_db_name }}"'
    when: installation_mode == "new" and db_exists.stdout == "0"

  - name: fail upon new installation with existing database
    fail:
      msg: "Error: You choose new installation on a system with existing database {{ fworch_db_name }}"
    when: installation_mode == "new" and db_exists.stdout != "0"

  - name: creating {{ fworch_db_name }}-db-model and settings privileges
    command: 'psql -d {{ fworch_db_name }} -c "\i {{ database_install_dir }}/sql/{{ item }}"'
    loop:
      - fworch-db-model.sql
      - fworch-user-textreader.sql
      # - fworch-grants.sql testen obs weg kann
      - fworch-change-to-delete-cascade.sql
    when: installation_mode == "new"

  - name: (re)defines functions and views (idempotent)
    import_tasks: db-init2-functions.yml

  - name: add base data to the database (if db was just freshly created or clean_install is set)
    import_tasks: db-init3-fill.yml
    when: clean_install is defined or db_exists.stdout=="0"

  # - name: add local ldap connection
  #   shell: psql -d {{ fworch_db_name | quote }} -c "DO \$do\$ BEGIN IF NOT EXISTS (SELECT * FROM ldap_connection) THEN INSERT INTO ldap_connection (ldap_server, ldap_port, ldap_searchpath_for_users, ldap_tenant_level, ldap_search_user, ldap_search_user_pwd) VALUES ('{{ auth_ldap_server_internal | quote }}', 636, '{{ auth_ldap_std_user_path | quote }}', 1, '{{ auth_ldap_internal_readonly_user | quote }}', 'initial pwd to-be-changed'); END IF; END \$do\$"

  - name: create functions needed during authentication
    command: 'psql -d {{ fworch_db_name }} -c "\i {{ database_install_dir }}/sql/pre_auth_functions.sql"'

  become: yes
  become_user: postgres
