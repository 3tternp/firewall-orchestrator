
- block:
  - name: create postgres user "{{ fworch_dbadmin_name }}"
    postgresql_user: 
      name: "{{ fworch_dbadmin_name }}"
      password: "{{ dbadmin_pwd }}"
      encrypted: yes
      role_attr_flags: CREATEDB,SUPERUSER,CREATEROLE,INHERIT,LOGIN

  - name: create postgres user "{{ fworch_user }}"
    postgresql_user: 
      name: "{{ fworch_user }}"
      password: "{{ fworch_pwd }}"
      encrypted: yes
      role_attr_flags: LOGIN
 
#     leave out tablespace creation for now as this cannot be done within a pgsql function (might use dblink later on) 
#     - name: create tablespace {{ fworch_user }}
#       shell: 'psql -c "DO \$do\$ BEGIN IF NOT EXISTS (SELECT 1 FROM pg_tablespace WHERE spcname = ''{{ table_space_name }}'') THEN CREATE TABLESPACE {{ table_space_name }} OWNER dbadmin LOCATION ''{{ table_space }}''; END IF; END \$do\$"'
#       when: table_space is defined
#
#     also move temp tablespace to large disk:
#     postgres=# create tablespace temp_tbs location '/var/db/tmp_tablespace';
#     grep temp_tablespaces /etc/postgresql/9.5/main/postgresql.conf 
#     temp_tablespaces = 'temp_tbs'                   # a list of tablespace names, '' uses
#     postgres=# select pg_reload_conf();

#  - name: check if database already exists
#    shell: 'psql -At -c "SELECT count(*) FROM pg_database WHERE datname=''{{ fworch_db_name }}''"'
#    register: db_exists

#     - debug:
#         var: db_exists.stdout

  - name: create new database - drop existing db before when clean_install is set
    shell:  "{{ fworch_home }}/install/database/db-install-scripts/db-init1-user-and-structure.sh"
    when: clean_install is defined or db_exists.stdout=="0"

  # todo: the following user is to be moved from postgres to ldap:
  - name: create admin user (default admin for web login)
    shell: 'psql -c "DO \$do\$ BEGIN IF NOT EXISTS (SELECT * FROM pg_catalog.pg_roles WHERE rolname = ''admin'') THEN CREATE ROLE admin PASSWORD ''{{ admin_pwd }}'' IN ROLE isoadmins, secuadmins LOGIN; END IF; END \$do\$"'

  # - name: create postgres user "admin"
  #   postgresql_user: 
  #     name: "admin"
  #     password: "{{ admin_pwd }}"
  #     encrypted: yes
  #     role_attr_flags: LOGIN,isoadmins,secuadmins 

  - name: (re)defines functions and views (idempotent)
    shell:  "{{ fworch_home }}/install/database/db-install-scripts/db-init2-functions.sh"

  - name: add base data to the database (if db was just freshly created or clean_install is set)
    shell:  "{{ fworch_home }}/install/database/db-install-scripts/db-init3-fill.sh"
    when: clean_install is defined or db_exists.stdout=="0"

  become: yes
  become_user: postgres
