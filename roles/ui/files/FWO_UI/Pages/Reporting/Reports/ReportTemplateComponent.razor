@using FWO.ApiConfig
@using FWO.Report.Filter

@inject UserConfig userConfig
@inject APIConnection apiConnection

<div class="mr-1 ml-1 mb-1 shadow">
    <Collapse Title="Templates" Style="@("primary")">
        <div class="card-body">
            <Table TableClass="table table-bordered table-sm table-responsive" TableItem="ReportTemplate" Items="reportTemplates">
                <Column Title="Actions" TableItem="ReportTemplate">
                    <Template Context="template">
                        <div class="btn-group">
                            <button class="btn btn-sm btn-success" @onclick="() => OnTemplateLoad(template)">Load</button>
                            @* only display buttons for manipulating a template, when it's the user's template or the user has admin role *@
                            @if (template.Owner == userConfig.User.DbId || authenticationStateTask.Result.User.Claims.FirstOrDefault(claim => claim.Type == "x-hasura-allowed-roles" && claim.Value == "admin") != null)
                            {
                                <button class="btn btn-sm btn-warning" @onclick="() => { reportTemplateInEdit = template; ShowEditTemplateDialog = true; }">Edit</button>
                                <button class="btn btn-sm btn-danger" @onclick="() => { reportTemplateInEdit = template; ShowDeleteTemplateDialog = true; }">Delete</button>
                            }
                        </div>
                    </Template>
                </Column>
                <Column Title="Name" TableItem="ReportTemplate">
                    <Template>
                        @if (context.Owner == 0)
                        {
                            <b>@context.Name</b>
                        }
                        else
                        {
                            @context.Name
                        }
                    </Template>
                </Column>
                <Column Title="Comment" TableItem="ReportTemplate" Field="x => x.Comment" />
                <Column Title="Creation Date" TableItem="ReportTemplate" Field="x => x.CreationDate" />
                <Column Title="Filter" TableItem="ReportTemplate" Field="x => x.Filter" />
            </Table>
        </div>
    </Collapse>
</div>

<PopUp Large="true" Title="Report Template" Show="@(ShowEditTemplateDialog || ShowSaveTemplateDialog)">
    <Body>
        <div>
            <div class="form-group">
                <label for="saveTemplateName">Name:</label>
                <input id="saveTemplateName" type="text" class="form-control" @bind="reportTemplateInEdit.Name">
            </div>
            <div class="form-group">
                <label for="saveTemplateComment">Comment:</label>
                <textarea id="saveTemplateComment" class="form-control" @bind="reportTemplateInEdit.Comment" />
            </div>
            <div class="form-group">
                <label for="saveTemplateFilterLineTextarea">Filter:</label>
                <textarea id="saveTemplateFilterLineTextarea" class="form-control" @bind="reportTemplateInEdit.Filter" />
            </div>
        </div>
    </Body>
    <Footer>
        <button class="btn btn-primary" @onclick="async () => { if (ShowSaveTemplateDialog) await SaveTemplate(); else await EditTemplate(); }">Save</button>
        <button class="btn btn-secondary" @onclick="() => ShowEditTemplateDialog = ShowSaveTemplateDialog = false">Cancel</button>
    </Footer>
</PopUp>

<PopUp Title="Report Template" Show="@ShowDeleteTemplateDialog">
    <Body>
        <p>Do you really want to delete report template "@reportTemplateInEdit.Name" ?</p>
    </Body>
    <Footer>
        <button class="btn btn-danger" @onclick="DeleteTemplate">Delete</button>
        <button class="btn btn-secondary" @onclick="() => ShowDeleteTemplateDialog = false">Cancel</button>
    </Footer>
</PopUp>

@code
{
    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }

    [CascadingParameter]
    private Action<Exception, string, string, bool> DisplayMessageInUi { get; set; }

    [Parameter]
    public Action<ReportTemplate> OnTemplateLoad { get; set; }

    public List<ReportTemplate> reportTemplates { get; set; }
    public ReportTemplate reportTemplateInEdit = null;

    bool ShowSaveTemplateDialog = false;
    bool ShowEditTemplateDialog = false;
    bool ShowDeleteTemplateDialog = false;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            reportTemplates = (await apiConnection.SendQueryAsync<ReportTemplate[]>(ReportQueries.getReportTemplates)).ToList();
            await InvokeAsync(StateHasChanged);
        }
        catch (Exception exception)
        {
            DisplayMessageInUi(exception, "Report Template Fetch", "Error while fetching report templates from API", true);
        }
    }

    public void NewTemplate(string filterInput)
    {
        reportTemplateInEdit = new ReportTemplate { Filter = filterInput };
        ShowSaveTemplateDialog = true;
    }

    private async Task SaveTemplate()
    {
        try
        {
            reportTemplateInEdit.CreationDate = DateTime.Now;
            reportTemplateInEdit.Owner = userConfig.User.DbId;

            var queryVariables = new
            {
                reportTemplateName = reportTemplateInEdit.Name,
                reportFilterLine = reportTemplateInEdit.Filter,
                reportTemplateCreate = reportTemplateInEdit.CreationDate,
                reportTemplateComment = reportTemplateInEdit.Comment,
                reportTemplateOwner = reportTemplateInEdit.Owner
            };

            reportTemplateInEdit.Id = (await apiConnection.SendQueryAsync<NewReturning>(ReportQueries.addReportTemplate, queryVariables)).ReturnIds[0].NewId;
            reportTemplates.Add(reportTemplateInEdit);

            ShowSaveTemplateDialog = false;
            StateHasChanged();
        }
        catch (Exception exception)
        {
            DisplayMessageInUi(exception, "Save report template", "Unclassified error.", true);
        }
    }

    private async Task EditTemplate()
    {
        try
        {
            await apiConnection.SendQueryAsync<object>(ReportQueries.editReportTemplate, reportTemplateInEdit);
            reportTemplates[reportTemplates.FindIndex(reportTemplate => reportTemplate.Id == reportTemplateInEdit.Id)] = reportTemplateInEdit;

            ShowEditTemplateDialog = false;
        }
        catch (Exception exception)
        {
            DisplayMessageInUi(exception, "Edit report template", "Unclassified error.", true);
        }
    }

    private async Task DeleteTemplate()
    {
        try
        {
            var queryVariables = new
            {
                reportTemplateId = reportTemplateInEdit.Id
            };

            await apiConnection.SendQueryAsync<object>(ReportQueries.deleteReportTemplate, queryVariables);
            reportTemplates.Remove(reportTemplates.Find(reportTemplate => reportTemplate.Id == reportTemplateInEdit.Id));

            ShowDeleteTemplateDialog = false;
        }
        catch (Exception exception)
        {
            DisplayMessageInUi(exception, "Delete report template", "Unclassified error.", true);
        }
    }
}



