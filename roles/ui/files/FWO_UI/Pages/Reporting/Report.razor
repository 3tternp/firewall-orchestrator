@using FWO.ApiConfig
@using FWO.Report
@using FWO.Ui.Display
@using FWO.Report.Filter
@using FWO.Report.Filter.Exceptions
@using FWO.Ui.Services

@inject APIConnection Connection
@inject UserConfig userConfig

@page "/report"

<Sidebar Collapsible="true" Resizeable="true" InitialWidth="sidebarLeftWidth" PositionLeft="true" @bind-Width="sidebarLeftWidth">
    <div class="p-3">
        <h5 class="text-center">Report Type</h5>

        <div class="list-group small mt-3">
            <a class="list-group-item list-group-item-action @(reportType==rulesReport?"active":"")" @onclick="() => { filterInput = rulesReportDefaultFilterLine; reportType = rulesReport; }" href="report">@rulesReport</a>
            <a class="list-group-item list-group-item-action @(reportType==changesReport?"active":"")" @onclick="() => { filterInput = changesReportDefaultFilterLine; reportType = changesReport; }" href="report">Changes</a>
            <a class="list-group-item list-group-item-action @(reportType==complianceReport?"active":"")" @onclick="() => { filterInput = complianceReportDefaultFilterLine; reportType = complianceReport; }" href="report">Compliance</a>
            <a class="list-group-item list-group-item-action  @(reportType==statisticsReport?"active":"")" @onclick="() => { filterInput = statisticsReportDefaultFilterLine; reportType = statisticsReport; }" href="report">Statistics</a>
        </div>

        <hr />

        <button class="btn btn-primary btn-sm" @onclick="GenerateReport">Generate Report</button>

        <hr />

        @foreach (Management management in managementsOverview)
        {
            @if (management != null)
            {
                <Collapse Title="@(management.Name)" StartToggled="false" Style="@("primary")">
                    @foreach (Device device in management.Devices)
                    {
                        <div class="form-check">
                            <input class="form-check-input" type="checkbox" id="@($"man{management.Id}dev{device.Id}")" value="">
                            <label class="form-check-label" for="@($"man{management.Id}dev{device.Id}")">
                                @(device.Name)
                            </label>
                        </div>
                    }
                </Collapse>
            }
        }
    </div>
</Sidebar>

<div style="margin-left: @($"{sidebarLeftWidth + 10}px"); margin-right: @($"{sidebarRightWidth + 10}px");">
    <form class="m-1 position-relative" @onsubmit="GenerateReport">
        <input style="position:relative; z-index:1; background-color:rgba(0,0,0,0);" translate="no" autocapitalize="off"
               class="form-control" spellcheck="false" placeholder="Filter" @oninput="TryFilter" @bind="filterInput" />
        <div style="left:0px; top:0px; color:rgba(0,0,0,0); user-select:none;" translate="no" autocapitalize="off"
             class="form-control position-absolute whitespace-div" spellcheck="false">
            <span>@filterFeedbackStart</span><span class="error-underline">@filterFeedbackError</span><span>@filterFeedbackEnd</span>
        </div>
    </form>

    <div class="btn-group mr-1 ml-1 mb-1">
        <button class="btn btn-sm btn-primary" @onclick="GenerateReport">Generate Report</button>
        <button class="btn btn-sm btn-dark" @onclick="() => { ShowExportDialog = true; }">Export Report</button>
        <button class="btn btn-sm btn-secondary" @onclick="() => { reportTemplateInEdit = new ReportTemplate { Filter = filterInput }; ShowSaveTemplateDialog = true; }">Save as Template</button>
    </div>

    <hr />

    <PopUp Title="Export Report" Show="@ShowExportDialog">
        <Body>
            <div>
                <p>Export as...</p>
                <div class="form-check">
                    <input class="form-check-input" type="radio" name="radioReportExport" id="reportExportPdf" checked>
                    <label class="form-check-label" for="reportExportPdf">
                        PDF
                    </label>
                </div>
                <div class="form-check">
                    <input class="form-check-input" type="radio" name="radioReportExport" id="reportExportHtml">
                    <label class="form-check-label" for="reportExportHtml">
                        HTML
                    </label>
                </div>
                <div class="form-check">
                    <input class="form-check-input" type="radio" name="radioReportExport" id="reportExportCsv">
                    <label class="form-check-label" for="reportExportCsv">
                        CSV
                    </label>
                </div>
            </div>
            <div class="form-check">
                <input class="form-check-input" type="checkbox" value="" id="flexCheckChecked" checked>
                <label class="form-check-label" for="flexCheckChecked">
                    Archive
                </label>
            </div>
        </Body>
        <Footer>
            <button class="btn btn-primary" @onclick="() => { }">Export</button>
            <button class="btn btn-secondary" @onclick="() => ShowExportDialog = false">Cancel</button>
        </Footer>
    </PopUp>

    <PopUp Large="true" Title="Report Template" Show="@(ShowEditTemplateDialog || ShowSaveTemplateDialog)">
        <Body>
            <div>
                <div class="form-group">
                    <label for="saveTemplateName">Name:</label>
                    <input id="saveTemplateName" type="text" class="form-control" @bind="reportTemplateInEdit.Name">
                </div>
                <div class="form-group">
                    <label for="saveTemplateComment">Comment:</label>
                    <textarea id="saveTemplateComment" class="form-control" @bind="reportTemplateInEdit.Comment" />
                </div>
                <div class="form-group">
                    <label for="saveTemplateFilterLineTextarea">Filter:</label>
                    <textarea id="saveTemplateFilterLineTextarea" class="form-control" @bind="reportTemplateInEdit.Filter" />
                </div>
            </div>
        </Body>
        <Footer>
            <button class="btn btn-primary" @onclick="async () => { if (ShowSaveTemplateDialog) await SaveTemplate(); else await EditTemplate(); }">Save</button>
            <button class="btn btn-secondary" @onclick="() => ShowEditTemplateDialog = ShowSaveTemplateDialog = false">Cancel</button>
        </Footer>
    </PopUp>

    <PopUp Title="Report Template" Show="@ShowDeleteTemplateDialog">
        <Body>
            <p>Do you really want to delete report template "@reportTemplateInEdit.Name" ?</p>
        </Body>
        <Footer>
            <button class="btn btn-danger" @onclick="DeleteTemplate">Delete</button>
            <button class="btn btn-secondary" @onclick="() => ShowDeleteTemplateDialog = false">Cancel</button>
        </Footer>
    </PopUp>

    <div class="mr-1 ml-1 mb-1 shadow">
        <Collapse Title="Templates" Style="@("primary")">
            <div class="card-body">
                <Table TableClass="table table-bordered table-sm table-responsive" TableItem="ReportTemplate" Items="reportTemplates">
                    <Column Title="Name" TableItem="ReportTemplate" Field="x => x.Name" />
                    <Column Title="Comment" TableItem="ReportTemplate" Field="x => x.Comment" />
                    <Column Title="Creation Date" TableItem="ReportTemplate" Field="x => x.CreationDate" />
                    <Column Title="Filter" TableItem="ReportTemplate" Field="x => x.Filter" />
                    <Column Title="Actions" TableItem="ReportTemplate">
                        <Template>
                            <div class="btn-group">
                                <button class="btn btn-sm btn-success" @onclick="() => filterInput = context.Filter">Load</button>
                                <button class="btn btn-sm btn-warning" @onclick="() => { reportTemplateInEdit = context; ShowEditTemplateDialog = true; }">Edit</button>
                                <button class="btn btn-sm btn-danger" @onclick="() => { reportTemplateInEdit = context; ShowDeleteTemplateDialog = true; }">Delete</button>
                            </div>
                        </Template>
                    </Column>
                </Table>
            </div>
        </Collapse>
    </div>

    <div class="card mr-1 ml-1 mb-1 shadow">
        <div class="card-body">

            @switch (reportType)
            {
                case rulesReport:
                    @foreach (Management management in managementsReport)
                    {
                        <Collapse Title="@management.Name" Style="@("primary")" StartToggled="false">

                            @foreach (Device device in management.Devices)
                            {
                                <Collapse Title="@device.Name" Style="@("secondary")" StartToggled="false">
                                    <Table SelectedItems="selectedItemsReportRuleTable"
                                           RowClickAction="tableItem => { if (!selectedItemsReportRuleTable.Remove(tableItem)) selectedItemsReportRuleTable.Add(tableItem); StateHasChanged(); }"
                                           style="font-size:small" TableClass="table table-bordered table-sm table-responsive" TableItem="Rule" Items="device.Rules" ShowSearchBar="true"
                                           PageSize="rulesPerPage" ColumnReorder="true" TableRowClass="@(rule => rule.SectionHeader != null ? "hide-all-but-second-child second-child-full-width" : "")">

                                        <Column TableItem="Rule" Title="Number" DefaultSortColumn="true" Field="@(rChange => rChange.OrderNumber)" Sortable="true" Filterable="true" Hideable="true">
                                            <Template>
                                                @((MarkupString)context.DisplayNumber(device.Rules))
                                            </Template>
                                        </Column>
                                        <Column TableItem="Rule" Title="Name" Field="@(rChange => rChange.Name)" Sortable="true" Filterable="true" Hideable="true" />
                                        <Column TableItem="Rule" Title="Source Zone" Field="@(rChange => rChange.SourceZone)" Sortable="true" Filterable="true" Hideable="true">
                                            <Template>
                                                @((MarkupString)context.DisplaySourceZone())
                                            </Template>
                                        </Column>
                                        <Column TableItem="Rule" Title="Source" Field="@(rChange => rChange.Name)" Sortable="true" Filterable="true" Hideable="true">
                                            <Template>
                                                @((MarkupString)context.DisplaySource())
                                            </Template>
                                        </Column>
                                        <Column TableItem="Rule" Title="Destination Zone" Field="@(rChange => rChange.Name)" Sortable="true" Filterable="true" Hideable="true">
                                            <Template>
                                                @((MarkupString)context.DisplayDestinationZone())
                                            </Template>
                                        </Column>
                                        <Column TableItem="Rule" Title="Destination" Field="@(rChange => rChange.Name)" Sortable="true" Filterable="true" Hideable="true">
                                            <Template>
                                                @((MarkupString)context.DisplayDestination())
                                            </Template>
                                        </Column>
                                        <Column TableItem="Rule" Title="Services" Field="@(rChange => rChange.Name)" Sortable="true" Filterable="true" Hideable="true">
                                            <Template>
                                                @((MarkupString)context.DisplayService())
                                            </Template>
                                        </Column>
                                        <Column TableItem="Rule" Title="Action" Field="@(rChange => rChange.Action)" Sortable="true" Filterable="true" Hideable="true" />
                                        <Column TableItem="Rule" Title="Track" Field="@(rChange => rChange.Track)" Sortable="true" Filterable="true" Hideable="true" />
                                        <Column TableItem="Rule" Title="Disabled" Field="@(rChange => rChange.Disabled)" Sortable="true" Filterable="true" Hideable="true">
                                            <Template>
                                                @((MarkupString)context.DisplayDisabled())
                                            </Template>
                                        </Column>
                                        <Column TableItem="Rule" Title="UID" Field="@(rChange => rChange.Uid)" Sortable="true" Filterable="true" Hideable="true" />
                                        <Column TableItem="Rule" Title="Comment" Field="@(rChange => rChange.Comment)" Sortable="true" Filterable="true" Hideable="true" />

                                        <DetailTemplate TableItem="Rule">
                                            <div>test</div>
                                        </DetailTemplate>

                                        <Pager ShowPageNumber="true" ShowTotalCount="true" />
                                    </Table>
                                </Collapse>
                            }
                        </Collapse>
                    }
                    break;

                case changesReport:
                    @foreach (Management management in managementsReport)
                    {
                        <Collapse Title="@management.Name" Style="@("primary")" StartToggled="false">

                            @foreach (Device device in management.Devices)
                            {
                                <Collapse Title="@device.Name" Style="@("secondary")" StartToggled="false">

                                    <Table SelectedItems="selectedItemsReportChangeTable"
                                           RowClickAction="tableItem => { if (!selectedItemsReportChangeTable.Remove(tableItem)) selectedItemsReportChangeTable.Add(tableItem); StateHasChanged(); }"
                                           style="font-size:small" TableClass="table table-bordered table-sm table-responsive" TableItem="RuleChange" Items="device.RuleChanges" ShowSearchBar="true"
                                           PageSize="rulesPerPage" ColumnReorder="true">

                                        <Column TableItem="RuleChange" Title="Change Time" Field="@(rChange => rChange.ChangeImport.Time)" Sortable="true" Filterable="true" Hideable="true" />
                                        <Column TableItem="RuleChange" Title="Change Type" Hideable="true">
                                            <Template>
                                                @((MarkupString)context.DisplayChangeAction())
                                            </Template>
                                        </Column>
                                        <Column TableItem="RuleChange" Title="Name" Hideable="true">
                                            <Template>
                                                @((MarkupString)context.DisplayName())
                                            </Template>
                                        </Column>
                                        <Column TableItem="RuleChange" Title="Source Zone" Hideable="true">
                                            <Template>
                                                @((MarkupString)context.DisplaySourceZone())
                                            </Template>
                                        </Column>
                                        <Column TableItem="RuleChange" Title="Source" Hideable="true">
                                            <Template>
                                                @((MarkupString)context.DisplaySource())
                                            </Template>
                                        </Column>
                                        <Column TableItem="RuleChange" Title="Destination Zone" Hideable="true">
                                            <Template>
                                                @((MarkupString)context.DisplayDestinationZone())
                                            </Template>
                                        </Column>
                                        <Column TableItem="RuleChange" Title="Destination" Hideable="true">
                                            <Template>
                                                @((MarkupString)context.DisplayDestination())
                                            </Template>
                                        </Column>
                                        <Column TableItem="RuleChange" Title="Services" Hideable="true">
                                            <Template>
                                                @((MarkupString)context.DisplayService())
                                            </Template>
                                        </Column>
                                        <Column TableItem="RuleChange" Title="Action" Hideable="true">
                                            <Template>
                                                @((MarkupString)context.DisplayAction())
                                            </Template>
                                        </Column>
                                        <Column TableItem="RuleChange" Title="Track" Hideable="true">
                                            <Template>
                                                @((MarkupString)context.DisplayTrack())
                                            </Template>
                                        </Column>
                                        <Column TableItem="RuleChange" Title="Disabled" Hideable="true">
                                            <Template>
                                                @((MarkupString)context.DisplayDisabled())
                                            </Template>
                                        </Column>
                                        <Column TableItem="RuleChange" Title="UID" Hideable="true">
                                            <Template>
                                                @((MarkupString)context.DisplayUid())
                                            </Template>
                                        </Column>
                                        <Column TableItem="RuleChange" Title="Comment" Hideable="true">
                                            <Template>
                                                @((MarkupString)context.DisplayComment())
                                            </Template>
                                        </Column>

                                        <DetailTemplate TableItem="RuleChange">
                                            <div>test</div>
                                        </DetailTemplate>

                                        <Pager ShowPageNumber="true" ShowTotalCount="true" />
                                    </Table>
                                </Collapse>
                            }
                        </Collapse>
                    }
                    break;

                case statisticsReport:
                    @if (globalStats != null)
                    {
                        <h6>Gobal number of Objects</h6>
                        <Table style="font-size:small" TableClass="table table-bordered table-sm table-responsive" TableItem="Management" Items="new Management[] {globalStats}">
                            <Column TableItem="Management" Title="Network objects" Field="@(Management => Management.NetworkObjectStatistics.ObjectAggregate.ObjectCount)" />
                            <Column TableItem="Management" Title="Service objects" Field="@(Management => Management.ServiceObjectStatistics.ObjectAggregate.ObjectCount)" />
                            <Column TableItem="Management" Title="User objects" Field="@(Management => Management.UserObjectStatistics.ObjectAggregate.ObjectCount)" />
                            <Column TableItem="Management" Title="Rules" Field="@(Management => Management.RuleStatistics.ObjectAggregate.ObjectCount)" />
                        </Table>
                    }
                    @foreach (Management management in managementsReport)
                    {
                        <Collapse Title="@management.Name" Style="@("primary")" StartToggled="false">
                            <h6>Total number of Objects per Management</h6>
                            <Table style="font-size:small" TableClass="table table-bordered table-sm table-responsive" TableItem="Management" Items="new Management[] {management}">
                                <Column TableItem="Management" Title="Network objects" Field="@(Management => Management.NetworkObjectStatistics.ObjectAggregate.ObjectCount)" />
                                <Column TableItem="Management" Title="Service objects" Field="@(Management => Management.ServiceObjectStatistics.ObjectAggregate.ObjectCount)" />
                                <Column TableItem="Management" Title="User objects" Field="@(Management => Management.UserObjectStatistics.ObjectAggregate.ObjectCount)" />
                                <Column TableItem="Management" Title="Rules" Field="@(Management => Management.RuleStatistics.ObjectAggregate.ObjectCount)" />
                            </Table>

                            <h6>Number of Rules per Gateway</h6>
                            <Table style="font-size:small" TableClass="table table-bordered table-sm table-responsive" TableItem="Device" Items="management.Devices">
                                <Column TableItem="Device" Title="Gateway" Field="@(Device => Device.Name)" />
                                <Column TableItem="Device" Title="Number of Rules" Field="@(Device => Device.RuleStatistics.ObjectAggregate.ObjectCount)" />
                            </Table>
                        </Collapse>
                    }
                    break;

                default:
                    break;
            }
        </div>
    </div>
</div>

<Sidebar Collapsible="true" Resizeable="true" InitialWidth="sidebarRightWidth" PositionLeft="false" @bind-Width="sidebarRightWidth">
    <div class="p-3">
        <TabSet>
            <Tab Title="All">
                <ObjectGroup InputDataType="Management" Data="managementsAllObjects" NameExtractor="man => man.Name" NetworkObjectExtractor="man => man.Objects"
                             NetworkServiceExtractor="man => man.Services" NetworkUserExtractor="man => man.Users" />
            </Tab>
            <Tab Title="Report">
                <ObjectGroup InputDataType="Management" Data="managementsReport" NameExtractor="man => man.Name" NetworkObjectExtractor="man => man.Objects"
                             NetworkServiceExtractor="man => man.Services" NetworkUserExtractor="man => man.Users" />
            </Tab>
            <Tab Title="Rule">
                <ObjectGroup InputDataType="Rule" Data="selectedItemsReportRuleTable" NameExtractor="rule => rule.Name"
                             NetworkObjectExtractor="rule => Array.ConvertAll(rule.Tos.Concat(rule.Froms).ToArray(), location => location.Object)"
                             NetworkServiceExtractor="rule => Array.ConvertAll(rule.Services, wrapper => wrapper.Content)"
                             NetworkUserExtractor="rule => Array.FindAll(Array.ConvertAll(rule.Tos.Concat(rule.Froms).ToArray(), location => location.User), user => user != null)" />
            </Tab>
        </TabSet>
    </div>
</Sidebar>

@code
{
    private List<Rule> selectedItemsReportRuleTable = new List<Rule>();
    private List<RuleChange> selectedItemsReportChangeTable = new List<RuleChange>();

    private Management[] managementsOverview = new Management[0];
    private Management[] managementsReport = new Management[0];
    private Management[] managementsAllObjects = new Management[0];
    private Management[] managementsWithRelevantImportId = new Management[0];
    private Management globalStats = null;

    private List<ReportTemplate> reportTemplates = new List<ReportTemplate>();
    private ReportFile[] archivedReports = new ReportFile[0];
    private ScheduledReport[] scheduledReports = new ScheduledReport[0];

    private int rulesPerFetch = 100;    // todo: rename to "elementsPerFetch" to cover all types of report/objects
    private int rulesPerPage = 0;   // todo: remove - no pagination implemented?

    private bool ShowPopUp = false;
    private bool ShowExportDialog = false;
    private bool ShowSaveTemplateDialog = false;
    private bool ShowEditTemplateDialog = false;
    private bool ShowDeleteTemplateDialog = false;
    private bool ShowDeleteReportFileDialog = false;
    private bool ShowEditScheduledReportDialog = false;
    private bool ShowDeleteScheduledReportDialog = false;

    private int sidebarLeftWidth = 300;
    private int sidebarRightWidth = 300;

    private ReportTemplate reportTemplateInEdit = null;

    private int reportFileId = 0;

    private int scheduledReportId = 0;
    private string scheduledReportName = "";
    private string scheduledReportRepeatInterval = "";
    private int scheduledReportRepeatCount = 0;
    private string scheduledReportTemplateName = "";
    private string scheduledReportOwner = "";
    private string scheduledReportOutputFormat = "";
    private bool scheduledReportActive = false;

    private string filterFeedbackStart = "";
    private string filterFeedbackError = "";
    private string filterFeedbackEnd = "";
    private string filterInput = "";
    private const string rulesReportDefaultFilterLine = "type=rules and time=now ";
    //private string changesReportDefaultFilterLine = "type=changes and time=\"last year\" ";
    private const string changesReportDefaultFilterLine = "type=changes and time=\"this year\" ";
    private const string statisticsReportDefaultFilterLine = "type=statistics and time=now ";
    private const string anyObjcomplianceReportDefaultFilterLine = "type=compliance and time=now and (src=any or dst=any or svc=any or src=all or dst=all or svc=all) and not(action=drop or action=reject or action=deny)";
    private const string cleanupRulecomplianceReportDefaultFilterLine = "type=compliance and time=now and (src=any and dst=any and svc=any) or (src=all and dst=all and svc=all) and (action=drop or action=reject or action=deny)";
    private const string inactiveRulescomplianceReportDefaultFilterLine = "type=compliance and time=now and active=false";
    private const string complianceReportDefaultFilterLine = anyObjcomplianceReportDefaultFilterLine;
    private string reportGenerationTimeLine = "";
    private const string rulesReport = "Rules";
    private const string changesReport = "Changes";
    private const string complianceReport = "Compliance";
    private const string statisticsReport = "Statistics";
    private string reportType = rulesReport;

    [CascadingParameter]
    Action<string, string> ShowError { get; set; }

    protected override void OnInitialized()
    {
        Task.Run(async () =>
        {
            try
            {
                GetSettings();
                PaginationVariables paginationVariables = new PaginationVariables() { Limit = rulesPerFetch, Offset = 0 };

                managementsAllObjects = await Connection.SendQueryAsync<Management[]>(ObjectQueries.getAllObjectDetails, paginationVariables);
                await InvokeAsync(StateHasChanged);

                bool newObjects = true;

                // lazy fetch all objects for right sidebar
                while (newObjects)
                {
                    paginationVariables.Offset += rulesPerFetch;
                    Management[] managementsCurrentFetch = await Connection.SendQueryAsync<Management[]>(ObjectQueries.getAllObjectDetails, paginationVariables);
                    newObjects = managementsAllObjects.Merge(managementsCurrentFetch);

                    await InvokeAsync(StateHasChanged);
                }
            }
            catch (Exception exception)
            {
                Log.WriteError("Object Fetching Error", "Error while fetching objects from API.", exception);
                ShowError("Object Fetching Error", "Error while fetching objects from API.");
            }
        });

        Task.Run(async () =>
        {
            managementsOverview = await Connection.SendQueryAsync<Management[]>(DeviceQueries.getDevicesByManagements);
            await InvokeAsync(StateHasChanged);
        });

        Task.Run(async () =>
        {
            try
            {
                reportTemplates = (await Connection.SendQueryAsync<ReportTemplate[]>(ReportQueries.getReportTemplates)).ToList();
                await InvokeAsync(StateHasChanged);
            }
            catch (Exception exception)
            {
                Log.WriteError("Report Template Fetching Error", "Error while fetching report templates from API.", exception);
                ShowError("Report Template Fetching Error", "Error while fetching report templates from API.");
            }
        });
    }

    private void GenerateReport()
    {
        try
        {
            Task.Run(async () =>
            {
                DateTime startTime = DateTime.Now;
                managementsReport = new Management[0]; // reset management data when switching between reports
                switch (reportType)
                {
                    case rulesReport:
                        ReportRules reportRules = new ReportRules();
                        await reportRules.Generate(rulesPerFetch, filterInput, Connection,
                            managementsReportIntermediate =>
                            {
                                managementsReport = managementsReportIntermediate;
                                return InvokeAsync(StateHasChanged);
                            });
                        break;

                    case changesReport:
                        ReportChanges reportChanges = new ReportChanges();
                        await reportChanges.Generate(rulesPerFetch, filterInput, Connection,
                            managementsReportIntermediate =>
                            {
                                managementsReport = managementsReportIntermediate;
                                return InvokeAsync(StateHasChanged);
                            });
                        break;

                    case statisticsReport:
                        globalStats = new Management();
                        ReportStatistics reportStatistics = new ReportStatistics();
                        await reportStatistics.Generate(0, filterInput, Connection,
                            managementsReportIntermediate =>
                            {
                                managementsReport = managementsReportIntermediate;
                                return InvokeAsync(() =>
                                {
                                    foreach (Management mgm in managementsReport)
                                    {
                                        globalStats.RuleStatistics.ObjectAggregate.ObjectCount += mgm.RuleStatistics.ObjectAggregate.ObjectCount;
                                        globalStats.NetworkObjectStatistics.ObjectAggregate.ObjectCount += mgm.NetworkObjectStatistics.ObjectAggregate.ObjectCount;
                                        globalStats.ServiceObjectStatistics.ObjectAggregate.ObjectCount += mgm.ServiceObjectStatistics.ObjectAggregate.ObjectCount;
                                        globalStats.UserObjectStatistics.ObjectAggregate.ObjectCount += mgm.UserObjectStatistics.ObjectAggregate.ObjectCount;
                                    }
                                    StateHasChanged();
                                });
                            });
                        break;
                }
                reportGenerationTimeLine = $"generation time: {DateTime.Now - startTime}.";
                await InvokeAsync(StateHasChanged);
            });
        }
        catch (Exception exception)
        {
            //this is the default error message when user's access rights are not sufficient (e.g. user = anonymous)
            //leave managementsReport as default = empty array
            if (exception.Message == "no such type exists in the schema: 'cidr'")
            {
                Log.WriteError("Report generation", "User does not have sufficient access rights.", exception);
                ShowError("Report generation", "You dont have sufficient acces rights.");
            }
            else if (exception.Message == "Could not verify JWT: JWTExpired")
            {
                Log.WriteError("Report generation", "User's JWT has expired.", exception);
                ShowError("Report generation", "Your JWT has expired - please login again.");
            }
            else
            {
                Log.WriteError("Report generation", "Unclassified error.", exception);
                ShowError("Report generation error", "Unclassified error.");
            }
        }
    }

    private async Task SaveTemplate()
    {
        try
        {
            reportTemplateInEdit.CreationDate = DateTime.Now;

            var queryVariables = new
            {
                reportTemplateName = reportTemplateInEdit.Name,
                reportFilterLine = reportTemplateInEdit.Filter,
                reportTemplateCreate = reportTemplateInEdit.CreationDate,
                reportTemplateComment = reportTemplateInEdit.Comment
            };

            reportTemplateInEdit.Id = (await Connection.SendQueryAsync<NewReturning>(ReportQueries.addReportTemplate, queryVariables)).ReturnIds[0].NewId;
            reportTemplates.Add(reportTemplateInEdit);

            ShowSaveTemplateDialog = false;
        }
        catch (Exception exception)
        {
            Log.WriteError("Save report template", "Unclassified error.", exception);
            ShowError("Save report template error", "Unclassified error.");
        }
    }

    private async Task EditTemplate()
    {
        try
        {
            await Connection.SendQueryAsync<object>(ReportQueries.editReportTemplate, reportTemplateInEdit);
            reportTemplates[reportTemplates.FindIndex(reportTemplate => reportTemplate.Id == reportTemplateInEdit.Id)] = reportTemplateInEdit;

            ShowEditTemplateDialog = false;
        }
        catch (Exception exception)
        {
            Log.WriteError("Edit report template", "Unclassified error.", exception);
            ShowError("Edit report template error", "Unclassified error.");
        }
    }

    private async Task DeleteTemplate()
    {
        try
        {
            var queryVariables = new
            {
                reportTemplateId = reportTemplateInEdit.Id
            };

            await Connection.SendQueryAsync<object>(ReportQueries.deleteReportTemplate, queryVariables);
            reportTemplates.Remove(reportTemplates.Find(reportTemplate => reportTemplate.Id == reportTemplateInEdit.Id));

            ShowDeleteTemplateDialog = false;
        }
        catch (Exception exception)
        {
            Log.WriteError("Delete report template", "Unclassified error.", exception);
            ShowError("Delete report template error", "Unclassified error.");
        }
    }

    private void Export()
    {
        ReportRulesExporter exporter = new ReportRulesExporter() { Managements = managementsReport };
        string text = exporter.ToHtml();
        exporter.ToPdf();
    }

    private void TryFilter(ChangeEventArgs changeArgs)
    {
        DynGraphqlQuery query;

        try
        {
            filterInput = changeArgs.Value.ToString();

            query = Compiler.Compile(filterInput);

            filterFeedbackStart = filterInput;
            filterFeedbackError = "";
            filterFeedbackEnd = "";
        }
        catch (FilterException filterError)
        {
            int errorStart = filterError.ErrorPosition.Start.Value;
            int errorEnd = filterError.ErrorPosition.End.Value;

            // TODO: RESTRUCTURE (current structure only for debug purpose)
            filterFeedbackStart = $"{filterInput.Substring(0, errorStart)}";
            filterFeedbackError = filterInput.Substring(errorStart, errorEnd + 1 - errorStart);
            filterFeedbackEnd = $"{filterInput.Substring(errorEnd, filterInput.Length - 1 - errorEnd)}";
        }
        catch (Exception unexpectedError)
        {
#if DEBUG
            ShowError("Filter Error", $"{unexpectedError.Message}\n{unexpectedError.StackTrace}");
#endif
        }
    }

    private void GetSettings()
    {
        try
        {
            string settingsValue = userConfig.GetConfigValue(ConfigDbAccess.kRulesPerFetch);
            if (settingsValue != "")
            {
                rulesPerFetch = Int32.Parse(settingsValue);
            }
        }
        catch (Exception exception)
        {
            Log.WriteError("Read Config", $"Error reading config value", exception);
        }
    }
}
