@using FWO.ApiConfig
@using FWO.Report
@using FWO.Ui.Display
@using FWO.Report.Filter
@using FWO.Report.Filter.Exceptions
@using System.Text
@using System
@using System.Collections
@using FWO.Ui.Services
@using FWO.Ui.Data
@using FWO.Ui.Pages.Reporting.Reports

@page "/"
@page "/report"

@inject APIConnection Connection
@inject UserConfig userConfig

@* ==== LEFT SIDEBAR ==== *@
<Sidebar Collapsible="true" Resizeable="true" InitialWidth="sidebarLeftWidth" PositionLeft="true" @bind-Width="sidebarLeftWidth">
    <div class="p-3">

        <h5 class="text-left">Select device(s)</h5>
        <button class="btn btn-sm btn-secondary" 
            @onclick="() => { 
                fullDeviceActionIsSelect = DeviceFilter.fullDeviceSelection(managementsOverview, fullDeviceActionIsSelect); 
                if (!fullDeviceActionIsSelect)
                    deviceSelectButtonText = deviceSelectButtonTextClear;
                else
                    deviceSelectButtonText = deviceSelectButtonTextSelect;
                filterInput = DeviceFilter.syncLSBFilterToFilterLine(managementsOverview, filterInput);
            }">
            @deviceSelectButtonText
        </button>
        <br><br>

        @foreach (Management management in managementsOverview)
        {
            @if (management != null)
            {
                <Collapse Title="@(management.Name)" StartToggled="false" Style="@("primary")">
                    @foreach (Device device in management.Devices)
                    {
                        <div class="form-check">
                            <input class="form-check-input" type="checkbox" id="device.Id"
                                @bind="device.selected"
                                @oninput="() => { 
                                    device.selected = !device.selected; 
                                    if (DeviceFilter.areAllDevicesSelected(managementsOverview))
                                    {
                                        deviceSelectButtonText = deviceSelectButtonTextClear;
                                        fullDeviceActionIsSelect = false;
                                    } 
                                    if (!DeviceFilter.isAnyLSBDeviceFilterSet(managementsOverview)) 
                                    {
                                        deviceSelectButtonText = deviceSelectButtonTextSelect; 
                                        fullDeviceActionIsSelect = true;
                                    } 
                                    filterInput = DeviceFilter.syncLSBFilterToFilterLine(managementsOverview, filterInput); 
                                }"
                            />
                            <label class="form-check-label" for="@device.Id">
                                &nbsp;@device.Name
                            </label>
                        </div>
                    }
                </Collapse>
            }
        }
    </div>
</Sidebar>

@* ==== Middle div ==== *@
<div style="margin-left: @($"{sidebarLeftWidth + 10}px"); margin-right: @($"{sidebarRightWidth + 10}px");">
@* ==== Filter line ==== *@
    <form class="m-1 position-relative" @onsubmit="GenerateReport">
        <input style="position:relative; z-index:1; background-color:rgba(0,0,0,0);" translate="no" autocapitalize="off"
               class="form-control" spellcheck="false" placeholder="Filter" @oninput="TryFilter" @bind="filterInput" />
        <div style="left:0px; top:0px; color:rgba(0,0,0,0); user-select:none;" translate="no" autocapitalize="off"
             class="form-control position-absolute whitespace-div" spellcheck="false">
            <span>@filterFeedbackStart</span><span class="error-underline">@filterFeedbackError</span><span>@filterFeedbackEnd</span>
        </div>
    </form>

    <div class="btn-group mr-1 ml-1 mb-1">
        <button class="btn btn-sm btn-primary" @onclick="GenerateReport">Generate Report</button>
        <ReportExport ReportToExport="currentReport"></ReportExport>
        <button class="btn btn-sm btn-secondary" @onclick="() => { reportTemplateControl.NewTemplate(filterInput); }">Save as Template</button>
    </div>

    <hr />

    <PopUp Title="No device(s) selected." Show="@ShowNoDeviceSelectedWarning">
        <Body>
            <div>
                <p>Please select at least one device in the left side-bar before generating a report.</p>
            </div>
        </Body>
        <Footer>
            <button class="btn btn-primary" @onclick="() => ShowNoDeviceSelectedWarning = false">OK</button>
        </Footer>
    </PopUp>

@* ==== Templates ==== *@
    <ReportTemplateComponent OnTemplateLoad="
        template => {
            fullDeviceActionIsSelect = syncTemplateFilter(template, fullDeviceActionIsSelect);
            if (fullDeviceActionIsSelect)
                deviceSelectButtonText = deviceSelectButtonTextSelect;
            else
                deviceSelectButtonText = deviceSelectButtonTextClear;
        }"
    @ref="reportTemplateControl"></ReportTemplateComponent>

@* ==== Report main div ==== *@
    <div class="card mr-1 ml-1 mb-1 shadow">
        <div class="card-body">

            @if (query != null)
            {
                @switch (query.ReportType)
                {
                    case rulesReport:
                        <RulesReport Managements="managementsReport" RulesPerPage="rulesPerPage" SelectedRules="selectedItemsRuleReportTable" OnSelectedRulesChange="_ => StateHasChanged()"></RulesReport>
                        break;

                    case changesReport:
                        <ChangesReport Managements="managementsReport" RulesPerPage="rulesPerPage" SelectedRuleChanges="selectedItemsChangeReportTable" OnSelectedRulesChange="_ => StateHasChanged()"></ChangesReport>
                        break;

                    case statisticsReport:
                        @if (globalStats != null)
                        {
                            <h5>Gobal number of Objects</h5>
                            <Table style="font-size:small" TableClass="table table-bordered table-sm table-responsive" TableItem="Management" Items="new Management[] {globalStats}">
                                <Column TableItem="Management" Title="Network objects" Field="@(Management => Management.NetworkObjectStatistics.ObjectAggregate.ObjectCount)" />
                                <Column TableItem="Management" Title="Service objects" Field="@(Management => Management.ServiceObjectStatistics.ObjectAggregate.ObjectCount)" />
                                <Column TableItem="Management" Title="User objects" Field="@(Management => Management.UserObjectStatistics.ObjectAggregate.ObjectCount)" />
                                <Column TableItem="Management" Title="Rules" Field="@(Management => Management.RuleStatistics.ObjectAggregate.ObjectCount)" />
                            </Table>
                        }
                        @foreach (Management management in managementsReport)
                        {
                            <Collapse Title="@management.Name" Style="@("primary")" StartToggled="false">
                                <h6>Total number of Objects per Management</h6>
                                <Table style="font-size:small" TableClass="table table-bordered table-sm table-responsive" TableItem="Management" Items="new Management[] {management}">
                                    <Column TableItem="Management" Title="Network objects" Field="@(Management => Management.NetworkObjectStatistics.ObjectAggregate.ObjectCount)" />
                                    <Column TableItem="Management" Title="Service objects" Field="@(Management => Management.ServiceObjectStatistics.ObjectAggregate.ObjectCount)" />
                                    <Column TableItem="Management" Title="User objects" Field="@(Management => Management.UserObjectStatistics.ObjectAggregate.ObjectCount)" />
                                    <Column TableItem="Management" Title="Rules" Field="@(Management => Management.RuleStatistics.ObjectAggregate.ObjectCount)" />
                                </Table>

                                <h6>Number of Rules per Gateway</h6>
                                <Table style="font-size:small" TableClass="table table-bordered table-sm table-responsive" TableItem="Device" Items="management.Devices">
                                    <Column TableItem="Device" Title="Gateway" Field="@(Device => Device.Name)" />
                                    <Column TableItem="Device" Title="Number of Rules" Field="@(Device => Device.RuleStatistics.ObjectAggregate.ObjectCount)" />
                                </Table>
                            </Collapse>
                        }
                        break;

                    default:
                        break;
                }
            }
        </div>
    </div>
</div>

@* ==== RIGHT SIDEBAR ==== *@
<Sidebar Collapsible="true" Resizeable="true" InitialWidth="sidebarRightWidth" PositionLeft="false" @bind-Width="sidebarRightWidth">
    <div class="p-3">
        <div class="card mb-1">
            <div class="card-body text-center p-1">
                Objects
            </div>
        </div>
        <TabSet KeepPanelsAlive="true">
            <Tab Title="All">
                <div class="d-md-flex justify-content-md-end">
                    <div class="btn btn-secondary btn-sm mb-2" @onclick="@(() => collapseSidebarAll.CollapseAll())">collapse all</div>
                </div>
                <CascadingValue Value="collapseSidebarAll">
                    <ObjectGroupCollection ReportPage="this" Type="0" InputDataType="Management" Data="managementsAllObjects" NameExtractor="man => man.Name" NetworkObjectExtractor="man => man.Objects"
                                            NetworkServiceExtractor="man => man.Services" NetworkUserExtractor="man => man.Users" />
                </CascadingValue>
            </Tab>
            @*<Tab Title="Report">
                <div class="d-md-flex justify-content-md-end">
                    <div class="btn btn-secondary btn-sm mb-2" @onclick="@(() => collapseSidebarReport.CollapseAll())">collapse all</div>
                </div>
                <CascadingValue Value="collapseSidebarReport">
                    <ObjectGroupCollection ReportPage="this" Type="1" InputDataType="Management" Data="managementsReport" NameExtractor="man => man.Name" NetworkObjectExtractor="man => man.Objects"
                                            NetworkServiceExtractor="man => man.Services" NetworkUserExtractor="man => man.Users" />
                </CascadingValue>
            </Tab>*@
            <Tab Title="Rule">
                <div class="d-md-flex justify-content-md-between">
                    <div class="btn btn-dark btn-sm mb-2" @onclick="@(() => selectedItemsRuleReportTable.Clear())">clear all</div>
                    <div class="btn btn-secondary btn-sm mb-2" @onclick="@(() => collapseSidebarRule.CollapseAll())">collapse all</div>
                </div>
                <CascadingValue Value="collapseSidebarRule">
                    <ObjectGroupCollection ReportPage="this" Type="2" StartCollapsed="false" InputDataType="Rule" Data="selectedItemsRuleReportTable"
                                            NameExtractor=@(rule => $"{rule.DeviceName} - Rule {rule.Id} {rule.Name}")
                                            NetworkObjectExtractor="rule => Array.ConvertAll(rule.Tos.Concat(rule.Froms).ToArray(), location => location.Object)"
                                            NetworkServiceExtractor="rule => Array.ConvertAll(rule.Services, wrapper => wrapper.Content)"
                                            NetworkUserExtractor="rule => Array.FindAll(Array.ConvertAll(rule.Tos.Concat(rule.Froms).ToArray(), location => location.User), user => user != null)" />
                </CascadingValue>
            </Tab>
        </TabSet>
    </div>
</Sidebar>

@code
{
    [CascadingParameter]
    Action<Exception, string, string, bool> DisplayMessageInUi { get; set; }

    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }

    private List<Rule> selectedItemsRuleReportTable = new List<Rule>();
    private List<RuleChange> selectedItemsChangeReportTable = new List<RuleChange>();

    private Management[] managementsOverview = new Management[0];
    private Management[] managementsReport = new Management[0];
    private Management[] managementsAllObjects = new Management[0];
    private Management[] managementsWithRelevantImportId = new Management[0];
    private Management globalStats = null;

    // private Dictionary<int,bool> deviceSelected = new Dictionary<int,bool>();
    private ScheduledReport[] scheduledReports = new ScheduledReport[0];

    private int elementsPerFetch = 100;
    private int rulesPerPage = 0;   // todo: remove - no pagination implemented?

    private bool ShowNoDeviceSelectedWarning = false;
    //private bool ShowSaveTemplateDialog = false;
    //private bool ShowEditTemplateDialog = false;
    //private bool ShowDeleteTemplateDialog = false;
    //private bool ShowDeleteReportFileDialog = false;
    //private bool ShowEditScheduledReportDialog = false;
    //private bool ShowDeleteScheduledReportDialog = false;

    private bool autoFillRightSidebar = false;
    private int maxInitFetchRightSidebar = 10;
    private int sidebarLeftWidth = 300;
    private int sidebarRightWidth = 300;

    private ReportTemplateComponent reportTemplateControl;

    private ReportBase currentReport;

    private int reportFileId = 0;

    private int scheduledReportId = 0;
    private string scheduledReportName = "";
    private string scheduledReportRepeatInterval = "";
    private int scheduledReportRepeatCount = 0;
    private string scheduledReportTemplateName = "";
    private string scheduledReportOwner = "";
    private string scheduledReportOutputFormat = "";
    private bool scheduledReportActive = false;

    private string filterFeedbackStart = "";
    private string filterFeedbackError = "";
    private string filterFeedbackEnd = "";
    private string filterInput = "";
    private string activeFilter = "";
    private const string rulesReportDefaultFilterLine = "type=rules and time=now ";
    //private string changesReportDefaultFilterLine = "type=changes and time=\"last year\" ";
    private const string changesReportDefaultFilterLine = "type=changes and time=\"this year\" ";
    private const string statisticsReportDefaultFilterLine = "type=statistics and time=now ";
    private const string anyObjcomplianceReportDefaultFilterLine = "type=compliance and time=now and (src=any or dst=any or svc=any or src=all or dst=all or svc=all) and not(action=drop or action=reject or action=deny)";
    private const string cleanupRulecomplianceReportDefaultFilterLine = "type=compliance and time=now and (src=any and dst=any and svc=any) or (src=all and dst=all and svc=all) and (action=drop or action=reject or action=deny)";
    private const string inactiveRulescomplianceReportDefaultFilterLine = "type=compliance and time=now and active=false";
    private const string complianceReportDefaultFilterLine = anyObjcomplianceReportDefaultFilterLine;
    private string reportGenerationTimeLine = "";
    private const string rulesReport = "rules";
    private const string changesReport = "changes";
    private const string complianceReport = "compliance";
    private const string statisticsReport = "statistics";
    private CollapseState collapseSidebarAll = new CollapseState();
    private CollapseState collapseSidebarReport = new CollapseState();
    private CollapseState collapseSidebarRule = new CollapseState();
    private DynGraphqlQuery query = null;
    private bool fullDeviceActionIsSelect = true;
    private const string deviceSelectButtonTextSelect = "Select all";
    private const string deviceSelectButtonTextClear = "Clear all";
    private string deviceSelectButtonText = deviceSelectButtonTextSelect;

    protected override void OnInitialized()
    {
        Task.Run(async () =>
        {
            try
            {
                GetSettings();

                PaginationVariables paginationVariables = new PaginationVariables() { Limit = 0, Offset = 0 };

                managementsAllObjects = await Connection.SendQueryAsync<Management[]>(ObjectQueries.getAllObjectDetails, paginationVariables);

                await InvokeAsync(StateHasChanged);
            }
            catch (Exception exception)
            {
                DisplayMessageInUi(exception, "Object Fetch", "Error while fetching objects from API", true);
            }
        });

        Task.Run(async () =>
        {
            managementsOverview = await Connection.SendQueryAsync<Management[]>(DeviceQueries.getDevicesByManagements);
            await InvokeAsync(StateHasChanged);
        });

        //Task.Run(async () =>
        //{
        //    try
        //    {
        //        reportTemplates = (await Connection.SendQueryAsync<ReportTemplate[]>(ReportQueries.getReportTemplates)).ToList();
        //        await InvokeAsync(StateHasChanged);
        //    }
        //    catch (Exception exception)
        //    {
        //        DisplayMessageInUi(exception, "Report Template Fetch", "Error while fetching report templates from API", true);
        //    }
        //});
    }

    public async Task FetchContent(int contentType, Func<Management[], Task> callback, int mgmtId = 0, string ruleUid = "")
    {
        const byte all = 0, report = 1, rule = 2;

        Log.WriteDebug("Fetching Content..", "");

        Management[] managements = new Management[0];

        try
        {
            GetSettings();

            string query = "";
            Dictionary<String, object> queryVars = new Dictionary<string, object>();

            bool newObjects = true;
            int fetchCount = 0;

            switch (contentType)
            {
                case all:

                    query = ObjectQueries.getAllObjectDetails;

                    queryVars = new Dictionary<string, object>()
                    {
                        { "limit", elementsPerFetch },
                        { "offset", (int)0 },
                        { "management_id", mgmtId }
                    };

                    break;

                case report: //TODO: new functionality for fetching objects with query

                    DynGraphqlQuery gqlQuery = Compiler.Compile(activeFilter, true);
                    query = gqlQuery.FullQuery;
                    queryVars = gqlQuery.QueryVariables;

                    break;

                case rule:

                    query = RuleQueries.getRuleDetails;

                    queryVars = new Dictionary<string, object>()
                    {
                        { "limit", elementsPerFetch },
                        { "offset", (int)0 },
                        { "rule_uid", ruleUid }
                    };

                    break;
            }

            // lazy fetch all objects for right sidebar
            while (newObjects && (++fetchCount <= maxInitFetchRightSidebar || autoFillRightSidebar))
            {
                Management[] managementsCurrentFetch = await Connection.SendQueryAsync<Management[]>(query, queryVars);
                if (fetchCount == 1)
                {
                    managements = managementsCurrentFetch;
                }
                else
                {
                    newObjects = managements.Merge(managementsCurrentFetch);
                }

                queryVars["offset"] = (int)queryVars["offset"] + elementsPerFetch;
                await callback(managements);
            }

            Log.WriteDebug("Lazy Fetch", $"Fetched sidebar rule objects in {fetchCount} cycle(s) ({elementsPerFetch} at a time)");
        }
        catch (Exception exception)
        {
            //DisplayMessageInUi(exception, "Object Fetch", "Error while fetching objects from API", true);
            // TODO: Error Interface for all Components, that enables displaying a message in the ui
        }

    }

    private async Task GenerateReport()
    {
        // clear selected rules
        selectedItemsRuleReportTable.Clear();
        selectedItemsChangeReportTable.Clear();

        // collapse report templates
        reportTemplateControl.Collapse();

        // when generating report, filter line overrules LSB filter, as this can be triggered by changing 
        // the filter line and pressing enter

        try
        {
            activeFilter = filterInput;
            DeviceFilter.syncFilterLineToLSBFilter(activeFilter, managementsOverview, fullDeviceActionIsSelect);
            query = Compiler.Compile(activeFilter);
            if (!DeviceFilter.isAnyDeviceFilterSet(managementsOverview, query))  // display pop-up with warning, todo: check if device is selected in filter line
            {
                ShowNoDeviceSelectedWarning = true;
                StateHasChanged();
                return;
            }

            DateTime startTime = DateTime.Now;
            managementsReport = new Management[0]; // reset management data when switching between reports
            switch (query.ReportType)
            {
                case rulesReport:
                    currentReport = new ReportRules();
                    await currentReport.Generate(elementsPerFetch, activeFilter, Connection,
                        managementsReportIntermediate =>
                        {
                            managementsReport = managementsReportIntermediate;
                            return InvokeAsync(StateHasChanged);
                        });
                    break;

                case changesReport:
                    currentReport = new ReportChanges();
                    await currentReport.Generate(elementsPerFetch, activeFilter, Connection,
                        managementsReportIntermediate =>
                        {
                            managementsReport = managementsReportIntermediate;
                            return InvokeAsync(StateHasChanged);
                        });
                    break;

                case statisticsReport:
                    globalStats = new Management();
                    currentReport = new ReportStatistics();
                    await currentReport.Generate(0, activeFilter, Connection,
                        managementsReportIntermediate =>
                        {
                            managementsReport = managementsReportIntermediate;
                            return InvokeAsync(() =>
                            {
                                foreach (Management mgm in managementsReport)
                                {
                                    globalStats.RuleStatistics.ObjectAggregate.ObjectCount += mgm.RuleStatistics.ObjectAggregate.ObjectCount;
                                    globalStats.NetworkObjectStatistics.ObjectAggregate.ObjectCount += mgm.NetworkObjectStatistics.ObjectAggregate.ObjectCount;
                                    globalStats.ServiceObjectStatistics.ObjectAggregate.ObjectCount += mgm.ServiceObjectStatistics.ObjectAggregate.ObjectCount;
                                    globalStats.UserObjectStatistics.ObjectAggregate.ObjectCount += mgm.UserObjectStatistics.ObjectAggregate.ObjectCount;
                                }
                                StateHasChanged();
                            });
                        });
                    break;
            }
            reportGenerationTimeLine = $"generation time: {DateTime.Now - startTime}.";
            await InvokeAsync(StateHasChanged);
        }
        catch (Exception exception)
        {
            DisplayMessageInUi(exception, "Report generation", "Unclassified error.", true);
        }
    }

    private void TryFilter(ChangeEventArgs changeArgs)
    {
        DynGraphqlQuery query;

        try
        {
            filterInput = changeArgs.Value.ToString();

            query = Compiler.Compile(filterInput);

            filterFeedbackStart = filterInput;
            filterFeedbackError = "";
            filterFeedbackEnd = "";
        }
        catch (FilterException filterError)
        {
            int errorStart = filterError.ErrorPosition.Start.Value;
            int errorEnd = filterError.ErrorPosition.End.Value;

            // TODO: RESTRUCTURE (current structure only for debug purpose)
            filterFeedbackStart = $"{filterInput.Substring(0, errorStart)}";
            filterFeedbackError = filterInput.Substring(errorStart, errorEnd + 1 - errorStart);
            filterFeedbackEnd = $"{filterInput.Substring(errorEnd, filterInput.Length - 1 - errorEnd)}";
        }
        catch (Exception unexpectedError)
        {
#if DEBUG
            DisplayMessageInUi(unexpectedError, "Filter", "Unclassified error.", false);
#endif
        }
    }

    private void GetSettings()
    {
        try
        {
            string settingsValue = userConfig.GetConfigValue(GlobalConfig.kElementsPerFetch);
            if (settingsValue != "")
            {
                elementsPerFetch = Int32.Parse(settingsValue);
            }

            settingsValue = userConfig.GetConfigValue(GlobalConfig.kMaxInitialFetchesRightSidebar);
            if (settingsValue != "")
            {
                maxInitFetchRightSidebar = Int32.Parse(settingsValue);
            }

            settingsValue = userConfig.GetConfigValue(GlobalConfig.kAutoFillRightSidebar);
            autoFillRightSidebar = (settingsValue == "True" ? true : false);
        }
        catch (Exception exception)
        {
            Log.WriteError("Read Config", $"Error reading config value", exception);
        }
    }

    private bool syncTemplateFilter(ReportTemplate template, bool fullDeviceActionIsSelect)
    {
        filterInput = template.Filter;
        fullDeviceActionIsSelect = DeviceFilter.syncFilterLineToLSBFilter(filterInput, managementsOverview, fullDeviceActionIsSelect);
        StateHasChanged();
        return fullDeviceActionIsSelect;
    }
}
