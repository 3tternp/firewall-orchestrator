@using BlazorTable
@using FWO.ApiClient
@using FWO.ApiConfig
@using FWO.ApiConfig.Data
@using FWO.Api.Data
@using FWO.Ui.Services

@page "/settings/defaults"
@attribute [Authorize(Roles = "admin, auditor")]

@inject APIConnection apiConnection
@inject GlobalConfig globalConfig
@inject UserConfig userConfig

<h3>Default Settings</h3>
<hr />

<form class="form-inline">
    <label for="languageSelect" class="col-form-label col-sm-3">Default Language:</label>
    <select id="languageSelect" class="form-control-sm col-sm-2" @bind="selectedDefaultLanguage">
        @foreach (Language language in globalConfig.uiLanguages)
        {
            <option value="@(language.Name)">@(language.Name)</option>
        }
    </select>
    <AuthorizeView Roles="admin">
        <button class="btn btn-sm btn-primary" @onclick="async () => { await SaveDefaultLanguage(selectedDefaultLanguage); StateHasChanged(); }" @onclick:preventDefault>Save</button>
    </AuthorizeView>
</form>
<form class="form-inline">
    <label for="elementsPerFetch" class="col-form-label col-sm-3">Elements per fetch:</label>
    <div class="col-sm-2">
        <input id="elementsPerFetch" type="text" class="form-control form-control-sm" @bind="elementsPerFetch" />
    </div>
    <AuthorizeView Roles="admin">
        <button class="btn btn-sm btn-primary" @onclick="SaveElementsPerFetch" @onclick:preventDefault>Save</button>
    </AuthorizeView>
</form>
<form class="form-inline">
    <label for="maxInitFetch" class="col-form-label col-sm-3">Max initial fetches right sidebar:</label>
    <div class="col-sm-2">
        <input id="maxInitFetch" type="text" class="form-control form-control-sm" @bind="maxInitFetch" />
    </div>
    <AuthorizeView Roles="admin">
        <button class="btn btn-sm btn-primary" @onclick="SaveMaxInitFetch" @onclick:preventDefault>Save</button>
    </AuthorizeView>
</form>
<form class="form-inline">
    <label for="autoFillRightSidebar" class="col-form-label col-sm-3">Completely auto-fill right sidebar:</label>
    <input class="form-check-input col-sm-2" id="autoFillRightSidebar" type="checkbox" @bind="autoFillRightSidebar">
    <AuthorizeView Roles="admin">
        <button class="btn btn-sm btn-primary" @onclick="SaveAutoFillRightSidebar" @onclick:preventDefault>Save</button>
    </AuthorizeView>
</form>
<form class="form-inline">
    <label for="dataRetentionTime" class="col-form-label col-sm-3">Data retention time (in days):</label>
    <div class="col-sm-2">
        <input id="dataRetentionTime" type="text" class="form-control form-control-sm" @bind="dataRetentionTime" />
    </div>
    <AuthorizeView Roles="admin">
        <button class="btn btn-sm btn-primary" @onclick="SaveDataRetentionTime" @onclick:preventDefault>Save</button>
    </AuthorizeView>
</form>
<form class="form-inline">
    <label for="importSleepTime" class="col-form-label col-sm-3">Import sleep time (in seconds):</label>
    <div class="col-sm-2">
        <input id="importSleepTime" type="text" class="form-control form-control-sm" @bind="importSleepTime" />
    </div>
    <AuthorizeView Roles="admin">
        <button class="btn btn-sm btn-primary" @onclick="SaveImportSleepTime" @onclick:preventDefault>Save</button>
    </AuthorizeView>
</form>

@code
{
    [CascadingParameter]
    Action<Exception, string, string, bool> DisplayMessageInUi { get; set; }
    ConfigDbAccess config;
    int elementsPerFetch = 100;
    int maxInitFetch = 10;
    bool autoFillRightSidebar = false;
    string selectedDefaultLanguage = "English";
    int dataRetentionTime = 731;
    int importSleepTime = 40;

    protected override void OnInitialized()
    {
        config = new ConfigDbAccess(apiConnection, 0);
        try
        {
            selectedDefaultLanguage = config.Get(GlobalConfig.kDefaultLanguage);
            Log.WriteDebug("Default language", $"got language: {selectedDefaultLanguage}");
        }
        catch (Exception exception)
        {
            DisplayMessageInUi(exception, "Read Config", "Key not found: taking default English ", false);
        }

        try
        {
            string confValue = config.Get(GlobalConfig.kElementsPerFetch);
            elementsPerFetch = (confValue != "" ? Int32.Parse(confValue) : 100);
        }
        catch (Exception exception)
        {
            DisplayMessageInUi(exception, "Read Config", "Error reading Config for elementsPerFetch: taking value 100 ", false);
        }

        try
        {
            string confValue = config.Get(GlobalConfig.kMaxInitialFetchesRightSidebar);
            maxInitFetch = (confValue != "" ? Int32.Parse(confValue) : 10);
        }
        catch (Exception exception)
        {
            DisplayMessageInUi(exception, "Read Config", "Error reading Config for maxInitFetch: taking value 10 ", false);
        }

        try
        {
            string confValue = config.Get(GlobalConfig.kAutoFillRightSidebar);
            autoFillRightSidebar = (confValue == "True" ? true : false);
        }
        catch (Exception exception)
        {
            DisplayMessageInUi(exception, "Read Config", "Error reading Config for AutoFillRightSidebar: taking value false", false);
        }

        try
        {
            string confValue = config.Get(GlobalConfig.kDataRetentionTime);
            dataRetentionTime = (confValue != "" ? Int32.Parse(confValue) : 731);
        }
        catch (Exception exception)
        {
            DisplayMessageInUi(exception, "Read Config", "Error reading Config for dataRetentionTime: taking value 731 ", false);
        }

        try
        {
            string confValue = config.Get(GlobalConfig.kImportSleepTime);
            importSleepTime = (confValue != "" ? Int32.Parse(confValue) : 40);
        }
        catch (Exception exception)
        {
            DisplayMessageInUi(exception, "Read Config", "Error reading Config for importSleepTime: taking value 40 ", false);
        }
    }

    private async Task SaveDefaultLanguage(string language)
    {
        Log.WriteDebug("Set Default language", $"set language: {language}");
        await config.Set(GlobalConfig.kDefaultLanguage, language);
        selectedDefaultLanguage = language;
    }

    private async Task SaveElementsPerFetch()
    {
        await config.Set(GlobalConfig.kElementsPerFetch, elementsPerFetch.ToString());
        await userConfig.ReloadDefaults(apiConnection);
    }

    private async Task SaveMaxInitFetch()
    {
        await config.Set(GlobalConfig.kMaxInitialFetchesRightSidebar, maxInitFetch.ToString());
        await userConfig.ReloadDefaults(apiConnection);
    }

    private async Task SaveAutoFillRightSidebar()
    {
        await config.Set(GlobalConfig.kAutoFillRightSidebar, autoFillRightSidebar.ToString());
        await userConfig.ReloadDefaults(apiConnection);
    }

    private async Task SaveDataRetentionTime()
    {
        await config.Set(GlobalConfig.kDataRetentionTime, dataRetentionTime.ToString());
    }

    private async Task SaveImportSleepTime()
    {
        await config.Set(GlobalConfig.kImportSleepTime, importSleepTime.ToString());
    }
}
