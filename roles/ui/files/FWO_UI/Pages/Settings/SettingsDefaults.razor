@using FWO.ApiClient
@using FWO.ApiConfig
@using FWO.ApiConfig.Data

@page "/settings/defaults"
@attribute [Authorize(Roles = "admin, auditor")]

@inject APIConnection apiConnection
@inject GlobalConfig globalConfig
@inject UserConfig userConfig

<h3>@(userConfig.GetText("standards"))</h3>
<hr />

<form class="form-inline">
    <label for="languageSelect" class="col-form-label col-sm-3">@(userConfig.GetText("default_language")):</label>
    <div class="col-sm-2">
        <select id="languageSelect" class="form-control form-control-sm" @bind="selectedDefaultLanguage">
            @foreach (Language language in globalConfig.uiLanguages)
            {
                <option value="@(language.Name)">@(userConfig.GetText(language.Name))</option>
            }
        </select>
    </div>
</form>
<form class="form-inline">
    <label for="elementsPerFetch" class="col-form-label col-sm-3">@(userConfig.GetText("elements_per_fetch")):</label>
    <div class="col-sm-2">
        <input id="elementsPerFetch" type="text" class="form-control form-control-sm" @bind="elementsPerFetch" />
    </div>
</form>
<form class="form-inline">
    <label for="maxInitFetch" class="col-form-label col-sm-3">@(userConfig.GetText("max_init_fetch_rsb")):</label>
    <div class="col-sm-2">
        <input id="maxInitFetch" type="text" class="form-control form-control-sm" @bind="maxInitFetch" />
    </div>
</form>
<form class="form-inline">
    <label for="autoFillRightSidebar" class="col-form-label col-sm-3">@(userConfig.GetText("auto_fill_rsb")):</label>
    <div class="col-sm-2">
        <input id="autoFillRightSidebar" type="checkbox" class="form-control form-control-sm" @bind="autoFillRightSidebar">
    </div>
</form>
<form class="form-inline">
    <label for="dataRetentionTime" class="col-form-label col-sm-3">@(userConfig.GetText("data_retention_time")):</label>
    <div class="col-sm-2">
        <input id="dataRetentionTime" type="text" class="form-control form-control-sm" @bind="dataRetentionTime" />
    </div>
</form>
<form class="form-inline">
    <label for="importSleepTime" class="col-form-label col-sm-3">@(userConfig.GetText("import_sleep_time")):</label>
    <div class="col-sm-2">
        <input id="importSleepTime" type="text" class="form-control form-control-sm" @bind="importSleepTime" />
    </div>
</form>
<AuthorizeView Roles="admin">
    <button class="btn btn-sm btn-primary" @onclick="Save" @onclick:preventDefault>@(userConfig.GetText("save"))</button>
</AuthorizeView>

@code
{
    [CascadingParameter]
    Action<Exception, string, string, bool> DisplayMessageInUi { get; set; }
    ConfigDbAccess config;
    int elementsPerFetch = 100;
    int maxInitFetch = 10;
    bool autoFillRightSidebar = false;
    string selectedDefaultLanguage = GlobalConfig.kEnglish;
    int dataRetentionTime = 731;
    int importSleepTime = 40;

    protected override void OnInitialized()
    {
        config = new ConfigDbAccess(apiConnection, 0);
        try
        {
            selectedDefaultLanguage = config.Get(GlobalConfig.kDefaultLanguage);
            Log.WriteDebug("Default language", $"got language: {selectedDefaultLanguage}");
        }
        catch (Exception exception)
        {
            DisplayMessageInUi(exception, userConfig.GetText("read_config"), userConfig.GetText("E5301"), false);
        }

        try
        {
            string confValue = config.Get(GlobalConfig.kElementsPerFetch);
            elementsPerFetch = (confValue != "" ? Int32.Parse(confValue) : 100);
        }
        catch (Exception exception)
        {
            DisplayMessageInUi(exception, userConfig.GetText("read_config"), userConfig.GetText("E5302"), false);
        }

        try
        {
            string confValue = config.Get(GlobalConfig.kMaxInitialFetchesRightSidebar);
            maxInitFetch = (confValue != "" ? Int32.Parse(confValue) : 10);
        }
        catch (Exception exception)
        {
            DisplayMessageInUi(exception, userConfig.GetText("read_config"), userConfig.GetText("E5303"), false);
        }

        try
        {
            string confValue = config.Get(GlobalConfig.kAutoFillRightSidebar);
            autoFillRightSidebar = (confValue == "True" ? true : false);
        }
        catch (Exception exception)
        {
            DisplayMessageInUi(exception, userConfig.GetText("read_config"), userConfig.GetText("E5304"), false);
        }

        try
        {
            string confValue = config.Get(GlobalConfig.kDataRetentionTime);
            dataRetentionTime = (confValue != "" ? Int32.Parse(confValue) : 731);
        }
        catch (Exception exception)
        {
            DisplayMessageInUi(exception, userConfig.GetText("read_config"), userConfig.GetText("E5305"), false);
        }

        try
        {
            string confValue = config.Get(GlobalConfig.kImportSleepTime);
            importSleepTime = (confValue != "" ? Int32.Parse(confValue) : 40);
        }
        catch (Exception exception)
        {
            DisplayMessageInUi(exception, userConfig.GetText("read_config"), userConfig.GetText("E5306"), false);
        }
    }

    private async Task Save()
    {
        await config.Set(GlobalConfig.kDefaultLanguage, selectedDefaultLanguage);
        await config.Set(GlobalConfig.kElementsPerFetch, elementsPerFetch.ToString());
        await config.Set(GlobalConfig.kMaxInitialFetchesRightSidebar, maxInitFetch.ToString());
        await config.Set(GlobalConfig.kAutoFillRightSidebar, autoFillRightSidebar.ToString());
        await config.Set(GlobalConfig.kDataRetentionTime, dataRetentionTime.ToString());
        await config.Set(GlobalConfig.kImportSleepTime, importSleepTime.ToString());

        await userConfig.ReloadDefaults(apiConnection);
        DisplayMessageInUi(null, userConfig.GetText("change_default"), userConfig.GetText("U5301"), false);
    }
}
