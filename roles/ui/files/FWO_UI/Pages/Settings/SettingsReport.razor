@using BlazorTable
@using FWO.ApiClient
@using FWO.ApiConfig
@using FWO.ApiConfig.Data;
@using FWO.Api.Data
@using FWO.Ui.Services

@page "/settings/report"
@attribute [Authorize(Roles = "admin, reporter, reporter-viewall, workflow-user, workflow-admin")]

@inject APIConnection apiConnection
@inject UserConfig userConfig

<h3>Report Settings</h3>
<hr />

<form class="form-inline">
    <label for="elementsPerFetch" class="col-form-label mr-2">Elements per fetch:</label>
    <div class="col-sm-2">
        <input id="elementsPerFetch" type="number" class="form-control form-control-sm" @bind="elementsPerFetch" />
    </div>
    <button class="btn btn-sm btn-primary" @onclick="SaveElementsPerFetch">Save</button>
</form>

@code
{
    [CascadingParameter]
    Action<Exception, string, string, bool> DisplayMessageInUi { get; set; }

    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }

    ConfigDbAccess config;
    int elementsPerFetch = 100;

    protected override async Task OnInitializedAsync()
    {
        AuthenticationState authState = await authenticationStateTask;
        UiUsersDbAccess uiUser = new UiUsersDbAccess(authState, apiConnection);
        config = new ConfigDbAccess(apiConnection, uiUser.UiUser.DbId);
        try
        {
            string settingsValue = config.Get(GlobalConfig.kElementsPerFetch);
            if (settingsValue != "")
            {
                elementsPerFetch = Int32.Parse(settingsValue);
            }
            else
            {
                // get default value
                ConfigDbAccess defaultConfig = new ConfigDbAccess(apiConnection, 0);
                settingsValue = defaultConfig.Get(GlobalConfig.kElementsPerFetch);
                if (settingsValue != "")
                {
                    elementsPerFetch = Int32.Parse(settingsValue);
                }
            }
        }
        catch (Exception exception)
        {
            DisplayMessageInUi(exception, "Read Report Settings", "Key not found or could not convert value to int: taking value 100", true);
        }
    }

    private async Task SaveElementsPerFetch()
    {
        string elementsPerFetchString = elementsPerFetch.ToString();
        try
        {
            await userConfig.ChangeConfigValue(GlobalConfig.kElementsPerFetch, elementsPerFetchString, apiConnection);
        }
        catch (System.Exception exception)
        {
            DisplayMessageInUi(exception, "Report Config", "Error while saving report settings", true);
        }
    }
}
