@using BlazorTable
@using FWO.Ui.Data.API
@using FWO.ApiClient

@page "/settings/roles"

@inject APIConnection apiConnection

<h3 class="m-2">Roles</h3>
<hr />

<div class="m-2">
    <Table class="table table-bordered table-responsive" TableItem="Role" Items="roles" PageSize="0" ColumnReorder="true">
        <Column TableItem="Role" Title="Name" Field="@(x => x.Name)" Sortable="true" Filterable="true" />
        <Column TableItem="Role" Title="Description" Field="@(x => x.Description)" Sortable="true" Filterable="true" />
        <Column TableItem="Role" Title="Users" Field="@(x => x.Users)" Sortable="false" Filterable="false">
            <Template>
                @(context.UserList())
            </Template>
        </Column>
        <Column TableItem="Role" Title="Action" Field="(x => x.Name)" Sortable="false" Filterable="false">
            <Template>
                <div class="btn-group">
                    <button class="btn btn-sm btn-success" @onclick="() => Add(context)">Add user</button>
                    <button class="btn btn-sm btn-danger" @onclick="() => Delete(context)">Delete User</button>
                </div>
            </Template>
        </Column>
    </Table>
</div>

<PopUp Title="@($"Add user to role {actRole.Name}")" Show="@AddMode" Large="true" OnClose="() => AddMode = false">
    <Body>
        @if (AddMode)
        {
            <form>
                <form class="form-inline">
                    <label for="roleUser" class="col-sm-2 col-form-label col-form-label-sm">User:</label>
                    <div class="col-sm-8">
                        <select id="roleUser" class="form-control form-control-sm" @bind="selectedUser.Dn">
                            @foreach (UiUser user in uiUsers)
                            {
                                <option selected="@user.Dn">@(user.Dn)</option>
                            }
                        </select>
                    </div>
                    <button class="btn btn-sm btn-success" @onclick="() => AddUser(selectedUser)">Add</button>
                </form>
                <form class="form-inline">
                    <label for="newUser" class="col-sm-2 col-form-label col-form-label-sm">New (Dn):</label>
                    <div class="col-sm-8">
                        <input id="newUser" type="text" class="form-control form-control-sm" @bind="newUser.Dn" />
                    </div>
                    <button class="btn btn-sm btn-success" @onclick="() => AddUser(newUser)">Add</button>
                </form>

                @if (errorMessage != "")
                {
                    <label class="m-2">@errorMessage</label>
                }
            </form>
        }
    </Body>
    <Footer>
        <div class="btn-group">
            <button class="btn btn-sm btn-secondary" @onclick="Cancel">Cancel</button>
        </div>
    </Footer>
</PopUp>

<PopUp Title="@($"Delete user from role {actRole.Name}")" Show="@DeleteMode" OnClose="() => DeleteMode = false">
    <Body>
        @if (DeleteMode)
        {
            <form>
                <div class="form-group row">
                    <label for="roleUserdel" class="col-sm-3 col-form-label col-form-label-sm">User:</label>
                    <div class="col-sm-8">
                        <select id="roleUserdel" class="form-control form-control-sm" @bind="selectedUser.Dn">
                            @foreach (UiUser user in actRole.Users)
                            {
                                <option selected="@user.Dn">@(user.Dn)</option>
                            }
                        </select>
                    </div>
                </div>
            </form>

            @if (errorMessage != "")
            {
                <label class="m-2">@errorMessage</label>
            }
        }
    </Body>
    <Footer>
        <div class="btn-group">
            <button class="btn btn-sm btn-danger" @onclick="() => DeleteUser(selectedUser)">Delete</button>
            <button class="btn btn-sm btn-secondary" @onclick="Cancel">Cancel</button>
        </div>
    </Footer>
</PopUp>

@code 
{
    private List<Role> roles = new List<Role>();
    private List<UiUser> uiUsers = new List<UiUser>();
    
    private UiUser newUser = new UiUser();
    private UiUser selectedUser = new UiUser();

    private Role actRole = new Role();

    private bool AddMode = false;
    private bool DeleteMode = false;

    private string errorMessage = "";

    protected override async Task OnInitializedAsync()
    {
        // get roles from LDAP
        TestInit(roles);

        uiUsers = (await Task.Run(() => apiConnection.SendQueryAsync<UiUser[]>(FWO.ApiClient.Queries.AuthQueries.getUsers))).ToList();
        uiUsers = uiUsers.FindAll(x => x.DbId != 0);
    }

    private void Add(Role role)
    {
        AddMode = true;
        actRole = role;
    }

    private void Delete(Role role)
    {
        DeleteMode = true;
        actRole = role;
    }

    private void AddUser(UiUser user)
    {
        // add user in LDAP

        if (user.Name == null)
        {
            user.Name = extractUserNameFromDn(user.Dn);
        }
        actRole.Users.Add(user);
        roles[roles.FindIndex(x => x.Name == actRole.Name)] = actRole;
        AddMode = false;
    }

    private void DeleteUser(UiUser user)
    {
        // delete user in LDAP

        var itemToRemove = actRole.Users.SingleOrDefault(x => x.Dn == user.Dn);
        if (itemToRemove != null)
        {
            actRole.Users.Remove(itemToRemove);
            roles[roles.FindIndex(x => x.Name == actRole.Name)] = actRole;
            DeleteMode = false;
        }
        else 
        {
            errorMessage = "user to delete not found";
        }
    }

    private void Cancel()
    {
        AddMode = false;
        DeleteMode = false;
        errorMessage = "";
    }

    private string extractUserNameFromDn(string Dn)
    {
        string Name = "";
        // assuming that Dn starts with "uid="
        int kPrefixLength = 4;
        int Index = Dn.IndexOf(",");
        if(Index > kPrefixLength)
        {
            Name = Dn.Substring(kPrefixLength, Index - kPrefixLength);
        }
        return Name;
    }

    private void TestInit(List<Role> roles)
    {
        UiUser user1 = new UiUser(){ Name="Tim", Dn="uid=Tim,ou=soso"};
        UiUser user2 = new UiUser(){ Name="Nils", Dn="uid=Nils,ou=soso"};
        UiUser user3 = new UiUser(){ Name="Achim", Dn="uid=Ach,ou=soso"};
        List<UiUser> users1 = new List<UiUser>();
        List<UiUser> users2 = new List<UiUser>();
        users1.Add(user1);
        users1.Add(user2);
        users2.Add(user3);
        Role role1 = new Role() { Name="Experte", Description="uiuiui", Users=users1 };
        Role role2 = new Role() { Name="Spezialist", Description="noch schlimmer", Users=users2 };
        roles.Add(role1);
        roles.Add(role2);
    }
}
