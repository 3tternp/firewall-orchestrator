@using BlazorTable
@using System.Net
@using FWO.Api.Data
@using FWO.ApiClient
@using FWO.Middleware.Client
@using FWO.ApiConfig

@page "/settings/users"

@inject APIConnection apiConnection
@inject MiddlewareClient middlewareClient
@inject UserConfig userConfig

<h3 class="m-2">UI Users</h3>
<hr />

<div class="form-group row">
    <button class="btn btn-success m-2" @onclick="Add">Add new user</button>
    <button class="btn btn-info m-2" @onclick="Refresh">Refresh</button>
    @if (showSampleRemoveButton)
    {
        <button class="btn btn-danger m-2" @onclick="RequestRemoveSampleData">Remove Sample Data</button>
    }
</div>

<div class="m-2">
    <Table class="table table-bordered table-responsive" TableItem="UiUser" Items="uiUsers" PageSize="0" ColumnReorder="true">
        <Column TableItem="UiUser" Title="Action" Field="(x => x.DbId)" Sortable="false" Filterable="false">
            <Template>
                <div class="btn-group">
                    <button class="btn btn-sm btn-success" @onclick="() => Clone(context)">Clone</button>
                    <button class="btn btn-sm btn-warning" @onclick="() => Edit(context)">Edit</button>
                    <button class="btn btn-sm btn-danger" @onclick="() => RequestDelete(context)">Delete</button>
                    <button class="btn btn-sm btn-info" @onclick="() => CleanUpUser(context)">Clean Up</button>
               </div>
            </Template>
        </Column>
        <Column TableItem="UiUser" Title="Name" Field="@(x => x.Name)" Sortable="true" Filterable="true" />
        <Column TableItem="UiUser" Title="Dn" Field="@(x => x.Dn)" Sortable="true" Filterable="true" />
        <Column TableItem="UiUser" Title="Tenant" Field="@(x => x.Tenant.Name)" Sortable="true" Filterable="true" />
        <Column TableItem="UiUser" Title="Email" Field="@(x => x.Email)" Sortable="true" Filterable="true" />
        <Column TableItem="UiUser" Title="Language" Field="@(x => x.Language)" Sortable="true" Filterable="true" />
        <Column TableItem="UiUser" Title="Last Login" Field="@(x => x.LastLogin)" Sortable="true" Filterable="true" />
        <Column TableItem="UiUser" Title="Last Password Change" Field="@(x => x.LastPasswordChange)" Sortable="true" Filterable="true" />
        <Column TableItem="UiUser" Title="Password Must Be Changed" Field="@(x => x.PasswordMustBeChanged)" Sortable="true" Filterable="true" />
    </Table>
</div>

<PopUp Title="Edit User" Show="@EditMode" Large="true" OnClose="() => EditMode = false">
    <Body>
        @if (EditMode)
        {
            <form>
                <div class="form-group row">
                    <label for="userName" class="col-sm-3 col-form-label col-form-label-sm">Name:</label>
                    <label class="m-2">@actUser.Name</label>
                </div>
                <div class="form-group row">
                    <label for="userTenant" class="col-sm-3 col-form-label col-form-label-sm">Tenant:</label>
                    <label class="m-2">@actUser.Tenant.Name</label>
                </div>
                <div class="form-group row">
                    <label for="userDn" class="col-sm-3 col-form-label col-form-label-sm">Dn:</label>
                    @if (AddMode)
                    {
                        <div class="col-sm-8">
                            <input id="userDn" type="text" class="form-control form-control-sm" @bind="actUser.Dn" />
                        </div>
                    }
                    else
                    {
                        <label class="m-2">@actUser.Dn</label>
                    }
                </div>
                @if (AddMode)
                {
                    <div class="form-group row">
                        <label for="userPassword" class="col-sm-3 col-form-label col-form-label-sm">Password:</label>
                        <div class="col-sm-8">
                            <input id="userPassword" type ="password" class="form-control form-control-sm" @bind="actUser.Password" />
                        </div>
                    </div>
                }
                <div class="form-group row">
                    <label for="userEmail" class="col-sm-3 col-form-label col-form-label-sm">Email:</label>
                    <div class="col-sm-8">
                        <input id="userEmail" type="text" class="form-control form-control-sm" @bind="actUser.Email" />
                    </div>
                </div>
            </form>
        }
    </Body>
    <Footer>
        <div class="btn-group">
            <button class="btn btn-sm btn-primary" @onclick="() => Save()">Save</button>
            <button class="btn btn-sm btn-secondary" @onclick="Cancel">Cancel</button>
        </div>
    </Footer>
</PopUp>

<PopUp Title="Delete" Show="@DeleteMode" OnClose="() => DeleteMode = false">
    <Body>
        @if (DeleteMode)
        {
            <p>@(deleteMessage)</p>
        }
    </Body>
    <Footer>
        <div class="btn-group">
            @if (DeleteAllowed)
            {
                <button class="btn btn-sm btn-danger" @onclick="() => Delete()">Delete</button>
            }
            <button class="btn btn-sm btn-secondary" @onclick="Cancel">Cancel</button>
        </div>
    </Footer>
</PopUp>

<PopUp Title="Remove Sample Data" Show="@SampleRemoveMode" OnClose="() => SampleRemoveMode = false">
    <Body>
        @if (SampleRemoveMode)
        {
            <p>@(sampleRemoveMessage)</p>
        }
    </Body>
    <Footer>
        <div class="btn-group">
            @if(SampleRemoveAllowed)
            {
                <button class="btn btn-sm btn-danger" @onclick="() => RemoveSampleData()">Delete</button>
            }
            <button class="btn btn-sm btn-secondary" @onclick="Cancel">Cancel</button>
        </div>
    </Footer>
</PopUp>

@code 
{
    [CascadingParameter]
    Action<Exception,string,string,bool> DisplayMessageInUi { get; set; }

    private List<UiLdapConnection> connectedLdaps = new List<UiLdapConnection>();
    private List<UiUser> ldapUsers = new List<UiUser>();
    private List<UiUser> uiUsers = new List<UiUser>();
    private List<UiUser> sampleUsers = new List<UiUser>();
    private List<Tenant> tenants = new List<Tenant>();

    private bool EditMode = false;
    private bool DeleteMode = false;
    private bool DeleteAllowed = false;
    private bool SampleRemoveMode = false;
    private bool SampleRemoveAllowed = false;
    private bool AddMode = false;
    private bool showSampleRemoveButton = false;

    private UiUser newUser;
    private UiUser actUser;

    private string deleteMessage = "";
    private string sampleRemoveMessage = "";

    protected override async Task OnInitializedAsync()
    {
        await FetchAll();
    }

    private async Task FetchAll()
    {
        try
        {
            connectedLdaps = (await apiConnection.SendQueryAsync<UiLdapConnection[]>(FWO.ApiClient.Queries.AuthQueries.getLdapConnections)).ToList();
        }
        catch (System.Exception exception)
        {
            DisplayMessageInUi(exception, "UI User", "Error while fetching LDAP connections from API", false);
        }

        // Get all users from internal ldap
        try
        {
            await GetUsersFromInternalLdap();
        }
        catch (System.Exception exception)
        {
            DisplayMessageInUi(exception, "UI User", "Error while fetching users from internal LDAP", false);
        }

        // Get users from uiusers table
        try
        {
            uiUsers = (await apiConnection.SendQueryAsync<UiUser[]>(FWO.ApiClient.Queries.AuthQueries.getUsers)).ToList();
            uiUsers = uiUsers.FindAll(x => x.DbId != 0);
        }
        catch (System.Exception exception)
        {
            DisplayMessageInUi(exception, "UI User", "Error while fetching users from API", false);
        }

        // Get the tenants
        try
        {
            tenants = (await apiConnection.SendQueryAsync<Tenant[]>(FWO.ApiClient.Queries.AuthQueries.getTenants)).ToList();
        }
        catch (System.Exception exception)
        {
            DisplayMessageInUi(exception, "UI User", "Error while fetching tenants from API", false);
        }

        // Synchronize both
        await Synchronize();

        CollectSampleUsers();
    }

    private async Task Synchronize()
    {
        foreach (var ldapUser in ldapUsers)
        {
            UiUser relatedUiUser = uiUsers.Find(x => x.Dn == ldapUser.Dn);
            if (relatedUiUser != null)
            {
                // Update related user
                if (relatedUiUser.Email != ldapUser.Email)
                {
                    relatedUiUser.Email = ldapUser.Email;
                    try
                    {
                        await updateUserInDb(relatedUiUser);
                    }
                    catch (System.Exception exception)
                    {
                        DisplayMessageInUi(exception, "UI User", "Error while updating user data via API", false);
                    }
                }
            }
            else
            {
                // Add new user to UiUsers table
                ldapUser.setNamesFromDn();
                try
                {
                    await addUserToDb(ldapUser);
                }
                catch (System.Exception exception)
                {
                    DisplayMessageInUi(exception, "UI User", "Error while adding user data via API", false);
                }
                uiUsers.Add(ldapUser);
            }
        }
    }

    private void CollectSampleUsers()
    {
        sampleUsers = new List<UiUser>();
        foreach (var user in uiUsers)
        {
            if (user.Name.EndsWith("_demo"))
            {
                sampleUsers.Add(user);
            }
        }
        showSampleRemoveButton = (sampleUsers.Count > 0);
    }

    private async Task GetUsersFromInternalLdap()
    {
        UiLdapConnection internalLdap = connectedLdaps.Find(x => (new DistName(x.UserSearchPath)).IsInternal());
        if (internalLdap == null)
        {
            DisplayMessageInUi(null, "UI User", "No internal Ldap found.", false);
            return;
        }

        // get users from Ldap
        MiddlewareServerResponse usersMiddlewareResponse = await middlewareClient.GetUsers(internalLdap.Address, userConfig.User.Jwt);
        if (usersMiddlewareResponse.Status == HttpStatusCode.BadRequest)
        {
            DisplayMessageInUi(null, "UI User", "No users found.", false);
        }
        else
        {
            foreach(var user in usersMiddlewareResponse.GetResult<List<KeyValuePair<string, string>>>("allUsers"))
            {
                UiUser newUser = new UiUser(){ Dn = user.Key , Name = (new DistName(user.Key)).UserName, Email = user.Value };
                ldapUsers.Add(newUser);
            }
        }
    }

    private async Task updateUserInDb(UiUser user)
    {
        try          
        {
            var Variables = new
            {
                id = user.DbId,
                email = user.Email
            };
            await apiConnection.SendQueryAsync<ReturnId>(FWO.ApiClient.Queries.AuthQueries.updateUserEmail, Variables);
        }
        catch (Exception exception)
        {
            DisplayMessageInUi(exception, "Update User Error", $"User {user.Name} could not be updated in database.", false);
        }
    }

    private async Task addUserToDb(UiUser user)
    {
        try          
        {
            user.Tenant.Id = tenants.Find(x => x.Name == user.Tenant.Name).Id;

            var Variables = new
            {
                uuid = user.Dn, 
                uiuser_username = user.Name,
                email = user.Email,
                tenant = user.Tenant.Id
            };
            user.DbId = (await apiConnection.SendQueryAsync<NewReturning>(FWO.ApiClient.Queries.AuthQueries.addUser, Variables)).ReturnIds[0].NewId;
        }
        catch (Exception exception)
        {
            DisplayMessageInUi(exception, "Add User Error", $"User {user.Name} could not be added.", false);
        }
    }

    private void Add()
    {
        AddMode = true;
        newUser = new UiUser();
        Edit(newUser);
    }

    private void Clone(UiUser user)
    {
        AddMode = true;
        newUser = new UiUser(user);
        newUser.Name = null;
        newUser.Tenant.Name = null;
        Edit(newUser);
    }

    private void Edit(UiUser user)
    {
        actUser = new UiUser(user);
        EditMode = true;
    }

    private async Task Save()
    {
        try
        {
            if (AddMode)
            {
                // Todo: Further value checks?
                actUser.setNamesFromDn();
                if (actUser.Dn == null || actUser.Dn == "" || actUser.Password == null || actUser.Password == "")
                {
                    DisplayMessageInUi(null, "Add User Error", "Dn and Password have to be filled", false);
                }
                else if ( !tenants.Exists(x => x.Name == actUser.Tenant.Name) )
                {
                    DisplayMessageInUi(null, "Add User Error", "Unknown tenant", false);
                }
                else
                {
                    // insert new user to ldap
                    MiddlewareServerResponse apiAuthResponse = await middlewareClient.AddUser(actUser.Dn, actUser.Password, actUser.Email, userConfig.User.Jwt);
                    if (apiAuthResponse.Status == HttpStatusCode.BadRequest || apiAuthResponse.GetResult<bool>("userAdded") == false)
                    {
                        DisplayMessageInUi(null, "Add User Error", "No user could be added", false);
                    }
                    else
                    {
                        await addUserToDb(actUser);
                        uiUsers.Add(actUser);
                        AddMode = false;
                        EditMode = false;
                    }                
                }
            }
            else
            {
                // Update existing user in ldap --> currently only email
                MiddlewareServerResponse apiAuthResponse = await middlewareClient.UpdateUser(actUser.Dn, actUser.Email, userConfig.User.Jwt);
                if (apiAuthResponse.Status == HttpStatusCode.BadRequest || apiAuthResponse.GetResult<bool>("userUpdated") == false)
                {
                    DisplayMessageInUi(null, "Add User Error", "User could not be updated", false);
                }
                else
                {
                    await updateUserInDb(actUser);
                    uiUsers[uiUsers.FindIndex(x => x.DbId == actUser.DbId)].Email = actUser.Email;
                    EditMode = false;
                }
            }
            // update actUser
        }
        catch (Exception exception)
        {
            DisplayMessageInUi(exception, "Save User in Ldap", $"Error: {exception.Message}", true);
        }
    }

    private void RequestDelete(UiUser user)
    {
        actUser = user;
        // Todo: Checks if delete possible, e.g. if assigned to role admin?

        if (actUser.Dn == userConfig.User.Dn)
        {
            deleteMessage = $"Self deletion of user {actUser.Name} not allowed.";
            DeleteAllowed = false;
        }
        else
        {
            deleteMessage = $"Are you sure you want to delete user {actUser.Name}?";
            DeleteAllowed = true;
        }
        DeleteMode = true;
    }

    private async Task Delete()
    {
        try
        {
            // delete user from Ldap
            MiddlewareServerResponse apiAuthResponse = await middlewareClient.DeleteUser(actUser.Dn, userConfig.User.Jwt);
            if (apiAuthResponse.Status == HttpStatusCode.BadRequest || apiAuthResponse.GetResult<bool>("userDeleted") == false)
            {
                DisplayMessageInUi(null, "Delete LDAP user", "User could not be deleted", false);
            }
            else
            {
                await CleanUpUser(actUser);
                uiUsers.Remove(actUser);           
                DeleteMode = false;
            }
        }
        catch (Exception exception)
        {
            DisplayMessageInUi(exception, "Delete LDAP user", $"User could not be deleted: {exception}", true);
        }
    }

    private async Task CleanUpUser(UiUser user)
    {
        try
        {
            var Variables = new { id = user.DbId };
            int delId = (await apiConnection.SendQueryAsync<ReturnId>(FWO.ApiClient.Queries.AuthQueries.deleteUser, Variables)).DeletedId;
            if (delId == user.DbId)
            {
                uiUsers.Remove(user);
            }
        }
        catch (Exception exception)
        {
            DisplayMessageInUi(exception, "Delete UIUser", $"Exception occurred: {exception.Message}", false);
        }
    }

    private void RequestRemoveSampleData()
    {
        if (sampleUsers.Exists(user => user.DbId == userConfig.User.DbId))
        {
            sampleRemoveMessage = $"You are logged in as sample user. Delete not possible.";
            SampleRemoveAllowed = false;
        }
        else
        {
            sampleRemoveMessage = $"Deletes all sample users (ending with '_demo') in local LDAP.";
            SampleRemoveAllowed = true;
        }
        SampleRemoveMode = true;
    }

    private async Task RemoveSampleData()
    {
        showSampleRemoveButton = false;
        foreach (var user in sampleUsers)
        {
            try
            {
                MiddlewareServerResponse apiAuthResponse = await middlewareClient.RemoveUserFromAllRoles(user.Dn, userConfig.User.Jwt);
                if (apiAuthResponse.Status == HttpStatusCode.BadRequest || apiAuthResponse.GetResult<bool>("userRemoved") == false)
                {
                    DisplayMessageInUi(null, "Remove user from all roles", "User could not be removed", false);
                    showSampleRemoveButton = true;
                }
                else
                {
                    actUser = user;
                    await Delete();
                }
            }
            catch (System.Exception exception)
            {
                DisplayMessageInUi(exception, "Delete sample user", "Unexpected error occured", false);
            }
        }
        SampleRemoveMode = false;
    }

    private void Cancel()
    {
        AddMode = false;
        EditMode = false;
        DeleteMode = false;
        SampleRemoveMode = false;
    }

    private async Task Refresh()
    {
        await FetchAll();
    }
}
