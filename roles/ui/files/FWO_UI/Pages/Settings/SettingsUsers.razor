@using BlazorTable
@using System.Net
@using FWO.Api.Data
@using FWO.ApiClient
@using FWO.Middleware.Client
@using FWO.ApiConfig
@using FWO.Ui.Services

@page "/settings/users"
@attribute [Authorize(Roles = "admin, auditor")]

@inject APIConnection apiConnection
@inject MiddlewareClient middlewareClient
@inject UserConfig userConfig

<h3 class="m-2">@(userConfig.GetText("users"))</h3>
@(userConfig.GetText("U5213"))
<hr />

<div class="form-group row">
    <button class="btn btn-success m-2" @onclick="Add">@(userConfig.GetText("add_new_user"))</button>
    <button class="btn btn-info m-2" @onclick="Refresh">@(userConfig.GetText("refresh"))</button>
    @if (showSampleRemoveButton)
    {
        <button class="btn btn-danger m-2" @onclick="RequestRemoveSampleData">@(userConfig.GetText("remove_sample_data"))</button>
    }
</div>

<div class="m-2">
    <Table class="table table-bordered table-responsive" TableItem="UiUser" Items="uiUsers" PageSize="0" ColumnReorder="true">
        <Column TableItem="UiUser" Title="@(userConfig.GetText("action"))" Field="(x => x.DbId)" Sortable="false" Filterable="false">
            <Template>
                <div class="btn-group">
                    <button class="btn btn-sm btn-success" @onclick="() => Clone(context)">@(userConfig.GetText("clone"))</button>
                    @if(context.isInternal())
                    {
                        <button class="btn btn-sm btn-warning" @onclick="() => Edit(context)">@(userConfig.GetText("edit"))</button>
                    }
                    <button class="btn btn-sm btn-danger" @onclick="() => RequestDelete(context)">@(userConfig.GetText("delete"))</button>
                    @if(context.isInternal())
                    {
                        <button class="btn btn-sm btn-info" @onclick="() => RequestResetPassword(context)">@(userConfig.GetText("reset_password"))</button>
                    }
                </div>
            </Template>
        </Column>
        <Column TableItem="UiUser" Title="@(userConfig.GetText("name"))" Field="@(x => x.Name)" Sortable="true" Filterable="true" />
        <Column TableItem="UiUser" Title="@(userConfig.GetText("tenant"))" Field="@(x => x.Tenant.Name)" Sortable="true" Filterable="true" />
        <Column TableItem="UiUser" Title="@(userConfig.GetText("email"))" Field="@(x => x.Email)" Sortable="true" Filterable="true" />
        <Column TableItem="UiUser" Title="@(userConfig.GetText("language"))" Field="@(x => x.Language)" Sortable="true" Filterable="true" >
            <Template>
                @((context.Language != null && context.Language != "") ? userConfig.GetText(context.Language) : "" )
            </Template>
        </Column>
        <Column TableItem="UiUser" Title="@(userConfig.GetText("last_login"))" Field="@(x => x.LastLogin)" Sortable="true" Filterable="true" />
        <Column TableItem="UiUser" Title="@(userConfig.GetText("last_pw_change"))" Field="@(x => x.LastPasswordChange)" Sortable="true" Filterable="true" />
        <Column TableItem="UiUser" Title="@(userConfig.GetText("pwd_chg_req"))" Field="@(x => x.PasswordMustBeChanged)" Sortable="true" Filterable="true" >
            <Template>
                @(GlobalConfig.ShowBool(context.PasswordMustBeChanged))
            </Template>
        </Column>
    </Table>
</div>

<PopUp Title="@(userConfig.GetText("edit_user"))" Show="@EditMode" Large="true" OnClose="() => EditMode = false">
    <Body>
        @if (EditMode)
        {
            <form>
                <div class="form-group row">
                    <label for="userName" class="col-sm-2 col-form-label col-form-label-sm">@(userConfig.GetText("name")):</label>
                    <label class="m-2">@actUser.Name</label>
                </div>
                <div class="form-group row">
                    <label for="userTenant" class="col-sm-2 col-form-label col-form-label-sm">@(userConfig.GetText("tenant")):</label>
                    <label class="m-2">@actUser.Tenant.Name</label>
                </div>
                <div class="form-group row">
                    <label for="userDn" class="col-sm-2 col-form-label col-form-label-sm">Dn*:</label>
                    @if (AddMode)
                    {
                        <div class="col-sm-8">
                            <input id="userDn" type="text" class="form-control form-control-sm" @bind="actUser.Dn" />
                        </div>
                    }
                    else
                    {
                        <label class="m-2">@actUser.Dn</label>
                    }
                </div>
                @if (AddMode)
                {
                    <div class="form-group row">
                        <label for="userPassword" class="col-sm-2 col-form-label col-form-label-sm">@(userConfig.GetText("password"))*:</label>
                        <div class="col-sm-8">
                            <input id="userPassword" type="password" class="form-control form-control-sm" @bind="actUser.Password" />
                        </div>
                    </div>
                }
                <div class="form-group row">
                    <label for="userEmail" class="col-sm-2 col-form-label col-form-label-sm">@(userConfig.GetText("email")):</label>
                    <div class="col-sm-8">
                        <input id="userEmail" type="text" class="form-control form-control-sm" @bind="actUser.Email" />
                    </div>
                </div>
            </form>
        }
    </Body>
    <Footer>
        <div class="btn-group">
            <AuthorizeView Roles="admin">
                <Authorized>
                    <button class="btn btn-sm btn-primary" @onclick="() => Save()">@(userConfig.GetText("save"))</button>
                </Authorized>
                <NotAuthorized>
                    <button class="btn btn-sm btn-primary" disabled>@(userConfig.GetText("save"))</button>
                </NotAuthorized> 
            </AuthorizeView>
            <button class="btn btn-sm btn-secondary" @onclick="Cancel">@(userConfig.GetText("cancel"))</button>
        </div>
    </Footer>
</PopUp>

<PopUp Title="@(userConfig.GetText("delete_user"))" Show="@DeleteMode" OnClose="() => DeleteMode = false">
    <Body>
        @if (DeleteMode)
        {
            <p>@(deleteMessage)</p>
        }
    </Body>
    <Footer>
        <div class="btn-group">
            <AuthorizeView Roles="admin">
                <Authorized>
                    <button class="btn btn-sm btn-danger" @onclick="() => Delete()">@(userConfig.GetText("delete"))</button>
                </Authorized>
                <NotAuthorized>
                    <button class="btn btn-sm btn-danger" disabled>@(userConfig.GetText("delete"))</button>
                </NotAuthorized> 
            </AuthorizeView>
            <button class="btn btn-sm btn-secondary" @onclick="Cancel">@(userConfig.GetText("cancel"))</button>
        </div>
    </Footer>
</PopUp>

<PopUp Title="@(userConfig.GetText("reset_password"))" Show="@ResetPasswordMode" Large="true" OnClose="() => ResetPasswordMode = false">
    <Body>
        @if (ResetPasswordMode)
        {
            <form>
                <div class="form-group row">
                    <label for="userName" class="col-sm-2 col-form-label col-form-label-sm">@(userConfig.GetText("name")):</label>
                    <label class="m-2">@actUser.Name</label>
                </div>
                <div class="form-group row">
                    <label for="userPassword" class="col-sm-2 col-form-label col-form-label-sm">@(userConfig.GetText("password"))*:</label>
                    <div class="col-sm-8">
                        <input id="userPassword" type="password" class="form-control form-control-sm" @bind="actUser.Password" />
                    </div>
                </div>
            </form>
        }
    </Body>
    <Footer>
        <div class="btn-group">
            <AuthorizeView Roles="admin">
                <Authorized>
                    <button class="btn btn-sm btn-primary" @onclick="() => ResetPassword()">@(userConfig.GetText("set"))</button>
                </Authorized>
                <NotAuthorized>
                    <button class="btn btn-sm btn-primary" disabled>@(userConfig.GetText("set"))</button>
                </NotAuthorized> 
            </AuthorizeView>
            <button class="btn btn-sm btn-secondary" @onclick="Cancel">@(userConfig.GetText("cancel"))</button>
        </div>
    </Footer>
</PopUp>

<PopUp Title="@(userConfig.GetText("remove_sample_data"))" Show="@SampleRemoveMode" OnClose="() => SampleRemoveMode = false">
    <Body>
        @if (SampleRemoveMode)
        {
            <p>@(sampleRemoveMessage)</p>
        }
    </Body>
    <Footer>
        <div class="btn-group">
            @if (SampleRemoveAllowed)
            {
                <AuthorizeView Roles="admin">
                    <Authorized>
                        <button class="btn btn-sm btn-danger" @onclick="() => RemoveSampleData()">@(userConfig.GetText("delete"))</button>
                    </Authorized>
                    <NotAuthorized>
                        <button class="btn btn-sm btn-danger" disabled>@(userConfig.GetText("delete"))</button>
                    </NotAuthorized> 
                </AuthorizeView>
            }
            <button class="btn btn-sm btn-secondary" @onclick="Cancel">@(userConfig.GetText("cancel"))</button>
        </div>
    </Footer>
</PopUp>

@code
{
    [CascadingParameter]
    Action<Exception, string, string, bool> DisplayMessageInUi { get; set; }

    private List<UiLdapConnection> connectedLdaps = new List<UiLdapConnection>();
    private List<UiUser> ldapUsers = new List<UiUser>();
    private List<UiUser> uiUsers = new List<UiUser>();
    private List<UiUser> sampleUsers = new List<UiUser>();
    private List<Tenant> tenants = new List<Tenant>();

    private bool EditMode = false;
    private bool DeleteMode = false;
    private bool SampleRemoveMode = false;
    private bool SampleRemoveAllowed = false;
    private bool AddMode = false;
    private bool showSampleRemoveButton = false;
    private bool ResetPasswordMode = false;

    private UiUser newUser;
    private UiUser actUser;

    private string deleteMessage = "";
    private string sampleRemoveMessage = "";

    protected override async Task OnInitializedAsync()
    {
        await FetchAll();
    }

    private async Task FetchAll()
    {
        try
        {
            connectedLdaps = (await apiConnection.SendQueryAsync<UiLdapConnection[]>(FWO.ApiClient.Queries.AuthQueries.getLdapConnections)).ToList();
        }
        catch (System.Exception exception)
        {
            DisplayMessageInUi(exception, userConfig.GetText("fetch_ldap_conn"), null, true);
        }

        // Get all users from internal ldap
        try
        {
            await GetUsersFromInternalLdap();
        }
        catch (System.Exception exception)
        {
            DisplayMessageInUi(exception, userConfig.GetText("fetch_users_ldap"), null, true);
        }

        // Get users from uiusers table
        try
        {
            uiUsers = (await apiConnection.SendQueryAsync<UiUser[]>(FWO.ApiClient.Queries.AuthQueries.getUsers)).ToList();
            uiUsers = uiUsers.FindAll(x => x.DbId != 0);
        }
        catch (System.Exception exception)
        {
            DisplayMessageInUi(exception, userConfig.GetText("fetch_users_local"), null, true);
        }

        // Get the tenants
        try
        {
            tenants = (await apiConnection.SendQueryAsync<Tenant[]>(FWO.ApiClient.Queries.AuthQueries.getTenants)).ToList();
        }
        catch (System.Exception exception)
        {
            DisplayMessageInUi(exception, userConfig.GetText("fetch_tenants"), null, true);
        }

        // Synchronize both
        await Synchronize();

        CollectSampleUsers();
    }

    private async Task Synchronize()
    {
        foreach (var ldapUser in ldapUsers)
        {
            UiUser relatedUiUser = uiUsers.Find(x => x.Dn == ldapUser.Dn);
            if (relatedUiUser != null)
            {
                // Update related user
                if (relatedUiUser.Email != ldapUser.Email)
                {
                    relatedUiUser.Email = ldapUser.Email;
                    await updateUserInDb(relatedUiUser);
                }
            }
            else
            {
                // Add new user to UiUsers table
                ldapUser.setNamesFromDn();
                ldapUser.PasswordMustBeChanged = false;
                await addUserToDb(ldapUser);
                uiUsers.Add(ldapUser);
            }
        }
    }

    private void CollectSampleUsers()
    {
        sampleUsers = new List<UiUser>();
        foreach (var user in uiUsers)
        {
            if (user.Name.EndsWith("_demo"))
            {
                sampleUsers.Add(user);
            }
        }
        showSampleRemoveButton = (sampleUsers.Count > 0);
    }

    private async Task GetUsersFromInternalLdap()
    {
        ldapUsers.Clear();
        UiLdapConnection internalLdap = connectedLdaps.Find(x => (new DistName(x.UserSearchPath)).IsInternal());
        if (internalLdap == null)
        {
            DisplayMessageInUi(null, userConfig.GetText("get_user_from_ldap"), userConfig.GetText("E5207"), true);
            return;
        }

        // get users from Ldap
        MiddlewareServerResponse usersMiddlewareResponse = await middlewareClient.GetUsers(internalLdap.Address, "", userConfig.User.Jwt);
        if (usersMiddlewareResponse.Status == HttpStatusCode.BadRequest)
        {
            DisplayMessageInUi(null, userConfig.GetText("get_user_from_ldap"), userConfig.GetText("E5208"), true);
        }
        else
        {
            foreach (var user in usersMiddlewareResponse.GetResult<List<KeyValuePair<string, string>>>("allUsers"))
            {
                UiUser newUser = new UiUser() { Dn = user.Key, Name = (new DistName(user.Key)).UserName, Email = user.Value, PasswordMustBeChanged = true };
                ldapUsers.Add(newUser);
            }
        }
    }

    private async Task updateUserInDb(UiUser user)
    {
        try
        {
            var Variables = new
            {
                id = user.DbId,
                email = user.Email
            };
            await apiConnection.SendQueryAsync<ReturnId>(FWO.ApiClient.Queries.AuthQueries.updateUserEmail, Variables);
        }
        catch (Exception exception)
        {
            DisplayMessageInUi(exception, userConfig.GetText("update_user_local"), null, false);
        }
    }

    private async Task addUserToDb(UiUser user)
    {
        try
        {
            user.Tenant.Id = tenants.Find(x => x.Name == user.Tenant.Name).Id;

            var Variables = new
            {
                uuid = user.Dn,
                uiuser_username = user.Name,
                email = user.Email,
                tenant = user.Tenant.Id,
                passwordMustBeChanged = user.PasswordMustBeChanged
            };
            user.DbId = (await apiConnection.SendQueryAsync<NewReturning>(FWO.ApiClient.Queries.AuthQueries.addUser, Variables)).ReturnIds[0].NewId;
        }
        catch (Exception exception)
        {
            DisplayMessageInUi(exception, userConfig.GetText("add_user_local"), null, false);
        }
    }

    private void Add()
    {
        AddMode = true;
        newUser = new UiUser();
        Edit(newUser);
    }

    private void Clone(UiUser user)
    {
        AddMode = true;
        newUser = new UiUser(user);
        newUser.Name = null;
        newUser.Tenant.Name = null;
        Edit(newUser);
    }

    private void Edit(UiUser user)
    {
        actUser = new UiUser(user);
        EditMode = true;
    }

    private async Task Save()
    {
        try
        {
            if (AddMode)
            {
                // Todo: Further value checks?
                string errorMsg;
                actUser.setNamesFromDn();
                if (actUser.Dn == null || actUser.Dn == "" || actUser.Password == null || actUser.Password == "")
                {
                    DisplayMessageInUi(null, userConfig.GetText("add_user"), userConfig.GetText("E5211"), true);
                }
                else if (!((new PasswordPolicy()).checkPolicy(actUser.Password, userConfig, out errorMsg)))
                {
                    DisplayMessageInUi(null, userConfig.GetText("add_user"), errorMsg, true);
                }
                else if (!tenants.Exists(x => x.Name == actUser.Tenant.Name))
                {
                    DisplayMessageInUi(null, userConfig.GetText("add_user"), userConfig.GetText("E5212"), true);
                }
                else
                {
                    // insert new user to ldap
                    MiddlewareServerResponse apiAuthResponse = await middlewareClient.AddUser(actUser.Dn, actUser.Password, actUser.Email, userConfig.User.Jwt);
                    if (apiAuthResponse.Status == HttpStatusCode.BadRequest || apiAuthResponse.GetResult<bool>("userAdded") == false)
                    {
                        DisplayMessageInUi(null, userConfig.GetText("add_user_ldap"), userConfig.GetText("E5213"), true);
                    }
                    else
                    {
                        actUser.PasswordMustBeChanged = true;
                        await addUserToDb(actUser);
                        uiUsers.Add(actUser);
                        AddMode = false;
                        EditMode = false;
                    }
                }
            }
            else
            {
                // Update existing user in ldap --> currently only email
                MiddlewareServerResponse apiAuthResponse = await middlewareClient.UpdateUser(actUser.Dn, actUser.Email, userConfig.User.Jwt);
                if (apiAuthResponse.Status == HttpStatusCode.BadRequest || apiAuthResponse.GetResult<bool>("userUpdated") == false)
                {
                    DisplayMessageInUi(null, userConfig.GetText("update_user_ldap"), userConfig.GetText("E5214"), true);
                }
                else
                {
                    await updateUserInDb(actUser);
                    uiUsers[uiUsers.FindIndex(x => x.DbId == actUser.DbId)].Email = actUser.Email;
                    EditMode = false;
                }
            }
        }
        catch (Exception exception)
        {
            DisplayMessageInUi(exception, userConfig.GetText("save_user"), null, true);
        }
    }

    private void RequestDelete(UiUser user)
    {
        actUser = user;
        if (actUser.Dn == userConfig.User.Dn)
        {
            DisplayMessageInUi(null, userConfig.GetText("delete_user_ldap"), userConfig.GetText("E5215"), true);
        }
        else
        {
            deleteMessage = userConfig.GetText("U5201") + actUser.Name + "?";
            if (!actUser.isInternal())
            {
                deleteMessage += userConfig.GetText("U5202");
            }
            DeleteMode = true;
        }
    }

    private async Task Delete()
    {
        try
        {
            // delete user from Ldap
            MiddlewareServerResponse apiAuthResponse = await middlewareClient.DeleteUser(actUser.Dn, userConfig.User.Jwt);
            if (apiAuthResponse.Status == HttpStatusCode.BadRequest)
            {
                DisplayMessageInUi(null, userConfig.GetText("delete_user_ldap"), userConfig.GetText("E5216"), true);
            }
            else
            {
                await CleanUpUser(actUser);
                DeleteMode = false;
            }
        }
        catch (Exception exception)
        {
            DisplayMessageInUi(exception, userConfig.GetText("delete_user_ldap"), null, true);
        }
    }

    private async Task CleanUpUser(UiUser user)
    {
        try
        {
            var Variables = new { id = user.DbId };
            int delId = (await apiConnection.SendQueryAsync<ReturnId>(FWO.ApiClient.Queries.AuthQueries.deleteUser, Variables)).DeletedId;
            if (delId == user.DbId)
            {
                uiUsers.Remove(user);
            }
        }
        catch (Exception exception)
        {
            DisplayMessageInUi(exception, userConfig.GetText("delete_user_local"), null, false);
        }
    }

    private void RequestResetPassword(UiUser user)
    {
        if(!(new DistName(user.Dn)).IsInternal())
        {
            DisplayMessageInUi(null, userConfig.GetText("reset_password"), userConfig.GetText("E5217"), true);
        }
        else
        {
            actUser = user;
            ResetPasswordMode = true;
        }
    }

    private async Task ResetPassword()
    {
        try
        {
            string errorMsg;
            if (actUser.Password == null || actUser.Password == "")
            {
                DisplayMessageInUi(null, userConfig.GetText("reset_password"), userConfig.GetText("E5218"), true);
            }
            else if (!((new PasswordPolicy()).checkPolicy(actUser.Password, userConfig, out errorMsg)))
            {
                DisplayMessageInUi(null, userConfig.GetText("reset_password"), errorMsg, true);
            }
            else
            {
                MiddlewareServerResponse apiAuthResponse = await middlewareClient.SetPassword(actUser.Dn, actUser.Password, userConfig.User.Jwt);
                if (apiAuthResponse.Status == HttpStatusCode.BadRequest)
                {
                    DisplayMessageInUi(null, userConfig.GetText("reset_password"), userConfig.GetText("E5219"), true);
                }
                else
                {
                    errorMsg = apiAuthResponse.GetResult<string>("errorMsg");
                    if(errorMsg != "")
                    {
                        DisplayMessageInUi(null, userConfig.GetText("reset_password"), errorMsg, true);
                    }
                }
                ResetPasswordMode = false;
            }
        }
        catch (Exception exception)
        {
            DisplayMessageInUi(exception, userConfig.GetText("reset_password"), null, true);
        }
    }

    private void RequestRemoveSampleData()
    {
        if (sampleUsers.Exists(user => user.DbId == userConfig.User.DbId))
        {
            sampleRemoveMessage = userConfig.GetText("E5220");
            SampleRemoveAllowed = false;
        }
        else
        {
            sampleRemoveMessage = userConfig.GetText("U5203");
            SampleRemoveAllowed = true;
        }
        SampleRemoveMode = true;
    }

    private async Task RemoveSampleData()
    {
        showSampleRemoveButton = false;
        foreach (var user in sampleUsers)
        {
            try
            {
                MiddlewareServerResponse apiAuthResponse = await middlewareClient.RemoveUserFromAllEntries(user.Dn, userConfig.User.Jwt);
                if (apiAuthResponse.Status == HttpStatusCode.BadRequest || apiAuthResponse.GetResult<bool>("userRemoved") == false)
                {
                    DisplayMessageInUi(null, userConfig.GetText("remove_sample_data"), userConfig.GetText("E5221"), true);
                    showSampleRemoveButton = true;
                }
                else
                {
                    actUser = user;
                    await Delete();
                }
            }
            catch (System.Exception exception)
            {
                DisplayMessageInUi(exception, userConfig.GetText("remove_sample_data"), null, false);
            }
        }
        SampleRemoveMode = false;
    }

    private void Cancel()
    {
        AddMode = false;
        EditMode = false;
        DeleteMode = false;
        SampleRemoveMode = false;
        ResetPasswordMode = false;
    }

    private async Task Refresh()
    {
        await FetchAll();
    }
}
