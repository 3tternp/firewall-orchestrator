@using BlazorTable
@using FWO.Ui.Data.API
@using FWO.ApiClient

@page "/settings/users"

@inject APIConnection apiConnection

<h3 class="m-2">UI Users</h3>
<hr />

<div class="m-2">
    <Table class="table table-bordered table-responsive" TableItem="UiUser" Items="uiUsers" PageSize="0" ColumnReorder="true">
        <Column TableItem="UiUser" Title="Name" Field="@(x => x.Name)" Sortable="true" Filterable="true" />
        <Column TableItem="UiUser" Title="Dn" Field="@(x => x.Dn)" Sortable="true" Filterable="true" />
        <Column TableItem="UiUser" Title="Language" Field="@(x => x.Language)" Sortable="true" Filterable="true" />
        <Column TableItem="UiUser" Title="Last Login" Field="@(x => x.LastLogin)" Sortable="true" Filterable="true" />
        <Column TableItem="UiUser" Title="Action" Field="(x => x.DbId)" Sortable="false" Filterable="false">
            <Template>
                <div class="btn-group">
                    <button class="btn btn-sm btn-danger" @onclick="() => DeleteUser(context)">Delete</button>
                </div>
            </Template>
        </Column>
    </Table>
</div>


@code 
{
    private List<UiUser> uiUsers = new List<UiUser>();

    protected override async Task OnInitializedAsync()
    {
        uiUsers = (await Task.Run(() => apiConnection.SendQueryAsync<UiUser[]>(FWO.ApiClient.Queries.AuthQueries.getUsers))).ToList();
        uiUsers = uiUsers.FindAll(x => x.DbId != 0);
    }

    private async Task DeleteUser(UiUser user)
    {
        try
        {
            var Variables = new { id = user.DbId };
            int delId = (await Task.Run(() => apiConnection.SendQueryAsync<ReturnId>(FWO.ApiClient.Queries.AuthQueries.deleteUser, Variables))).DeletedId;
            if (delId == user.DbId)
            {
                uiUsers.Remove(user);
            }
        }
        catch (Exception exception)
        {
            Log.WriteDebug("Delete UIUser", $"Exception occurred: {exception}");
        }
    }
}
