@using FWO.ApiClient
@using FWO.ApiConfig

@page "/settings/passwordpolicy"
@attribute [Authorize(Roles = "admin, auditor")]

@inject APIConnection apiConnection
@inject GlobalConfig globalConfig
@inject UserConfig userConfig

<h3>@(userConfig.GetText("password_policy"))</h3>
<hr />

<form class="form-inline">
    <label for="minLength" class="col-form-label col-sm-4">@(userConfig.GetText("min_length")):</label>
    <div class="col-sm-1">
        <input id="minLength" type="text" class="form-control form-control-sm" @bind="minLength" />
    </div>
</form>
<form class="form-inline">
    <label for="upperCaseRequired" class="col-form-label col-sm-4">@(userConfig.GetText("upper_case_req")):</label>
    <div class="col-sm-2">
        <input id="upperCaseRequired" type="checkbox" class="form-control form-control-sm" @bind="upperCaseRequired" />
    </div>
</form>
<form class="form-inline">
    <label for="lowerCaseRequired" class="col-form-label col-sm-4">@(userConfig.GetText("lower_case_req")):</label>
    <div class="col-sm-2">
        <input id="lowerCaseRequired" type="checkbox" class="form-control form-control-sm" @bind="lowerCaseRequired" />
    </div>
</form>
<form class="form-inline">
    <label for="numberRequired" class="col-form-label col-sm-4">@(userConfig.GetText("number_req")):</label>
    <div class="col-sm-2">
        <input id="numberRequired" type="checkbox" class="form-control form-control-sm" @bind="numberRequired" />
    </div>
</form>
<form class="form-inline">
    <label for="specialCharactersRequired" class="col-form-label col-sm-4">@(userConfig.GetText("spec_char_req")):</label>
    <div class="col-sm-2">
        <input id="specialCharactersRequired" type="checkbox" class="form-control form-control-sm" @bind="specialCharactersRequired" />
    </div>
</form>
<hr />
<AuthorizeView Roles="admin">
    <button class="btn btn-sm btn-primary" @onclick="Save" @onclick:preventDefault>@(userConfig.GetText("save"))</button>
</AuthorizeView>

@code
{
    [CascadingParameter]
    Action<Exception, string, string, bool> DisplayMessageInUi { get; set; }
    ConfigDbAccess config;
    int minLength = 10;
    bool upperCaseRequired = false;
    bool lowerCaseRequired = false;
    bool numberRequired = false;
    bool specialCharactersRequired = false;

    protected override void OnInitialized()
    {
        config = new ConfigDbAccess(apiConnection, 0);

        try
        {
            string confValue = config.Get(GlobalConfig.kPwMinLength);
            minLength = (confValue != "" ? Int32.Parse(confValue) : 10);
        }
        catch (Exception exception)
        {
            DisplayMessageInUi(exception, userConfig.GetText("read_config"), userConfig.GetText("E5311"), false);
        }

        try
        {
            string confValue = config.Get(GlobalConfig.kPwUpperCaseRequired);
            upperCaseRequired = (confValue == "True" ? true : false);
        }
        catch (Exception exception)
        {
            DisplayMessageInUi(exception, userConfig.GetText("read_config"), userConfig.GetText("E5312"), false);
        }

        try
        {
            string confValue = config.Get(GlobalConfig.kPwLowerCaseRequired);
            lowerCaseRequired = (confValue == "True" ? true : false);
        }
        catch (Exception exception)
        {
            DisplayMessageInUi(exception, userConfig.GetText("read_config"), userConfig.GetText("E5313"), false);
        }

        try
        {
            string confValue = config.Get(GlobalConfig.kPwNumberRequired);
            numberRequired = (confValue == "True" ? true : false);
        }
        catch (Exception exception)
        {
            DisplayMessageInUi(exception, userConfig.GetText("read_config"), userConfig.GetText("E5314"), false);
        }

        try
        {
            string confValue = config.Get(GlobalConfig.kPwSpecialCharactersRequired);
            specialCharactersRequired = (confValue == "True" ? true : false);
        }
        catch (Exception exception)
        {
            DisplayMessageInUi(exception, userConfig.GetText("read_config"), userConfig.GetText("E5315"), false);
        }
    }


    private async Task Save()
    {
        await config.Set(GlobalConfig.kPwMinLength, minLength.ToString());
        await config.Set(GlobalConfig.kPwUpperCaseRequired, upperCaseRequired.ToString());
        await config.Set(GlobalConfig.kPwLowerCaseRequired, lowerCaseRequired.ToString());
        await config.Set(GlobalConfig.kPwNumberRequired, numberRequired.ToString());
        await config.Set(GlobalConfig.kPwSpecialCharactersRequired, specialCharactersRequired.ToString());
        await userConfig.ReloadDefaults(apiConnection);
        DisplayMessageInUi(null, userConfig.GetText("change_policy"), userConfig.GetText("U5302"), false);
    }
}
