@using FWO.Ui.Data
@using FWO.ApiConfig

@inherits LayoutComponentBase
@layout MainLayout

@inject UserConfigCollection userConfig

<Sidebar PositionLeft="true" Collapsible="false" Resizeable="false" SidebarCssClass="navbar-dark bg-dark" InitialWidth="sidebarWidth" @bind-Width="sidebarWidth">
    <div class="m-2">
        <ul class="navbar-nav flex-column">
            @foreach (NavItem navItem in navItems)
            {
                <AuthorizeView Roles="admin">
                    <Authorized>
                        <li class="nav-item px-2">
                            <NavLink class="nav-link" href="#">
                                Only admins can see this
                            </NavLink>
                        </li>
                    </Authorized>
                </AuthorizeView>

                <li class="nav-item px-2">
                    <NavLink class="nav-link" href="@navItem.Link">
                        @navItem.Name() <span class="@navItem.Symbol"></span>
                    </NavLink>
                </li>
            }
        </ul>
    </div>
</Sidebar>

<div style="margin-left: @($"{sidebarWidth + 20}px");">
    @Body
</div>

@code
{
    private int sidebarWidth = 200;

    private NavItem[] navItems;

    protected override void OnInitialized()
    {
        navItems = new NavItem[]
        {
            new NavItem(() => "Managements", "settings/managements", "oi oi-inbox"),
            new NavItem(() => "Authorization", "settings/authorization", "oi oi-lock-locked"),
            new NavItem(() => "Personal", "settings/personal", "oi oi-person")
        };

        userConfig.OnChange += Update;
    }

    private async void Update(object sender, EventArgs args) => await InvokeAsync(StateHasChanged);
}

