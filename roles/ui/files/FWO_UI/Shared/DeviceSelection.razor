@using FWO.ApiConfig
@using FWO.Api.Data;
@using FWO.Report.Filter

@inject UserConfig userConfig

<div class="p-3">
    <h5 class="text-left">@(userConfig.GetText("select_device"))</h5>
    <button class="btn btn-sm btn-secondary"
            @onclick="@((Func<Task>)(async () => {
                DeviceFilter.applyFullDeviceSelection(Managements, SelectAll);
                FilterInput = DeviceFilter.syncLSBFilterToFilterLine(Managements, FilterInput);
                SelectAll = !SelectAll;
                toggleDeviceSelectionButtonText = SelectAll ? selectAll : clearAll;
                await FilterInputChanged.InvokeAsync(FilterInput);
                await SelectAllChanged.InvokeAsync(SelectAll);
            }))">
        @toggleDeviceSelectionButtonText
    </button>
    <br><br>

    @foreach (Management management in Managements)
    {
        @if (management != null)
        {
            <Collapse Title="@(management.Name)" StartToggled="false" Style="@("primary")">
                @foreach (Device device in management.Devices)
                {
                    <div class="form-check">
                        <input class="form-check-input" type="checkbox" id="@device.Id"
                               @bind="device.selected"
                               @oninput="async () => {
                                    device.selected = !device.selected;
                                    if (DeviceFilter.areAllDevicesSelected(Managements))
                                    {
                                        toggleDeviceSelectionButtonText = clearAll;
                                        SelectAll = false;
                                    }
                                    if (!DeviceFilter.isAnyLSBDeviceFilterSet(Managements))
                                    {
                                        toggleDeviceSelectionButtonText = selectAll;
                                        SelectAll = true;
                                    }
                                    FilterInput = DeviceFilter.syncLSBFilterToFilterLine(Managements, FilterInput);
                                    await FilterInputChanged.InvokeAsync(FilterInput);
                                    await SelectAllChanged.InvokeAsync(SelectAll);
                                }" />
                        <label class="form-check-label" for="@device.Id">
                            @device.Name
                        </label>
                    </div>
                }
            </Collapse>
        }
    }
</div>

@code
{
    [Parameter]
    public string FilterInput { get; set; }

    [Parameter]
    public EventCallback<string> FilterInputChanged { get; set; }

    [Parameter]
    public Management[] Managements { get; set; }

//    [CascadingParameter(Name = "SelectAll")]
    [Parameter]
    public bool SelectAll { get; set; } // state of the device select/clear all button
//    [CascadingParameter(Name = "SelectAllChanged")]
    [Parameter]
    public EventCallback<bool> SelectAllChanged { get; set; }

    public string toggleDeviceSelectionButtonText;
    private string selectAll;
    private string clearAll;

    protected override void OnInitialized()
    {
        selectAll = userConfig.GetText("select_all");
        clearAll = userConfig.GetText("clear_all");
        toggleDeviceSelectionButtonText = selectAll;
    }
}
