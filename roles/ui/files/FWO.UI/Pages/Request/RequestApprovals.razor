@using BlazorTable
@using FWO.Api.Data
@using FWO.Api.Client
@using FWO.Config.Api
@using FWO.Ui.Services

@page "/request/approvals"
@attribute [Authorize(Roles = "admin, approver, auditor, fw-admin")]

@inject ApiConnection apiConnection
@inject UserConfig userConfig

<h3>@(userConfig.GetText("approvals"))</h3>
<hr />
<DisplayOverview Phase="WorkflowPhases.approval" Requests="requests" ShowTicketDetails="ShowTicketDetails" 
    StateMatrix ="stateMatrix" States="states"></DisplayOverview>

<DisplayTicket Phase="WorkflowPhases.approval" DbAcc="dbAcc" StateMatrix ="stateMatrix" States="states" 
    ResetParent="Reset" StartPhase="StartApproval" ContinuePhase="InitApproveTask"
    @bind-Display="ShowTicketMode" @bind-EditMode="EditMode" 
    @bind-Ticket="actTicket" @bind-Requests="requests"></DisplayTicket>

<PopUp Title="@(userConfig.GetText("save_task"))" Show="@ApproveTaskMode" OnClose="() => ApproveTaskMode = false">
    <Body>
        @if (ApproveTaskMode)
        {
            <div class="form-group row">
                <label for="promoteTask" class="col-sm-3 col-form-label col-form-label-sm">@(userConfig.GetText("promote_to")):</label>
                <div class="col-sm-8">
                    <select id="promoteTask" class="form-control form-control-sm" @bind="actApproval.StateId">
                        @foreach (int state in actPossibleStates)
                        {
                            <option value="@state">@(states.Name[state])</option>
                        }
                    </select>
                </div>
            </div>
            <div class="form-group row">
                <label for="approvalComment" class="col-sm-3 col-form-label col-form-label-sm">@(userConfig.GetText("comment")):</label>
                <div class="col-sm-8">
                    <input id="approvalComment" type="text" class="form-control form-control-sm" @bind="actApproval.Comment" />
                </div>
            </div>
        }
    </Body>
    <Footer>
        <div class="btn-group">
            <AuthorizeView Roles="admin, approver, fw-admin">
                <Authorized>
                    <button class="btn btn-sm btn-primary" @onclick:preventDefault @onclick="ApproveTask">@(userConfig.GetText("save"))</button>
                </Authorized>
                <NotAuthorized>
                    <button class="btn btn-sm btn-primary" disabled>@(userConfig.GetText("save"))</button>
                </NotAuthorized> 
            </AuthorizeView>
            <button class="btn btn-sm btn-secondary" @onclick="CancelApproveTask">@(userConfig.GetText("cancel"))</button>
        </div>
    </Footer>
</PopUp>

@code
{
    [CascadingParameter]
    Action<Exception?, string, string, bool>? DisplayMessageInUi { get; set; }
    
    private RequestDbAccess dbAcc;
    private List<RequestTicket> requests = new List<RequestTicket>();

    private bool ShowTicketMode = false;
    private bool ApproveTaskMode = false;
    private bool EditMode = false;

    private RequestTicket actTicket = new RequestTicket();
    private RequestTask actTask = new RequestTask();
    private RequestElement actReqElement = new RequestElement();
    private RequestApproval actApproval = new RequestApproval();

    private RequestStateDict states = new RequestStateDict();
    private List<int> actPossibleStates = new List<int>();
    private StateMatrix stateMatrix = new StateMatrix();


    protected override async Task OnInitializedAsync()
    {
        try
        {
            await stateMatrix.Init(WorkflowPhases.approval, apiConnection);
            await states.Init(apiConnection);
            dbAcc = new RequestDbAccess(DisplayMessageInUi, userConfig, apiConnection){};
            requests = await dbAcc.FetchTickets(stateMatrix);
        }
        catch (Exception exception)
        {
            DisplayMessageInUi!(exception, userConfig.GetText("fetch_requests"), "", true);
        }
    }

    private async Task Reset()
    {
        ShowTicketMode = false;
        ApproveTaskMode = false;
        EditMode = false;
        requests = await dbAcc.FetchTickets(stateMatrix);
    }

    private async Task ShowTicketDetails(RequestTicket ticket)
    {
        actTicket = ticket;
        ShowTicketMode = true;
        StateHasChanged();
    }

    public async Task StartApproval(RequestTask task)
    {
        task.CurrentHandler = userConfig.User;
        actPossibleStates = stateMatrix.getAllowedTransitions(task.StateId);
        if(actPossibleStates.Count == 1 && actPossibleStates[0] >= stateMatrix.LowestStartedState && actPossibleStates[0] < stateMatrix.LowestEndState)
        {
            task.StateId = actPossibleStates[0];
        }
        await dbAcc.UpdateReqTaskStateInDb(task);
        await dbAcc.UpdateTicketStateFromTasks(actTicket, requests, stateMatrix);
        await InitApproveTask(task);
    }
   
    private async Task InitApproveTask(RequestTask task)
    {
        actTask = task;
        actApproval = actTask.Approvals[0];  // todo: select own approvals
        actPossibleStates = stateMatrix.getAllowedTransitions(actTask.StateId);
        if (actPossibleStates.Count > 0)
        {
            actApproval.StateId = actPossibleStates[0];
        }
        ApproveTaskMode = true;
        StateHasChanged();
    }

    private async Task ApproveTask()
    {
        try
        {           
            ApproveTaskMode = false;
            if(actApproval.StateId >= stateMatrix.LowestEndState)
            {
                actApproval.ApprovalDate = DateTime.Now;
                actApproval.ApproverDn = userConfig.User.Dn;
            }
            if (actApproval.Sanitize())
            {
                DisplayMessageInUi!(null, userConfig.GetText("save_approval"), userConfig.GetText("U0001"), true);
            }
            await dbAcc.UpdateApprovalInDb(actApproval);
            await dbAcc.UpdateTaskStateFromApprovals(actTask, stateMatrix);
            await dbAcc.UpdateTicketStateFromTasks(actTicket, requests, stateMatrix);
        }
        catch (Exception exception)
        {
            DisplayMessageInUi!(exception, userConfig.GetText("save_task"), "", true);
        }
    }

    private void CancelApproveTask()
    {
        ApproveTaskMode = false;
    }
}
