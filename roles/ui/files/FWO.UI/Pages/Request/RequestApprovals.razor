@using FWO.Api.Data
@using FWO.Api.Client
@using FWO.Config.Api
@using FWO.Ui.Services

@page "/request/approvals"
@attribute [Authorize(Roles = "admin, approver, auditor, fw-admin")]

@inject ApiConnection apiConnection
@inject UserConfig userConfig

<h3>@(userConfig.GetText("approvals"))</h3>
<hr />
<DisplayOverview Phase="WorkflowPhases.approval" Requests="requests" ShowTicketDetails="ShowTicketDetails" 
    StateMatrix ="stateMatrix" States="states"></DisplayOverview>

<DisplayTicket Phase="WorkflowPhases.approval" DbAcc="dbAcc" StateMatrix ="stateMatrix" States="states" 
    ResetParent="Reset" StartPhase="StartApproval" ContinuePhase="InitApproveTask"
    @bind-Display="ShowTicketMode" 
    @bind-Ticket="actTicket" @bind-Requests="requests"></DisplayTicket>

<PromoteObject @bind-Promote="ApproveTaskMode" WithComment="true" Save="ApproveTask" StatefulObject="actApproval" StateMatrix="stateMatrix" States="states"></PromoteObject>


@code
{
    [CascadingParameter]
    Action<Exception?, string, string, bool>? DisplayMessageInUi { get; set; }
    
    private RequestDbAccess dbAcc;
    private List<RequestTicket> requests = new List<RequestTicket>();

    private bool ShowTicketMode = false;
    private bool ApproveTaskMode = false;
    private bool EditMode = false;

    private RequestTicket actTicket = new RequestTicket();
    private RequestTask actTask = new RequestTask();
    private RequestElement actReqElement = new RequestElement();
    private RequestApproval actApproval = new RequestApproval();

    private RequestStateDict states = new RequestStateDict();
    private List<int> actPossibleStates = new List<int>();
    private StateMatrix stateMatrix = new StateMatrix();


    protected override async Task OnInitializedAsync()
    {
        try
        {
            await stateMatrix.Init(WorkflowPhases.approval, apiConnection);
            await states.Init(apiConnection);
            dbAcc = new RequestDbAccess(DisplayMessageInUi, userConfig, apiConnection){};
            requests = await dbAcc.FetchTickets(stateMatrix);
        }
        catch (Exception exception)
        {
            DisplayMessageInUi!(exception, userConfig.GetText("fetch_requests"), "", true);
        }
    }

    private async Task Reset()
    {
        ShowTicketMode = false;
        ApproveTaskMode = false;
        EditMode = false;
        requests = await dbAcc.FetchTickets(stateMatrix);
    }

    private async Task ShowTicketDetails(RequestTicket ticket)
    {
        actTicket = ticket;
        ShowTicketMode = true;
        StateHasChanged();
    }

    public async Task StartApproval(RequestTask task)
    {
        task.CurrentHandler = userConfig.User;
        actPossibleStates = stateMatrix.getAllowedTransitions(task.StateId);
        if(actPossibleStates.Count == 1 && actPossibleStates[0] >= stateMatrix.LowestStartedState && actPossibleStates[0] < stateMatrix.LowestEndState)
        {
            task.StateId = actPossibleStates[0];
        }
        await dbAcc.UpdateReqTaskStateInDb(task);
        await dbAcc.UpdateTicketStateFromTasks(actTicket, requests, stateMatrix);
        await InitApproveTask(task);
    }
   
    private async Task InitApproveTask(RequestTask task)
    {
        actTask = task;
        actApproval = actTask.Approvals[0];  // todo: select own approvals
        ApproveTaskMode = true;
        StateHasChanged();
    }

    private async Task ApproveTask(StatefulObject approval)
    {
        try
        {
            actApproval.StateId = approval.StateId;
            actApproval.Comment = approval.OptComment();
            if(actApproval.StateId >= stateMatrix.LowestEndState)
            {
                actApproval.ApprovalDate = DateTime.Now;
                actApproval.ApproverDn = userConfig.User.Dn;
            }
            if (actApproval.Sanitize())
            {
                DisplayMessageInUi!(null, userConfig.GetText("save_approval"), userConfig.GetText("U0001"), true);
            }
            await dbAcc.UpdateApprovalInDb(actApproval);
            await dbAcc.UpdateTaskStateFromApprovals(actTask, stateMatrix);
            await dbAcc.UpdateTicketStateFromTasks(actTicket, requests, stateMatrix);
        }
        catch (Exception exception)
        {
            DisplayMessageInUi!(exception, userConfig.GetText("save_approval"), "", true);
        }
    }
}
