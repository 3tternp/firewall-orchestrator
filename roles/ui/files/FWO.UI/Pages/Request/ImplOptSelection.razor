@using FWO.Api.Data
@using FWO.Config.Api

@inject UserConfig userConfig

<div class="form-group row">
    <label for="taskDevId" class="col-sm-1 col-form-label col-form-label-sm">@(userConfig.GetText("view")):</label>
    <div class="col-sm-4">
        @if(userConfig.ReqOwnerBased)
        {
            <Dropdown ElementType="FwoOwner" @bind-SelectedElement="selectedOwnerOpt" ElementToString="@(o => o.Name)" Elements="ownerOptions" AppendWidth="100">
                <ElementTemplate Context="owner">
                    @owner.Name
                </ElementTemplate>
                <Append>
                    <button type="button" class="btn btn-sm btn-primary" style="100px" @onclick="async () => {await SelectOwner(selectedOwnerOpt);}">@(userConfig.GetText("select"))</button>
                </Append>
            </Dropdown>
        }
        else
        {
            <Dropdown ElementType="Device" @bind-SelectedElement="selectedDeviceOpt" ElementToString="@(d => d.Name)" Elements="deviceOptions" AppendWidth="100">
                <ElementTemplate Context="device">
                    @device.Name
                </ElementTemplate>
                <Append>
                    <button type="button" class="btn btn-sm btn-primary" style="100px" @onclick="async () => {await SelectDevice(selectedDeviceOpt);}">@(userConfig.GetText("select"))</button>
                </Append>
            </Dropdown>
        }
    </div>
</div>


@code
{
    [CascadingParameter]
    Action<Exception?, string, string, bool> DisplayMessageInUi { get; set; } = DefaultInit.DoNothing;

    [Parameter]
    public Func<Device, Task> SelectDevice { get; set; } = DefaultInit.DoNothing;

    [Parameter]
    public Func<FwoOwner, Task> SelectOwner { get; set; } = DefaultInit.DoNothing;

    [Parameter]
    public List<FwoOwner> Owners { get; set; } = new();

    [Parameter]
    public RequestHandler ReqHandler { get; set; } = new ();

    private List<Device> deviceOptions = new ();
    private Device selectedDeviceOpt = new ();
    private List<FwoOwner> ownerOptions = new ();
    private FwoOwner selectedOwnerOpt = new ();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            if(userConfig.ReqOwnerBased)
            {
                InitOwnerOptions();
            }
            else
            {
                InitDeviceOptions();
            }
        }
        catch (Exception exception)
        {
            DisplayMessageInUi(exception, userConfig.GetText("fetch_requests"), "", true);
        }
    }

    private void InitOwnerOptions()
    {
        FwoOwner optTicket = new (){ Id = -3, Name = userConfig.GetText("tickets")};
        FwoOwner assignedToMe = new (){ Id = -2, Name = userConfig.GetText("assigned_to_me")};
        FwoOwner allMyOwners = new (){ Id = -1, Name = userConfig.GetText("all_my_owners")};
        ownerOptions = new (Owners);
        ownerOptions.Add(optTicket);
        ownerOptions.Add(allMyOwners);
        ownerOptions.Add(assignedToMe);
        selectedOwnerOpt = allMyOwners;
    }

    private void InitDeviceOptions()
    {
        Device optTicket = new (){ Id = -1, Name = userConfig.GetText("tickets")};
        deviceOptions = new (ReqHandler.Devices);
        deviceOptions.Add(optTicket);
        deviceOptions.Add(new (){ Id = 0, Name = userConfig.GetText("all_gateways") });
        selectedDeviceOpt = optTicket;
    }
}
