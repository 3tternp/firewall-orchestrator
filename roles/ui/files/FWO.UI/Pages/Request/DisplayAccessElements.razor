@using FWO.Api.Client
@using FWO.Config.Api
@using FWO.Ui.Services

@attribute [Authorize(Roles = "admin, requester, approver, planner, implementer, reviewer, auditor, fw-admin")]

@inject ApiConnection apiConnection
@inject UserConfig userConfig


<div class="form-group row">
    <div class="col-sm-4">
        <label for="taskSource" class="col-sm-12 col-form-label col-form-label-sm">@(userConfig.GetText("source")):</label>
        @if (EditMode)
        {
            @foreach(var source in Sources.Where(x => (x.NetworkId != null && x.NetworkId != 0)))
            {
                <div class="form-group row">
                    <label class="col-sm-2">@(userConfig.GetText("obj")):</label>
                    <select id="sourceElementObject" class="col-sm-10 form-control form-control-sm" @bind="source.NetworkId">
                        @foreach (var nwObject in nwObjects)
                        {
                            <option value="@nwObject.Id">@(nwObject.Name)</option>
                        }
                    </select>
                </div>
            }
            <div class="form-group row">
                <label class="col-sm-2">@(userConfig.GetText("obj")):</label>
                <select id="sourceElementObject" class="col-sm-10 form-control form-control-sm" @bind="newSourceNetworkId">
                    <option value="null">(select new object)</option>
                    @foreach (var nwObject in nwObjects)
                    {
                        <option value="@nwObject.Id">@(nwObject.Name)</option>
                    }
                </select>
            </div>
            @foreach(var source in Sources.Where(x => (x.NetworkId == null || x.NetworkId == 0)))
            {
                <div class="form-group row">
                    <label class="col-sm-2">@(userConfig.GetText("ip")):</label>
                    <input type="text" class="col-sm-10 form-control form-control-sm" @bind="source.IpString" />
                </div>
            }
            <div class="form-group row">
                <label class="col-sm-2">@(userConfig.GetText("ip")):</label>
                <input type="text" class="col-sm-10 form-control form-control-sm" placeholder="(insert new ip)" @bind="newSourceIpString" />
            </div>
        }
        else
        {
            @foreach(var source in Sources.Where(x => (x.NetworkId != null && x.NetworkId != 0)))
            {
                <div class="form-group row">
                    <label class="col-sm-2">@(userConfig.GetText("obj")):</label>
                    <label class="col-sm-10">@((source.NetworkId != null) ? nwObjects.Find(x => x.Id == source.NetworkId)?.Name : "")</label>
                </div>
            }
            @foreach(var source in Sources.Where(x => (x.NetworkId == null || x.NetworkId == 0)))
            {
                <div class="form-group row">
                    <label class="col-sm-2">@(userConfig.GetText("ip")):</label>
                    <label class="col-sm-10">@source.IpString</label>
                </div>
            }
        }
    </div>
    <div class="col-sm-4">
        <label for="taskDest" class="col-sm-12 col-form-label col-form-label-sm">@(userConfig.GetText("destination")):</label>
        @if (EditMode)
        {
            @foreach(var destination in Destinations.Where(x => (x.NetworkId != null && x.NetworkId != 0)))
            {
                <div class="form-group row">
                    <label class="col-sm-2">@(userConfig.GetText("obj")):</label>
                    <select id="sourceElementObject" class="col-sm-10 form-control form-control-sm" @bind="destination.NetworkId">
                        @foreach (var nwObject in nwObjects)
                        {
                            <option value="@nwObject.Id">@(nwObject.Name)</option>
                        }
                    </select>
                </div>
            }
            <div class="form-group row">
                <label class="col-sm-2">@(userConfig.GetText("obj")):</label>
                <select id="sourceElementObject" class="col-sm-10 form-control form-control-sm" @bind="newDestinationNetworkId">
                    <option value="null">(select new object)</option>
                    @foreach (var nwObject in nwObjects)
                    {
                        <option value="@nwObject.Id">@(nwObject.Name)</option>
                    }
                </select>
            </div>
            @foreach(var destination in Destinations.Where(x => (x.NetworkId == null || x.NetworkId == 0)))
            {
                <div class="form-group row">
                    <label class="col-sm-2">@(userConfig.GetText("ip")):</label>
                    <input type="text" class="col-sm-10 form-control form-control-sm" @bind="destination.IpString" />
                </div>
            }
            <div class="form-group row">
                <label class="col-sm-2">@(userConfig.GetText("ip")):</label>
                <input type="text" class="col-sm-10 form-control form-control-sm" placeholder="(insert new ip)" @bind="newDestinationIpString" />
            </div>
        }
        else
        {
            @foreach(var destination in Destinations.Where(x => (x.NetworkId != null && x.NetworkId != 0)))
            {
                <div class="form-group row">
                    <label class="col-sm-2">@(userConfig.GetText("obj")):</label>
                    <label class="col-sm-10">@((destination.NetworkId != null) ? nwObjects.Find(x => x.Id == destination.NetworkId)?.Name : "")</label>
                </div>
            }
            @foreach(var destination in Destinations.Where(x => (x.NetworkId == null || x.NetworkId == 0)))
            {
                <div class="form-group row">
                    <label class="col-sm-2">@(userConfig.GetText("ip")):</label>
                    <label class="col-sm-10">@destination.IpString</label>
                </div>
            }
        }
    </div>
    <div class="col-sm-4">
        <label for="taskService" class="col-sm-12 col-form-label col-form-label-sm">@(userConfig.GetText("service")):</label>
        @if (EditMode)
        {
            @foreach(var service in Services.Where(x => (x.ServiceId != null && x.ServiceId != 0)))
            {
                <div class="form-group row">
                    <label class="col-sm-2">@(userConfig.GetText("obj")):</label>
                    <select id="serviceElementObject" class="col-sm-10 form-control form-control-sm" @bind="service.ServiceId">
                        @foreach (var nwService in nwServices)
                        {
                            <option value="@nwService.Id">@(nwService.Name)</option>
                        }
                    </select>
                </div>
            }
            <div class="form-group row">
                <label class="col-sm-2">@(userConfig.GetText("obj")):</label>
                <select id="serviceElementObject" class="col-sm-10 form-control form-control-sm" @bind="newServiceId">
                    <option value="null">(select new service)</option>
                    @foreach (var nwService in nwServices)
                    {
                        <option value="@nwService.Id">@(nwService.Name)</option>
                    }
                </select>
            </div>
            @foreach(var service in Services.Where(x => (x.ServiceId == null || x.ServiceId == 0)))
            {
                <div class="form-group row">
                    <label class="col-sm-2">@(userConfig.GetText("port")):</label>
                    <input id="taskServicePort" type="number" class="col-sm-3 form-control form-control-sm" @bind="service.Port" />
                    <label class="col-sm-3">@(userConfig.GetText("protocol")):</label>
                    <select id="taskServiceProto" class="col-sm-4 form-control form-control-sm" @bind="service.ProtoId">
                        @foreach (var proto in ipProtos)
                        {
                            <option value="@proto.Id">@(proto.Name)</option>
                        }
                    </select>
                </div>
            }
            <div class="form-group row">
                <label class="col-sm-2">@(userConfig.GetText("port")):</label>
                <input id="taskServicePort" type="number" class="col-sm-3 form-control form-control-sm" @bind="newServicePort" />
                <label class="col-sm-3">@(userConfig.GetText("protocol")):</label>
                <select id="taskServiceProto" class="col-sm-4 form-control form-control-sm" @bind="newServiceProtoId">
                    <option value="null">(select new protocol)</option>
                    @foreach (var proto in ipProtos)
                    {
                        <option value="@proto.Id">@(proto.Name)</option>
                    }
                </select>
            </div>
        }
        else
        {
            @foreach(var service in Services.Where(x => (x.ServiceId != null && x.ServiceId != 0)))
            {
                <label>@((service.ServiceId != null) ? nwServices.Find(x => x.Id == service.ServiceId)?.Name : "")</label>
            }
            @foreach(var service in Services.Where(x => (x.ServiceId == null || x.ServiceId == 0)))
            {
                <div class="form-group row">
                    <label class="col-sm-2">@(userConfig.GetText("port")):</label>
                    <label class="col-sm-3">@service.Port</label>
                    <label class="col-sm-3">@(userConfig.GetText("protocol")):</label>
                    <label class="col-sm-4">@((service.ProtoId != null) ? ipProtos.Find(x => x.Id == service.ProtoId)?.Name : "")</label>
                </div>
            }
        }
    </div>
</div>


@code
{
    [CascadingParameter]
    Action<Exception?, string, string, bool>? DisplayMessageInUi { get; set; }

    [Parameter]
    public List<NwObjectElement> Sources { get; set; } = new List<NwObjectElement>();

    [Parameter]
    public EventCallback<List<NwObjectElement>> SourcesChanged { get; set; }

    [Parameter]
    public List<NwObjectElement> Destinations { get; set; } = new List<NwObjectElement>();

    [Parameter]
    public EventCallback<List<NwObjectElement>> DestinationsChanged { get; set; }

    [Parameter]
    public List<NwServiceElement> Services { get; set; } = new List<NwServiceElement>();

    [Parameter]
    public EventCallback<List<NwServiceElement>> ServicesChanged { get; set; }

    [Parameter]
    public bool EditMode { get; set; } = false;


    private List<IpProtocol> ipProtos = new List<IpProtocol>();
    private List<NetworkObject> nwObjects = new List<NetworkObject>();
    private List<NetworkService> nwServices = new List<NetworkService>();
    
    private long? newSourceNetworkId = null;
    private string? newSourceIpString = null;
    private long? newDestinationNetworkId = null;
    private string? newDestinationIpString = null;
    private long? newServiceId = null;
    private int? newServicePort = null;
    private int? newServiceProtoId = null;


    protected override async Task OnInitializedAsync()
    {
        try
        {
            ipProtos = await apiConnection.SendQueryAsync<List<IpProtocol>>(FWO.Api.Client.Queries.StmQueries.getIpProtocols);
            // nwObjects = await apiConnection.SendQueryAsync<List<NetworkObject>>(FWO.Api.Client.Queries.ObjectQueries.getNetworkObjects);
            // nwServices = await apiConnection.SendQueryAsync<List<NetworkObject>>(FWO.Api.Client.Queries.ObjectQueries.getNetworkServices);
        }
        catch (Exception exception)
        {
            DisplayMessageInUi!(exception, userConfig.GetText("fetch_data"), "", true);
        }
    }
}
