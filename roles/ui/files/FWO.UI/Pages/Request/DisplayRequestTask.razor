@using FWO.Api.Client
@using FWO.Config.Api
@using FWO.Ui.Services

@attribute [Authorize(Roles = "admin, requester, approver, planner, implementer, auditor, fw-admin")]

@inject ApiConnection apiConnection
@inject UserConfig userConfig


<PopUp Title="@(userConfig.GetText("task") + ": " + ReqTask.Title)" Show="@Display" XLarge="true" OnClose="() => Close()">
    <Body>
        @if (Display)
        {
            <form>
                <div class="form-group row">
                    <label for="taskId" class="col-sm-1 col-form-label col-form-label-sm">@(userConfig.GetText("id")):</label>
                    <label class="col-sm-1">@ReqTask.Id</label>
                    <label for="taskTitle" class="col-sm-1 col-form-label col-form-label-sm">@(userConfig.GetText("title"))*:</label>
                    @if (EditMode)
                    {
                        <div class="col-sm-9">
                            <input id="taskTitle" type="text" class="form-control form-control-sm" @bind="ReqTask.Title" />
                        </div>
                    }
                    else
                    {
                        <label class="col-sm-9">@ReqTask.Title</label>
                    }
                </div>
                <div class="form-group row">
                    <label for="taskType" class="col-sm-1 col-form-label col-form-label-sm">@(userConfig.GetText("type"))*:</label>
                    @if (EditMode)
                    {
                        <div class="col-sm-2">
                            <select id="taskType" class="form-control form-control-sm" @bind="ReqTask.TaskType">
                                @foreach (string type in Enum.GetNames(typeof(TaskType)))
                                {
                                    <option value="@type">@(userConfig.GetText(type))</option>
                                }
                            </select>
                        </div>
                    }
                    else
                    {
                        <label class="col-sm-2">@(userConfig.GetText(ReqTask.TaskType))</label>
                    }
                    <label for="taskReqAction" class="col-sm-1 col-form-label col-form-label-sm">@(userConfig.GetText("action"))*:</label>
                    @if (EditMode)
                    {
                        <div class="col-sm-2">
                            <select id="taskReqAction" class="form-control form-control-sm" @bind="ReqTask.RequestAction">
                                @foreach (string action in Enum.GetNames(typeof(RequestAction)))
                                {
                                    <option value="@action">@(userConfig.GetText(action))</option>
                                }
                            </select>
                        </div>
                    }
                    else
                    {
                        <label class="col-sm-2">@(userConfig.GetText(ReqTask.RequestAction))</label>
                    }
                    <label for="taskState" class="col-sm-1 col-form-label col-form-label-sm">@(userConfig.GetText("state")):</label>
                    <label class="col-sm-2">@States.Name[ReqTask.StateId]</label>
                    <label for="taskPlanner" class="col-sm-1 col-form-label col-form-label-sm">@(userConfig.GetText("planner")):</label>
                    <label class="col-sm-2">@ReqTask.CurrentHandler?.Name</label>
                </div>
                <div class="form-group row">
                    <label for="taskReason" class="col-sm-1 col-form-label col-form-label-sm">@(userConfig.GetText("reason")):</label>
                    @if (EditMode)
                    {
                        <div class="col-sm-11">
                            <input id="taskReason" type="text" class="form-control form-control-sm" @bind="ReqTask.Reason" />
                        </div>
                    }
                    else
                    {
                        <label class="col-sm-11">@ReqTask.Reason</label>
                    }
                </div>
                <div class="form-group row">
                    <label for="taskRuleAction" class="col-sm-1 col-form-label col-form-label-sm">@(userConfig.GetText("rule_action")):</label>
                    @if (EditMode)
                    {
                        <div class="col-sm-2">
                            <select id="taskRuleAction" class="form-control form-control-sm" @bind="ReqTask.RuleAction">
                                <option value="null">-</option>
                                @foreach (var action in ruleActions)
                                {
                                    <option value="@action.Id">@(action.Name)</option>
                                }
                            </select>
                        </div>
                    }
                    else
                    {
                        <label class="col-sm-2">@(((ReqTask.RuleAction != null) ? ruleActions.Find(x => x.Id == ReqTask.RuleAction)?.Name : ""))</label>
                    }
                    <label for="taskRuleTracking" class="col-sm-1 col-form-label col-form-label-sm">@(userConfig.GetText("track")):</label>
                    @if (EditMode)
                    {
                        <div class="col-sm-2">
                            <select id="taskRuleTracking" class="form-control form-control-sm" @bind="ReqTask.Tracking">
                                <option value="null">-</option>
                                @foreach (var track in trackings)
                                {
                                    <option value="@track.Id">@(track.Name)</option>
                                }
                            </select>
                        </div>
                    }
                    else
                    {
                        <label class="col-sm-2">@(((ReqTask.Tracking != null) ? trackings.Find(x => x.Id == ReqTask.Tracking)?.Name : ""))</label>
                    }
                    <label for="taskRuleValidFrom" class="col-sm-1 col-form-label col-form-label-sm">@(userConfig.GetText("valid_from")):</label>
                    @if (EditMode)
                    {
                        <div class="col-sm-2">
                            <input id="taskRuleValidFrom" type="date" class="form-control form-control-sm" @bind="ReqTask.TargetBeginDate" />
                        </div>
                    }
                    else
                    {
                        <label class="col-sm-2">@ReqTask.TargetBeginDate?.ToString("d")</label>
                    }
                    <label for="taskRuleValidTo" class="col-sm-1 col-form-label col-form-label-sm">@(userConfig.GetText("valid_to")):</label>
                    @if (EditMode)
                    {
                        <div class="col-sm-2">
                            <input id="taskRuleValidTo" type="date" class="form-control form-control-sm" @bind="ReqTask.TargetEndDate" />
                        </div>
                    }
                    else
                    {
                        <label class="col-sm-2">@ReqTask.TargetEndDate?.ToString("d")</label>
                    }
                </div>

                @if(ReqTask.TaskType == TaskType.access.ToString())
                {
                    <DisplayAccessElements @bind-Source="actSource" @bind-Destination="actDestination" @bind-Service="actService" EditMode="EditMode"></DisplayAccessElements>
                }

                <div class="form-group row">
                    <label for="taskComment" class="col-sm-1 col-form-label col-form-label-sm">@(userConfig.GetText("comment")):</label>
                    @if (PlanMode)
                    {
                        <div class="col-sm-11">
                            <input id="taskComment" type="text" class="form-control form-control-sm" @bind="ReqTask.FwAdminComments" />
                        </div>
                    }
                    else
                    {
                        <label class="col-sm-11">@ReqTask.FwAdminComments</label>
                    }
                </div>
                @if(Phase == WorkflowPhases.planning || ReqTask.ImplementationTasks.Count > 0)
                {
                    <h5>@(userConfig.GetText("implementation_tasks"))</h5>
                    @if (PlanMode)
                    {
                        <button class="btn btn-success m-2" @onclick:preventDefault @onclick="AddImplTask">@(userConfig.GetText("create_implementation"))</button>
                    }
                    <div class="m-2">
                        <Table class="table table-bordered table-responsive overflow-auto sticky-header" TableItem="ImplementationTask" Items="ReqTask.ImplementationTasks" PageSize="0" ColumnReorder="true">
                            <Column TableItem="ImplementationTask" Title="@(userConfig.GetText("actions"))" Field="(x => x.Id)" Sortable="false" Filterable="false">
                                <Template>
                                    <div class="btn-group">
                                        <button class="btn btn-sm btn-primary" @onclick:preventDefault @onclick="() => ShowImplTask(context)">@(userConfig.GetText("details"))</button>
                                        @if (PlanMode && context.StateId < StateMatrix.LowestEndState)
                                        {
                                            <button class="btn btn-sm btn-warning" @onclick:preventDefault @onclick="() => EditImplTask(context)">@(userConfig.GetText("edit"))</button>
                                            <button class="btn btn-sm btn-danger" @onclick:preventDefault @onclick="() => DeleteImplTask(context)">@(userConfig.GetText("delete"))</button>
                                        }
                                    </div>
                                </Template>
                            </Column>
                            <Column TableItem="ImplementationTask" Title="@(userConfig.GetText("number"))" Field="@(x => x.ImplTaskNumber)" Sortable="true" Filterable="true" />
                            <Column TableItem="ImplementationTask" Title="@(userConfig.GetText("device"))" Field="@(x => x.DeviceId)" Sortable="true">
                                <Template>
                                    @(context.DeviceId != null && context.DeviceId != 0 ? devices[devices.FindIndex(x => x.Id == context.DeviceId)].Name : "")
                                </Template>
                            </Column>
                            <Column TableItem="ImplementationTask" Title="@(userConfig.GetText("state"))" Field="@(x => x.StateId)" Sortable="true" Filterable="false" >
                                <Template>
                                    @(States.Name[context.StateId])
                                </Template>
                            </Column>
                            <Column TableItem="ImplementationTask" Title="@(userConfig.GetText("implementer"))" Field="@(x => x.CurrentHandler.Name)" Sortable="true" Filterable="true" />
                            <Column TableItem="ImplementationTask" Title="@(userConfig.GetText("start"))" Field="@(x => x.Start)" Sortable="true" Filterable="true" />
                            <Column TableItem="ImplementationTask" Title="@(userConfig.GetText("stop"))" Field="@(x => x.Stop)" Sortable="true" Filterable="true" />
                        </Table>
                    </div>
                }
            </form>
        }
    </Body>
    <Footer>
        <div class="btn-group">
            @if (EditMode)
            {
                <AuthorizeView Roles="admin, requester, fw-admin">
                    <Authorized>
                        <button class="btn btn-sm btn-primary" @onclick:preventDefault @onclick="SaveReqTask">@(userConfig.GetText("save"))</button>
                    </Authorized>
                    <NotAuthorized>
                        <button class="btn btn-sm btn-primary" disabled>@(userConfig.GetText("save"))</button>
                    </NotAuthorized> 
                </AuthorizeView>
            }
            else if (PlanMode)
            {
                <AuthorizeView Roles="admin, approver, planner, implementer, fw-admin">
                    <Authorized>
                        <button class="btn btn-sm btn-primary" @onclick:preventDefault @onclick="InitPromoteReqTask">@(userConfig.GetText("promote_task"))</button>
                    </Authorized>
                    <NotAuthorized>
                        <button class="btn btn-sm btn-primary" disabled>@(userConfig.GetText("promote_task"))</button>
                    </NotAuthorized> 
                </AuthorizeView>
            }
            <button class="btn btn-sm btn-secondary" @onclick="Close">@(userConfig.GetText("cancel"))</button>
        </div>
    </Footer>
</PopUp>

<DisplayImplementationTask Phase="Phase" DbAcc="DbAcc" StateMatrix="StateMatrix" States="States" 
    @bind-Display="ShowImplTaskMode" @bind-EditMode="EditImplTaskMode" @bind-AddMode="AddImplTaskMode" 
    AddImplTask="AddImplTaskToReqTask" ChangeImplTask="ChangeImplTaskInReqTask"
    @bind-ImplTask="actImplTask" @bind-ReqTask="ReqTask" @bind-Ticket="Ticket" @bind-Requests="Requests"></DisplayImplementationTask>

<PromoteObject @bind-Promote="PromoteReqTaskMode" Save="PromoteReqTask" StatefulObject="ReqTask" StateMatrix="StateMatrix" States="States"></PromoteObject>
<DeleteObject @bind-Display="DeleteImplTaskMode" Delete="ConfDeleteImplTask" ObjName="@(actImplTask.ImplTaskNumber.ToString())"></DeleteObject>

@code
{
    [CascadingParameter]
    Action<Exception?, string, string, bool>? DisplayMessageInUi { get; set; }
    
    [Parameter]
    public WorkflowPhases Phase { get; set; } = WorkflowPhases.request;

    [Parameter]
    public RequestDbAccess DbAcc { get; set; }

    [Parameter]
    public StateMatrix StateMatrix { get; set; } = new StateMatrix();

    [Parameter]
    public RequestStateDict States { get; set; } = new RequestStateDict();

    [Parameter]
    public bool Display { get; set; } = false;

    [Parameter]
    public EventCallback<bool> DisplayChanged { get; set; }

    [Parameter]
    public bool EditMode { get; set; } = false;

    [Parameter]
    public EventCallback<bool> EditModeChanged { get; set; }

    [Parameter]
    public bool AddMode { get; set; } = false;

    [Parameter]
    public EventCallback<bool> AddModeChanged { get; set; }

    [Parameter]
    public bool PlanMode { get; set; } = false;

    [Parameter]
    public EventCallback<bool> PlanModeChanged { get; set; }

    [Parameter]
    public Func<RequestTask, Task> AddReqTask { get; set; }
    
    [Parameter]
    public Func<RequestTask, Task> ChangeReqTask { get; set; }

    [Parameter]
    public RequestTask ReqTask { get; set; } = new RequestTask();

    [Parameter]
    public EventCallback<RequestTask> ReqTaskChanged { get; set; }

    [Parameter]
    public RequestTicket Ticket { get; set; } = new RequestTicket();

    [Parameter]
    public EventCallback<RequestTicket> TicketChanged { get; set; }

    [Parameter]
    public List<RequestTicket> Requests { get; set; } = new List<RequestTicket>();

    [Parameter]
    public EventCallback<List<RequestTicket>> RequestsChanged { get; set; }


    private List<RuleAction> ruleActions = new List<RuleAction>();
    private List<Tracking> trackings = new List<Tracking>();
    private List<Device> devices = new List<Device>();
    
    private RequestElement actReqElement = new RequestElement();
    private ImplementationTask actImplTask = new ImplementationTask();
    private List<int> possibleStates = new List<int>();
    private bool ShowImplTaskMode = false;
    private bool EditImplTaskMode = false;
    private bool AddImplTaskMode = false;
    private bool DeleteImplTaskMode = false;
    private bool PromoteReqTaskMode = false;

    RuleElement actSource = new RuleElement();
    RuleElement actDestination = new RuleElement();
    RuleElement actService = new RuleElement();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            ruleActions = await apiConnection.SendQueryAsync<List<RuleAction>>(FWO.Api.Client.Queries.StmQueries.getRuleActions);
            trackings = await apiConnection.SendQueryAsync<List<Tracking>>(FWO.Api.Client.Queries.StmQueries.getTracking);
            devices = await apiConnection.SendQueryAsync<List<Device>>(FWO.Api.Client.Queries.DeviceQueries.getDeviceDetails);
            InitElements();
        }
        catch (Exception exception)
        {
            DisplayMessageInUi!(exception, userConfig.GetText("fetch_data"), "", true);
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        if (Display)
        {
            InitElements();
        }
    }

    private void InitElements()
    {
        actSource = ReqTask.getRuleElement(RuleField.source) ?? new RuleElement();
        actDestination = ReqTask.getRuleElement(RuleField.destination) ?? new RuleElement();
        actService = ReqTask.getRuleElement(RuleField.service) ?? new RuleElement();
    }

    private void Close()
    {
        Reset();
        AddMode = false;
        EditMode = false;
        PlanMode = false;
        Display = false;
        StateHasChanged();
    }

    private void Reset()
    {
        ShowImplTaskMode = false;
        PromoteReqTaskMode = false;
        DeleteImplTaskMode = false;
        AddImplTaskMode = false;
        EditImplTaskMode = false;
    }

    private void AddImplTask()
    {
        actImplTask = new ImplementationTask(ReqTask)
                        {
                            ImplTaskNumber = ReqTask.ImplementationTasks.Count + 1,
                            DeviceId = (devices.Count > 0 ? devices[0].Id : 0)
                        };
        Reset();
        AddImplTaskMode = true;
        EditImplTaskMode = true;
        ShowImplTaskMode = true;
    }
    
    private async Task AddImplTaskToReqTask(ImplementationTask task)
    {
        task.Id = await DbAcc.AddImplTaskToDb(task);
        ReqTask.ImplementationTasks.Add(task);
        Reset();
        StateHasChanged();
    }

    private async Task ChangeImplTaskInReqTask(ImplementationTask task)
    {
        await DbAcc.UpdateImplTaskInDb(task);
        ReqTask.ImplementationTasks[ReqTask.ImplementationTasks.FindIndex(x => x.ImplTaskNumber == task.ImplTaskNumber)] = task;
        Reset();
        StateHasChanged();
    }

    private void EditImplTask(ImplementationTask task)
    {
        actImplTask = task;
        Reset();
        EditImplTaskMode = true;
        ShowImplTaskMode = true;
    }

    private void ShowImplTask(ImplementationTask task)
    {
        actImplTask = task;
        Reset();
        ShowImplTaskMode = true;
    }

    private void DeleteImplTask(ImplementationTask task)
    {
        actImplTask = task;
        Reset();
        DeleteImplTaskMode = true;
    }

    private async Task ConfDeleteImplTask()
    {
        await DbAcc.DeleteImplTaskFromDb(actImplTask);
        ReqTask.ImplementationTasks.Remove(actImplTask);
        DeleteImplTaskMode = false;
    }

    private async Task InitPromoteReqTask()
    {
        Reset();
        PromoteReqTaskMode = true;
    }

    private async Task PromoteReqTask(StatefulObject task)
    {
        try
        {
            ReqTask.StateId = task.StateId;
            if (ReqTask.Start == null && ReqTask.StateId >= StateMatrix.LowestStartedState)
            {
                ReqTask.Start = DateTime.Now;
                ReqTask.CurrentHandler = userConfig.User;
            }
            if (Phase == WorkflowPhases.planning && ReqTask.Stop == null && ReqTask.StateId >= StateMatrix.LowestEndState)
            {
                ReqTask.Stop = DateTime.Now;
            }
            await DbAcc.UpdateReqTaskStateInDb(ReqTask);

            if(Phase == WorkflowPhases.planning)
            {
                foreach(ImplementationTask implTask in ReqTask.ImplementationTasks)
                {
                    implTask.StateId = ReqTask.StateId;
                    await DbAcc.UpdateImplTaskStateInDb(implTask);
                }
            }

            Ticket.Tasks[Ticket.Tasks.FindIndex(x => x.Id == ReqTask.Id)] = ReqTask;
            Close();
        }
        catch (Exception exception)
        {
            DisplayMessageInUi!(exception, userConfig.GetText("promote_task"), "", true);
        }
    }  

    private void AddApproval()
    {
        RequestApproval approval = new RequestApproval()
        {
            StateId = StateMatrix.LowestEndState,
            // ApproverGroup = get from owner ???,
            TenantId = Ticket.TenantId, // ??
            Deadline = DateTime.Now.AddDays(30), // config/input ??
            InitialApproval = true
        };
        ReqTask.Approvals.Add(approval);
    }

    private void AddElements()
    {
        ReqTask.Elements.Add(actSource.ToReqElement(RuleField.source));
        ReqTask.Elements.Add(actDestination.ToReqElement(RuleField.destination));
        ReqTask.Elements.Add(actService.ToReqElement(RuleField.service));
    }

    private void UpdateElements()
    {
        ReqTask.Elements[ReqTask.Elements.FindIndex(x => x.Id == actSource.ElemId)] = actSource.ToReqElement(RuleField.source);
        ReqTask.Elements[ReqTask.Elements.FindIndex(x => x.Id == actDestination.ElemId)] = actDestination.ToReqElement(RuleField.destination);
        ReqTask.Elements[ReqTask.Elements.FindIndex(x => x.Id == actService.ElemId)] = actService.ToReqElement(RuleField.service);
    }

    private async Task SaveReqTask()
    {
        try
        {
            if (ReqTask.Sanitize())
            {
                DisplayMessageInUi!(null, userConfig.GetText("save_task"), userConfig.GetText("U0001"), true);
            }
            if (AddMode)
            {
                AddElements();
                AddApproval();
                if (CheckTaskValues())
                {
                    ReqTask.TaskNumber = Ticket.Tasks.Count + 1;
                    await AddReqTask(ReqTask);
                    Close();
                }
            }
            else
            {
                UpdateElements();
                if (CheckTaskValues())
                {
                    await ChangeReqTask(ReqTask);
                    Close();
                }
            }
        }
        catch (Exception exception)
        {
            DisplayMessageInUi!(exception, userConfig.GetText("save_task"), "", true);
        }
    }

    private bool CheckTaskValues()
    {
        if (ReqTask.Title == null || ReqTask.Title == "")
        {
            DisplayMessageInUi!(null, userConfig.GetText("save_task"), userConfig.GetText("E5102"), true);
            return false;
        }
        foreach (var reqElem in ReqTask.Elements)
        {
            if (reqElem.NetworkId == null && reqElem.ServiceId == null)
            {
                if (reqElem.IpString == null || reqElem.IpString == "")
                {
                    DisplayMessageInUi!(null, userConfig.GetText("save_element"), userConfig.GetText("E5102"), true);
                    return false;
                }
                if (reqElem.Port < 1 || reqElem.Port > 65535)
                {
                    DisplayMessageInUi!(null, userConfig.GetText("save_element"), userConfig.GetText("E5103"), true);
                    return false;
                }
            }
        }
        return true;
    }
}
