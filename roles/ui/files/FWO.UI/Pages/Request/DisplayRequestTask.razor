@using FWO.Api.Client
@using FWO.Config.Api
@using FWO.Ui.Services

@attribute [Authorize(Roles = "admin, requester, approver, planner, implementer, reviewer, auditor, fw-admin")]

@inject ApiConnection apiConnection
@inject UserConfig userConfig


<PopUp Title="@(userConfig.GetText("task") + ": " + ReqHandler.ActReqTask.Title)" Show="@ReqHandler.DisplayReqTaskMode" XLarge="true" OnClose="async () => Close()">
    <Body>
        @if (ReqHandler.DisplayReqTaskMode)
        {
            <form>
                <div class="form-group row">
                    <div class="col-sm-2">
                        <div class="form-group row">
                            <label class="col-sm-6 col-form-label col-form-label-sm">@(userConfig.GetText("id")):</label>
                            <div class="col-sm-6">
                                <label class="col-sm-12 border bg-secondary">@ReqHandler.ActReqTask.Id</label>
                            </div>
                        </div>
                    </div>
                    @if(!StateMatrix.PhaseActive[WorkflowPhases.planning] && userConfig.ReqAutoCreateImplTasks == AutoCreateImplTaskOptions.enterInReqTask)
                    {
                        <div class="col-sm-7">
                            <div class="form-group row">
                                <label class="col-sm-2 col-form-label col-form-label-sm">@(userConfig.GetText("title"))*:</label>
                                <div class="col-sm-10">
                                    <input type="text" class="form-control form-control-sm" readonly="@(!ReqHandler.EditReqTaskMode)" @bind="ReqHandler.ActReqTask.Title" />
                                </div>
                            </div>
                        </div>
                        <div class="col-sm-3">
                            <div class="form-group row">
                                <label class="col-sm-4 col-form-label col-form-label-sm">@(userConfig.GetText("device"))*:</label>
                                <div class="col-sm-8">
                                    @if (ReqHandler.EditReqTaskMode)
                                    {
                                        <select class="form-control form-control-sm" @bind="ReqHandler.ActReqTask.DeviceId">
                                            <option value="null">-</option>
                                            @foreach (Device device in ReqHandler.Devices)
                                            {
                                                <option value="@device.Id">@(device.Name)</option>
                                            }
                                        </select>
                                    }
                                    else
                                    {
                                        <label class="col-sm-12 h-100 border bg-secondary">@(ReqHandler.ActReqTask.DeviceId != null && ReqHandler.ActReqTask.DeviceId != 0 ? ReqHandler.Devices[ReqHandler.Devices.FindIndex(x => x.Id == ReqHandler.ActReqTask.DeviceId)].Name : "")</label>
                                    }
                                </div>
                            </div>
                        </div>
                    }
                    else
                    {
                        <div class="col-sm-10">
                            <div class="form-group row">
                                <label class="col-sm-1 col-form-label col-form-label-sm">@(userConfig.GetText("title"))*:</label>
                                <div class="col-sm-11">
                                    <input type="text" class="form-control form-control-sm" readonly="@(!ReqHandler.EditReqTaskMode)" @bind="ReqHandler.ActReqTask.Title" />
                                </div>
                            </div>
                        </div>
                    }
                </div>
                <div class="form-group row">
                    <div class="col-sm-3">
                        <div class="form-group row">
                            <label class="col-sm-4 col-form-label col-form-label-sm">@(userConfig.GetText("type"))*:</label>
                            <div class="col-sm-8">
                                @if (ReqHandler.EditReqTaskMode)
                                {
                                    <select class="form-control form-control-sm" @bind="ReqHandler.ActReqTask.TaskType">
                                        @foreach (TaskType type in availableTaskTypes)
                                        {
                                            <option value="@type">@(userConfig.GetText(type.ToString()))</option>
                                        }
                                    </select>
                                }
                                else
                                {
                                    <label class="col-sm-12 h-100 border bg-secondary">@(userConfig.GetText(ReqHandler.ActReqTask.TaskType))</label>
                                }
                            </div>
                        </div>
                    </div>
                    <div class="col-sm-3">
                        <div class="form-group row">
                            <label class="col-sm-4 col-form-label col-form-label-sm">@(userConfig.GetText("action"))*:</label>
                            <div class="col-sm-8">
                                @if (ReqHandler.EditReqTaskMode)
                                {
                                    <select class="form-control form-control-sm" @bind="ReqHandler.ActReqTask.RequestAction">
                                        @foreach (string action in Enum.GetNames(typeof(RequestAction)))
                                        {
                                            <option value="@action">@(userConfig.GetText(action))</option>
                                        }
                                    </select>
                                }
                                else
                                {
                                    <label class="col-sm-12 h-100 border bg-secondary">@(userConfig.GetText(ReqHandler.ActReqTask.RequestAction))</label>
                                }
                            </div>
                        </div>
                    </div>
                    <div class="col-sm-3">
                        <div class="form-group row">
                            <label class="col-sm-4 col-form-label col-form-label-sm">@(userConfig.GetText("state")):</label>
                            <div class="col-sm-8">
                                <label class="col-sm-12 h-100 border bg-secondary">@States.Name[ReqHandler.ActReqTask.StateId]</label>
                            </div>
                        </div>
                    </div>
                    <div class="col-sm-3">
                        <div class="form-group row">
                            <label class="col-sm-4 col-form-label col-form-label-sm">@(userConfig.GetText("handler")):</label>
                            <div class="col-sm-8">
                                <label class="col-sm-12 h-100 border bg-secondary">@ReqHandler.ActReqTask.CurrentHandler?.Name</label>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="form-group row">
                    <label class="col-sm-1 col-form-label col-form-label-sm">@(userConfig.GetText("reason")):</label>
                    <div class="col-sm-11">
                        <textarea rows="2" type="text" class="form-control form-control-sm" readonly="@(!ReqHandler.EditReqTaskMode)" @bind="ReqHandler.ActReqTask.Reason"/>   
                    </div>
                </div>
                <div class="form-group row">
                    <div class="col-sm-3">
                        <div class="form-group row">
                            <label class="col-sm-4 col-form-label col-form-label-sm">@(userConfig.GetText("rule_action"))*:</label>
                            <div class="col-sm-8">
                                @if (ReqHandler.EditReqTaskMode)
                                {
                                    <select class="form-control form-control-sm" @bind="ReqHandler.ActReqTask.RuleAction">
                                        @foreach (var action in ruleActions)
                                        {
                                            <option value="@action.Id">@(action.Name)</option>
                                        }
                                    </select>
                                }
                                else
                                {
                                    <label class="col-sm-12 h-100 border bg-secondary">@(((ReqHandler.ActReqTask.RuleAction != null) ? ruleActions.Find(x => x.Id == ReqHandler.ActReqTask.RuleAction)?.Name : ""))</label>
                                }
                            </div>
                        </div>
                    </div>
                    <div class="col-sm-3">
                        <div class="form-group row">
                            <label class="col-sm-4 col-form-label col-form-label-sm">@(userConfig.GetText("track"))*:</label>
                            <div class="col-sm-8">
                                @if (ReqHandler.EditReqTaskMode)
                                {
                                    <select class="form-control form-control-sm" @bind="ReqHandler.ActReqTask.Tracking">
                                        @foreach (var track in trackings)
                                        {
                                            <option value="@track.Id">@(track.Name)</option>
                                        }
                                    </select>
                                }
                                else
                                {
                                    <label class="col-sm-12 h-100 border bg-secondary">@(((ReqHandler.ActReqTask.Tracking != null) ? trackings.Find(x => x.Id == ReqHandler.ActReqTask.Tracking)?.Name : ""))</label>
                                }
                            </div>
                        </div>
                    </div>
                    <div class="col-sm-3">
                        <div class="form-group row">
                            <label class="col-sm-4 col-form-label col-form-label-sm">@(userConfig.GetText("valid_from")):</label>
                            <div class="col-sm-8">
                                @if (ReqHandler.EditReqTaskMode)
                                {
                                    <input type="date" class="form-control form-control-sm" @bind="ReqHandler.ActReqTask.TargetBeginDate" />
                                }
                                else
                                {
                                    <label class="col-sm-12 h-100 border bg-secondary">@ReqHandler.ActReqTask.TargetBeginDate?.ToString("d")</label>
                                }
                            </div>
                        </div>
                    </div>
                    <div class="col-sm-3">
                        <div class="form-group row">
                            <label class="col-sm-4 col-form-label col-form-label-sm">@(userConfig.GetText("valid_to")):</label>
                            <div class="col-sm-8">
                                @if (ReqHandler.EditReqTaskMode)
                                {
                                    <input type="date" class="form-control form-control-sm" @bind="ReqHandler.ActReqTask.TargetEndDate" />
                                }
                                else
                                {
                                    <label class="col-sm-12 h-100 border bg-secondary">@ReqHandler.ActReqTask.TargetEndDate?.ToString("d")</label>
                                }
                            </div>
                        </div>
                    </div>
                </div>

                @if(ReqHandler.ActReqTask.TaskType == TaskType.access.ToString())
                {
                    <DisplayAccessElements @bind-Sources="actSources" @bind-Destinations="actDestinations" @bind-Services="actServices" 
                        TaskId="ReqHandler.ActReqTask.Id" EditMode="ReqHandler.EditReqTaskMode"></DisplayAccessElements>
                }

                @if(!ReqHandler.EditReqTaskMode)
                {
                    <div class="form-group row">
                        <label class="col-sm-1 col-form-label col-form-label-sm">@(userConfig.GetText("comment")):</label>
                        <div class="col-sm-11">
                            <textarea rows="2" type="text" class="form-control form-control-sm" readonly="@(!(ReqHandler.PlanReqTaskMode || ReqHandler.ApproveReqTaskMode))" @bind="ReqHandler.ActReqTask.FwAdminComments" />
                        </div>
                    </div>
                }

                @if(Phase == WorkflowPhases.planning || ReqHandler.ActReqTask.ImplementationTasks.Count > 0)
                {
                    <h5>@(userConfig.GetText("implementation_tasks"))</h5>

                    <DisplayImplTaskTable Phase="Phase" StateMatrix="StateMatrix" States="States" 
                        ReqHandler="ReqHandler" ResetParent="Reset" AllImplTasks="ReqHandler.ActReqTask.ImplementationTasks"
                        StartImplPhase="StartImplPhase"/>
                }
            </form>
        }
    </Body>
    <Footer>
        <div class="btn-group">
            @if (ReqHandler.EditReqTaskMode)
            {
                <AuthorizeView Roles="admin, requester, fw-admin">
                    <Authorized>
                        <button class="btn btn-sm btn-primary" @onclick:preventDefault @onclick="SaveReqTask">@(userConfig.GetText("save"))</button>
                    </Authorized>
                    <NotAuthorized>
                        <button class="btn btn-sm btn-primary" disabled>@(userConfig.GetText("save"))</button>
                    </NotAuthorized> 
                </AuthorizeView>
            }
            else if (ReqHandler.PlanReqTaskMode)
            {
                <AuthorizeView Roles="admin, planner, fw-admin">
                    <Authorized>
                        <button class="btn btn-sm btn-primary" @onclick:preventDefault @onclick="InitPromoteReqTask">@(userConfig.GetText("promote_task"))</button>
                    </Authorized>
                    <NotAuthorized>
                        <button class="btn btn-sm btn-primary" disabled>@(userConfig.GetText("promote_task"))</button>
                    </NotAuthorized> 
                </AuthorizeView>
            }
            else if (ReqHandler.ApproveReqTaskMode)
            {
                <AuthorizeView Roles="admin, approver, fw-admin">
                    <Authorized>
                        <button class="btn btn-sm btn-primary" @onclick:preventDefault @onclick="InitApproveTask">@(userConfig.GetText("approve"))</button>
                    </Authorized>
                    <NotAuthorized>
                        <button class="btn btn-sm btn-primary" disabled>@(userConfig.GetText("approve"))</button>
                    </NotAuthorized> 
                </AuthorizeView>
            }

            <button class="btn btn-sm btn-secondary" @onclick:preventDefault @onclick="Close">@(userConfig.GetText("cancel"))</button>
        </div>
    </Footer>
</PopUp>

<PromoteObject @bind-Promote="ReqHandler.DisplayPromoteMode" ResetParent="Close" ObjectName="task" Save="ConfPromoteReqTask" StatefulObject="ReqHandler.ActReqTask" StateMatrix="StateMatrix" States="States"/>
<PromoteObject @bind-Promote="ReqHandler.DisplayApproveMode" ResetParent="Close" ObjectName="approval" WithComment="true" Save="ConfApproveTask" StatefulObject="actApproval" StateMatrix="StateMatrix" States="States"/>

@code
{
    [CascadingParameter]
    Action<Exception?, string, string, bool>? DisplayMessageInUi { get; set; }
    
    [Parameter]
    public WorkflowPhases Phase { get; set; } = WorkflowPhases.request;

    [Parameter]
    public StateMatrix StateMatrix { get; set; } = new StateMatrix();

    [Parameter]
    public RequestStateDict States { get; set; } = new RequestStateDict();

    [Parameter]
    public RequestHandler ReqHandler { get; set; }

    [Parameter]
    public Func<Task> ResetParent { get; set; }

    [Parameter]
    public Func<RequestTask, Task>? StartPhase { get; set; }

    [Parameter]
    public Func<ImplementationTask, Task>? StartImplPhase { get; set; }



    private List<TaskType> availableTaskTypes { get; set; } = new List<TaskType>();
    private List<RuleAction> ruleActions = new List<RuleAction>();
    private List<Tracking> trackings = new List<Tracking>();
    
    private RequestApproval actApproval = new RequestApproval();
    
    List<NwObjectElement> actSources = new List<NwObjectElement>();
    List<NwObjectElement> actDestinations = new List<NwObjectElement>();
    List<NwServiceElement> actServices = new List<NwServiceElement>();
    

    protected override async Task OnInitializedAsync()
    {
        try
        {
            availableTaskTypes = System.Text.Json.JsonSerializer.Deserialize<List<TaskType>>(userConfig.ReqAvailableTaskTypes) ?? throw new Exception("Config data could not be parsed.");
            ruleActions = await apiConnection.SendQueryAsync<List<RuleAction>>(FWO.Api.Client.Queries.StmQueries.getRuleActions);
            trackings = await apiConnection.SendQueryAsync<List<Tracking>>(FWO.Api.Client.Queries.StmQueries.getTracking);
            InitElements();
        }
        catch (Exception exception)
        {
            DisplayMessageInUi!(exception, userConfig.GetText("fetch_data"), "", true);
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        if (ReqHandler.DisplayReqTaskMode)
        {
            InitElements();
        }
    }

    private void InitElements()
    {
        actSources = ReqHandler.ActReqTask.getNwObjectElements(AccessField.source);
        actDestinations = ReqHandler.ActReqTask.getNwObjectElements(AccessField.destination);
        actServices = ReqHandler.ActReqTask.getServiceElements();
    }

    private async Task Close()
    {
        await ResetParent();
    }

    private async Task Reset()
    {
        StateHasChanged();
    }

    private async Task InitPromoteReqTask()
    {
        ReqHandler.SetReqTaskPopUpOpt(ObjAction.displayPromote);
    }

    private async Task ConfPromoteReqTask(StatefulObject task)
    {
        await ReqHandler.PromoteReqTask(task);
    }

    private async Task InitApproveTask()
    {
        actApproval = ReqHandler.ActReqTask.Approvals[0];  // todo: select own approvals
        actApproval.SetOptComment(actApproval.Comment);
        ReqHandler.SetReqTaskPopUpOpt(ObjAction.displayApprove);
    }

    private async Task ConfApproveTask(StatefulObject approval)
    {
        await ReqHandler.ApproveTask(approval, actApproval);
    }

    private void AddApproval()
    {
        RequestApproval approval = new RequestApproval()
        {
            StateId = StateMatrix.LowestEndState,
            // ApproverGroup = get from owner ???,
            TenantId = ReqHandler.ActTicket.TenantId, // ??
            Deadline = userConfig.ReqApprovalDeadline > 0 ? DateTime.Now.AddDays(userConfig.ReqApprovalDeadline) : null,
            InitialApproval = true
        };
        ReqHandler.ActReqTask.Approvals.Add(approval);
    }

    private void UpdateElements()
    {
        foreach(var oldElem in ReqHandler.ActReqTask.Elements.Where(x => x.Id > 0 && (x.Field == AccessField.source.ToString() || 
            x.Field == AccessField.destination.ToString() || x.Field == AccessField.service.ToString())))
        {
            if(actSources.FirstOrDefault(x => x.ElemId == oldElem.Id) == null && 
                actDestinations.FirstOrDefault(x => x.ElemId == oldElem.Id) == null && 
                actServices.FirstOrDefault(x => x.ElemId == oldElem.Id) == null)
            {
                ReqHandler.ActReqTask.RemovedElements.Add(oldElem);
            }
        }

        ReqHandler.ActReqTask.Elements.RemoveAll(x => (x.Field == AccessField.source.ToString() || 
            x.Field == AccessField.destination.ToString() || x.Field == AccessField.service.ToString()));

        foreach(var source in actSources)
        {
            ReqHandler.ActReqTask.Elements.Add(source.ToReqElement(AccessField.source));
        }
        foreach(var destination in actDestinations)
        {
            ReqHandler.ActReqTask.Elements.Add(destination.ToReqElement(AccessField.destination));
        }
        foreach(var service in actServices)
        {
            ReqHandler.ActReqTask.Elements.Add(service.ToReqElement(AccessField.service));
        }
    }

    private async Task SaveReqTask()
    {
        try
        {
            if (ReqHandler.ActReqTask.Sanitize())
            {
                DisplayMessageInUi!(null, userConfig.GetText("save_task"), userConfig.GetText("U0001"), true);
            }
            UpdateElements();
            if (CheckTaskValues())
            {
                if (ReqHandler.AddReqTaskMode)
                {
                    AddApproval();
                    ReqHandler.ActReqTask.TaskNumber = ReqHandler.ActTicket.HighestTaskNumber() + 1;
                    await ReqHandler.AddReqTask();
                    
                }
                else
                {
                    await ReqHandler.ChangeReqTask();
                }
                Close();
            }
        }
        catch (Exception exception)
        {
            DisplayMessageInUi!(exception, userConfig.GetText("save_task"), "", true);
        }
    }

    private bool CheckTaskValues()
    {
        if (ReqHandler.ActReqTask.Title == null || ReqHandler.ActReqTask.Title == "")
        {
            DisplayMessageInUi!(null, userConfig.GetText("save_task"), userConfig.GetText("E5102"), true);
            return false;
        }
        foreach (var reqElem in ReqHandler.ActReqTask.Elements)
        {
            if (ReqHandler.ActReqTask.TaskType == TaskType.access.ToString() && reqElem.NetworkId == null && reqElem.ServiceId == null)
            {
                if (reqElem.Field == AccessField.service.ToString() && reqElem.Port < 1 || reqElem.Port > 65535)
                {
                    DisplayMessageInUi!(null, userConfig.GetText("save_element"), userConfig.GetText("E5103"), true);
                    return false;
                }
            }
        }
        return true;
    }
}
