@using FWO.Api.Client
@using FWO.Api.Data
@using FWO.Config.Api
@using FWO.Ui.Services

@attribute [Authorize(Roles = "admin, requester, approver, planner, implementer, reviewer, auditor, fw-admin")]

@inject ApiConnection apiConnection
@inject UserConfig userConfig


<PopUp Title="@(userConfig.GetText("request") + ": " + ReqHandler.ActTicket.Title)" Show="@ReqHandler.DisplayTicketMode" XLarge="true" OnClose="() => Close()">
    <Body>
        @if (ReqHandler.DisplayTicketMode)
        {
            <form>
                <div class="form-group row">
                    <label for="ticketId" class="col-sm-1 col-form-label col-form-label-sm">@(userConfig.GetText("id")):</label>
                    <label class="col-sm-1">@ReqHandler.ActTicket.Id</label>
                    <label for="ticketTitle" class="col-sm-1 col-form-label col-form-label-sm">@(userConfig.GetText("title"))*:</label>
                    @if (ReqHandler.EditTicketMode)
                    {
                        <div class="col-sm-9">
                            <input id="ticketTitle" type="text" class="form-control form-control-sm" @bind="ReqHandler.ActTicket.Title" />
                        </div>
                    }
                    else
                    {
                        <label class="col-sm-9">@ReqHandler.ActTicket.Title</label>
                    }
                </div>

                <div class="form-group row">
                    <label for="ticketState" class="col-sm-1 col-form-label col-form-label-sm">@(userConfig.GetText("state")):</label>
                    <label class="col-sm-2">@States.Name[ReqHandler.ActTicket.StateId]</label>
                    <label for="ticketRequester" class="col-sm-1 col-form-label col-form-label-sm">@(userConfig.GetText("requester")):</label>
                    <label class="col-sm-2">@ReqHandler.ActTicket.Requester?.Name</label>
                </div>
                <div class="form-group row">
                    <label for="ticketReason" class="col-sm-1 col-form-label col-form-label-sm">@(userConfig.GetText("reason")):</label>
                    @if (ReqHandler.EditTicketMode)
                    {
                        <div class="col-sm-11">
                            <input id="ticketReason" type="text" class="form-control form-control-sm" @bind="ReqHandler.ActTicket.Reason" />
                        </div>
                    }
                    else
                    {
                        <label class="col-sm-11">@ReqHandler.ActTicket.Reason</label>
                    }
                </div>

                @if(Phase < WorkflowPhases.implementation)
                {
                    <h5>@(userConfig.GetText("tasks"))</h5>

                    <DisplayReqTaskTable Phase="Phase" StateMatrix="StateMatrix" States="States" 
                        ReqHandler="ReqHandler" ResetParent="Reset" 
                        StartPhase="StartPhase"/>
                }
                else
                {
                    <h5>@(userConfig.GetText("implementation_tasks"))</h5>

                    <DisplayImplTaskTable Phase="Phase" StateMatrix="StateMatrix" States="States" 
                        ReqHandler="ReqHandler" ResetParent="Reset" AllImplTasks="AllImplTasks"
                        StartImplPhase="StartImplPhase"/>
                }
            </form>
        }
    </Body>
    <Footer>
        <div class="btn-group">
            @if(ReqHandler.EditTicketMode)
            {
                <AuthorizeView Roles="admin, requester, fw-admin">
                    <Authorized>
                        <button class="btn btn-sm btn-primary" @onclick="InitSaveTicket">@(userConfig.GetText("save"))</button>
                    </Authorized>
                    <NotAuthorized>
                        <button class="btn btn-sm btn-primary" disabled>@(userConfig.GetText("save"))</button>
                    </NotAuthorized> 
                </AuthorizeView>
            }
            else if (CheckPromoteTicket())
            {
                <AuthorizeView Roles="admin, requester, approver, planner, implementer, reviewer, fw-admin">
                    <Authorized>
                        <button class="btn btn-sm btn-primary" @onclick:preventDefault @onclick="InitPromoteTicket">@(userConfig.GetText("promote_ticket"))</button>
                    </Authorized>
                    <NotAuthorized>
                        <button class="btn btn-sm btn-primary" disabled>@(userConfig.GetText("promote_ticket"))</button>
                    </NotAuthorized> 
                </AuthorizeView>
            }
            <button class="btn btn-sm btn-secondary" @onclick:preventDefault @onclick="Close">@(userConfig.GetText("cancel"))</button>
        </div>
    </Footer>
</PopUp>

<PromoteObject @bind-Promote="ReqHandler.DisplaySaveTicketMode" ResetParent="Reset" ObjectName="ticket" Save="ReqHandler.SaveTicket" StatefulObject="ReqHandler.ActTicket" StateMatrix="StateMatrix" States="States"></PromoteObject>
<PromoteObject @bind-Promote="ReqHandler.DisplayPromoteMode" ResetParent="Reset" ObjectName="ticket" Save="ReqHandler.PromoteTicket" StatefulObject="ReqHandler.ActTicket" StateMatrix="StateMatrix" States="States"></PromoteObject>


@code
{
    [CascadingParameter]
    Action<Exception?, string, string, bool>? DisplayMessageInUi { get; set; }
    
    [Parameter]
    public WorkflowPhases Phase { get; set; } = WorkflowPhases.approval;

    [Parameter]
    public StateMatrix StateMatrix { get; set; } = new StateMatrix();

    [Parameter]
    public RequestStateDict States { get; set; } = new RequestStateDict();

    [Parameter]
    public RequestHandler ReqHandler { get; set; }
    
    [Parameter]
    public Func<Task> ResetParent { get; set; }

    [Parameter]
    public List<ImplementationTask>? AllImplTasks { get; set; }

    [Parameter]
    public Func<RequestTask, Task>? StartPhase { get; set; }

    [Parameter]
    public Func<ImplementationTask, Task>? StartImplPhase { get; set; }


    private RequestTask actReqTask { get; set; } = new RequestTask();
    private ImplementationTask actImplTask = new ImplementationTask();
    private List<int> possibleStates = new List<int>();


    private void Close()
    {
        ResetParent();
    }

    private async Task Reset()
    {
        ReqHandler.ResetTicketActions();
        ResetParent();
        StateHasChanged();
    }

    private bool CheckPromoteTicket()
    {
        if (ReqHandler.ActTicket.StateId < StateMatrix.LowestStartedState || ReqHandler.ActTicket.StateId >= StateMatrix.LowestEndState)
        {
            return false;
        }
        int oldState = ReqHandler.ActTicket.StateId;
        if(ReqHandler.ActTicket.Tasks.Count > 0)
        {
            List<int> taskStates = new List<int>();
            foreach (RequestTask reqTask in ReqHandler.ActTicket.Tasks)
            {
                taskStates.Add(reqTask.StateId);
            }
            ReqHandler.ActTicket.StateId = StateMatrix.getDerivedStateFromSubStates(taskStates);
            if(ReqHandler.ActTicket.StateId == oldState)
            {
                return false;
            }
            return true;
        }
        else
        {
            possibleStates = StateMatrix.getAllowedTransitions(ReqHandler.ActTicket.StateId);
            if(possibleStates.Count == 1 && possibleStates[0] == oldState)
            {
                return false;
            }
            return true;
        }
    }

    private async Task InitPromoteTicket()
    {
        ReqHandler.SetTicketOpt(ObjAction.displayPromote);
    }

    private async Task InitSaveTicket()
    {
        if(ReqHandler.ActTicket.Tasks.Count == 0)
        {
            await ReqHandler.SaveTicket(ReqHandler.ActTicket);
            StateHasChanged();
        }
        else
        {
            ReqHandler.SetTicketOpt(ObjAction.displaySaveTicket);
        }
    }
}
