@using FWO.Config.Api
@using FWO.Ui.Services

@attribute [Authorize(Roles = "admin, requester, approver, planner, implementer, auditor, fw-admin")]

@inject UserConfig userConfig

<div class="m-2">
    <Table class="table table-bordered table-responsive vheight75 overflow-auto sticky-header" TableItem="RequestTicket" Items="Requests" PageSize="0" ColumnReorder="true">
        <Column TableItem="RequestTicket" Title="@(userConfig.GetText("actions"))" Field="(x => x.Id)" Sortable="false" Filterable="false">
            <Template>
                <div class="btn-group">
                    @if (Phase == WorkflowPhases.request && context.StateId < StateMatrix.LowestEndState)
                    {
                        <button class="btn btn-sm btn-warning" @onclick="() => EditTicket(context)">@(userConfig.GetText("edit"))</button>
                    }
                    else
                    {
                        <button class="btn btn-sm btn-primary" @onclick="() => ShowTicketDetails(context)">@(userConfig.GetText("details"))</button>
                    }
                </div>
            </Template>
        </Column>
        <Column TableItem="RequestTicket" Title="@(userConfig.GetText("id"))" Field="@(x => x.Id)" Sortable="true" Filterable="true" />
        <Column TableItem="RequestTicket" Title="@(userConfig.GetText("title"))" Field="@(x => x.Title)" Sortable="true" Filterable="true" />
        <Column TableItem="RequestTicket" Title="@(userConfig.GetText("requester"))" Field="@(x => x.Requester.Name)" Sortable="true" Filterable="true" />
        <Column TableItem="RequestTicket" Title="@(userConfig.GetText("state"))" Field="@(x => x.StateId)" Sortable="true" Filterable="false" >
            <Template>
                @(States.Name[context.StateId])
            </Template>
        </Column>
        <Column TableItem="RequestTicket" Title="@(userConfig.GetText("created"))" Field="@(x => x.CreationDate)" Sortable="true" Filterable="true" />
        <Column TableItem="RequestTicket" Title="@(userConfig.GetText("closed"))" Field="@(x => x.CompletionDate)" Sortable="true" Filterable="true" />
    </Table>
</div>


@code
{
    [CascadingParameter]
    Action<Exception?, string, string, bool>? DisplayMessageInUi { get; set; }
    
    [Parameter]
    public WorkflowPhases Phase { get; set; } = WorkflowPhases.request;

    [Parameter]
    public List<RequestTicket> Requests { get; set; } = new List<RequestTicket>();

    [Parameter]
    public EventCallback<List<RequestTicket>> RequestsChanged { get; set; }

    [Parameter]
    public Func<RequestTicket, Task> ShowTicketDetails { get; set; }

    [Parameter]
    public Func<RequestTicket, Task>? EditTicket { get; set; }

    [Parameter]
    public StateMatrix StateMatrix { get; set; } = new StateMatrix();

    [Parameter]
    public RequestStateDict States { get; set; } = new RequestStateDict();
}
