@using FWO.Api.Data
@using FWO.Api.Client
@using FWO.Config.Api
@using FWO.Ui.Services

@page "/request"
@page "/request/tickets"
@attribute [Authorize(Roles = "admin, requester, auditor, fw-admin")]

@inject ApiConnection apiConnection
@inject UserConfig userConfig

<h3>@(userConfig.GetText("tickets"))</h3>
<hr />

<button class="btn btn-success m-2" @onclick="AddTicket">@(userConfig.GetText("add_new_request"))</button>

<DisplayOverview Phase="WorkflowPhases.request" @bind-Requests="requests" ShowTicketDetails="ShowTicketDetails" 
    EditTicket="EditTicket" StateMatrix ="stateMatrix" States="states"></DisplayOverview>

<DisplayTicket Phase="WorkflowPhases.request" @bind-Display="ShowTicketMode" @bind-AddMode="AddTicketMode" @bind-EditMode="EditTicketMode" 
    @bind-Ticket="actTicket" StateMatrix ="stateMatrix" States="states" @bind-Requests="requests"></DisplayTicket>


@code
{
    [CascadingParameter]
    Action<Exception?, string, string, bool>? DisplayMessageInUi { get; set; }
    
    private List<RequestTicket> requests = new List<RequestTicket>();

    private bool ShowTicketMode = false;
    private bool AddTicketMode = false;
    private bool EditTicketMode = false;
    private List<int> actPossibleStates = new List<int>();

    private RequestTicket actTicket = new RequestTicket();

    private RequestStateDict states = new RequestStateDict();
    private StateMatrix stateMatrix = new StateMatrix();


    protected override async Task OnInitializedAsync()
    {
        try
        {
            await stateMatrix.Init(WorkflowPhases.request, apiConnection);
            await states.Init(apiConnection);
            await FetchTickets();
        }
        catch (Exception exception)
        {
            DisplayMessageInUi!(exception, userConfig.GetText("fetch_requests"), "", true);
        }
    }

    private async Task FetchTickets()
    {
        try
        {
            var Variables = new
            {
                from_state = stateMatrix.LowestInputState,
                to_state = 999,
            };
            requests = await apiConnection.SendQueryAsync<List<RequestTicket>>(FWO.Api.Client.Queries.RequestQueries.getTickets, Variables);
        }
        catch (Exception exception)
        {
            DisplayMessageInUi!(exception, userConfig.GetText("fetch_requests"), "", true);
        }
    }

    private async Task AddTicket()
    {
        actTicket = new RequestTicket();
        AddTicketMode = true;
        EditTicketMode = true;
        ShowTicketMode = true;
        StateHasChanged();
    }

    private async Task EditTicket(RequestTicket ticket)
    {
        actTicket = ticket;
        AddTicketMode = false;
        EditTicketMode = true;
        ShowTicketMode = true;
        StateHasChanged();
    }

    private async Task ShowTicketDetails(RequestTicket ticket)
    {
        actTicket = ticket;
        AddTicketMode = false;
        EditTicketMode = false;
        ShowTicketMode = true;
        StateHasChanged();
    }
}
