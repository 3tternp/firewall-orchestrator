@using FWO.Api.Data
@using FWO.Api.Client
@using FWO.Config.Api
@using FWO.Ui.Services

@page "/request/tickets"
@attribute [Authorize(Roles = "admin, requester, approver, planner, implementer, reviewer, auditor, fw-admin")]

@inject ApiConnection apiConnection
@inject UserConfig userConfig

<h3>@(userConfig.GetText("create_ticket"))</h3>
<hr />

@if(InitComplete)
{
    <AuthorizeView Roles="admin, fw-admin, auditor">
        <div class="form-group row">
            <label class="col-sm-1 col-form-label col-form-label-sm">@(userConfig.GetText("view")):</label>
            <div class="col-sm-2">
                <select class="form-control form-control-sm" @bind="viewOpt">
                    <option value="0">@(userConfig.GetText("create_ticket"))</option>
                    <option value="1">@(userConfig.GetText("all_readonly"))</option>
                </select>
            </div>
            <AuthorizeView Roles="admin, fw-admin">
                <Authorized Context="ctx">
                    <button class="btn btn-sm btn-primary" @onclick="Reset">@(userConfig.GetText("select"))</button>
                </Authorized>
                <NotAuthorized Context="ctx">
                    <button class="btn btn-sm btn-primary" disabled>@(userConfig.GetText("select"))</button>
                </NotAuthorized>
            </AuthorizeView>
        </div>
    </AuthorizeView>


    <DisplayTicketTable Phase="WorkflowPhases.request" States="states" ReqHandler="reqHandler" 
        ResetParent="Reset"/>
}

@code
{
    [CascadingParameter]
    Action<Exception?, string, string, bool>? DisplayMessageInUi { get; set; }
    
    private RequestHandler reqHandler;
    private RequestStateDict states = new RequestStateDict();
    private bool InitComplete = false;

    private int viewOpt = 0;


    protected override async Task OnInitializedAsync()
    {
        try
        {
            await states.Init(apiConnection);

            reqHandler = new RequestHandler(DisplayMessageInUi, userConfig, apiConnection, WorkflowPhases.request){};
            await reqHandler.Init(viewOpt);
            InitComplete = true;
        }
        catch (Exception exception)
        {
            DisplayMessageInUi!(exception, userConfig.GetText("fetch_requests"), "", true);
        }
    }

    private async Task Reset()
    {
        reqHandler.ReadOnlyMode = viewOpt > 0;
        await reqHandler.Init(viewOpt);
    }
}
