@using FWO.Api.Data
@using FWO.Api.Client
@using FWO.Config.Api
@using FWO.Ui.Services
@using FWO.Middleware.Client

@page "/request/implementations/{ticketId?}"
@attribute [Authorize(Roles = $"{Roles.Admin}, {Roles.Implementer}, {Roles.Auditor}, {Roles.FwAdmin}")]

@inject ApiConnection apiConnection
@inject UserConfig userConfig
@inject NavigationManager NavigationManager
@inject MiddlewareClient middlewareClient

<h3>@(userConfig.GetText("implementations"))</h3>
<hr />

@if(InitComplete)
{
    <div class="form-group row">
        <label for="taskDevId" class="col-sm-1 col-form-label col-form-label-sm">@(userConfig.GetText("view")):</label>
        <div class="col-sm-2">
            <Dropdown ElementType="Device" @bind-SelectedElement="selectedDeviceOpt" ElementToString="@(d => d.Name)" Elements="deviceOptions" AppendWidth="100">
                <ElementTemplate Context="device">
                    @device.Name
                </ElementTemplate>
                <Append>
                    <button type="button" class="btn btn-sm btn-primary" style="100px" @onclick="SelectDevice">@(userConfig.GetText("select"))</button>
                </Append>
            </Dropdown>
        </div>
        
    </div>

    @if(DisplayTickets)
    {
        <DisplayTicketTable Phase="WorkflowPhases.implementation" States="states" ReqHandler="reqHandler" 
            ResetParent="Reset" StartImplPhase="StartImplementTask"/>
    }
    else
    {
        <DisplayImplTaskTable Phase="WorkflowPhases.implementation" States="states" 
            ReqHandler="reqHandler" ResetParent="SelectDevice" AllImplTasks="allImplTasks" DeviceView="true"
            StartImplPhase="StartImplementTask"/>
    }
}
else
{
    <div class="spinner-border" role="status">
        <span class="sr-only">Loading...</span>
    </div>
}

@code
{
    [CascadingParameter]
    Action<Exception?, string, string, bool> DisplayMessageInUi { get; set; } = DefaultInit.DoNothing;
    
    [CascadingParameter]
    private Task<AuthenticationState>? authenticationStateTask { get; set; }

    [Parameter]
    public string? TicketId { get; set; }

    private RequestHandler reqHandler = new ();
    private RequestStateDict states = new ();
    private List<int> OwnerIds = new();
    private bool InitComplete = false;

    private bool DisplayTickets = true;
    private List<RequestImplTask> allImplTasks = new ();
    private List<Device> deviceOptions = new ();
    private Device optTicket = new ();
    private Device allDev = new ();
    private Device selectedDeviceOpt = new ();


    protected override async Task OnInitializedAsync()
    {
        try
        {
            apiConnection.SetProperRole(authenticationStateTask!.Result.User, new List<string> { Roles.Admin, Roles.Implementer, Roles.FwAdmin, Roles.Auditor});
            await states.Init(apiConnection);

            if(userConfig.ReqOwnerBased)
            {
                OwnerIds = (await ModellingHandlerBase.GetOwnApps(authenticationStateTask, userConfig, apiConnection, DisplayMessageInUi)).ConvertAll(x => x.Id);
            }
            reqHandler = new (DisplayMessageInUi, userConfig, apiConnection, middlewareClient, WorkflowPhases.implementation){};
            await Reset();
            await HandleTicketId();
            reqHandler.SetContinueEnv(ObjAction.implement);
            optTicket = new Device(){ Id = -1, Name = userConfig.GetText("tickets")};
            allDev = new Device(){ Id = 0, Name = userConfig.GetText("all_gateways")};
            deviceOptions = new List<Device>(reqHandler.Devices);
            deviceOptions.Add(optTicket);
            deviceOptions.Add(allDev);
            selectedDeviceOpt = optTicket;
            InitComplete = true;
        }
        catch (Exception exception)
        {
            DisplayMessageInUi(exception, userConfig.GetText("fetch_requests"), "", true);
        }
    }

    private async Task HandleTicketId()
    {
        if(long.TryParse(TicketId, out long ticketId))
        {
            string newPhase = await reqHandler.HandleExtTicketId(WorkflowPhases.implementation, ticketId);
            if(newPhase != "")
            {
                NavigationManager.NavigateTo($"/request/{newPhase.ToString()}s/{TicketId}");
            }
        }
    }

    private async Task SelectDevice()
    {
        allImplTasks = new List<RequestImplTask>();
        if(selectedDeviceOpt.Id != -1)
        {
            foreach(var ticket in reqHandler.TicketList)
            {
                foreach(var reqTask in ticket.Tasks)
                {
                    foreach(var implTask in reqTask.ImplementationTasks)
                    {
                        if (selectedDeviceOpt.Id == 0 || implTask.DeviceId == selectedDeviceOpt.Id)
                        {
                            implTask.TicketId = ticket.Id;
                            implTask.ReqTaskId = reqTask.Id;
                            allImplTasks.Add(implTask);
                        }
                    }
                }
            }
        }
        DisplayTickets = (selectedDeviceOpt.Id == -1);
        await Reset();
        StateHasChanged();
    }

    private async Task Reset()
    {
        try
        {
            reqHandler.ReadOnlyMode = !(authenticationStateTask!.Result.User.IsInRole(Roles.Implementer) || authenticationStateTask!.Result.User.IsInRole(Roles.FwAdmin) || authenticationStateTask!.Result.User.IsInRole(Roles.Admin));
            await reqHandler.Init(OwnerIds);
        }
        catch (Exception exception)
        {
            DisplayMessageInUi(exception, userConfig.GetText("init_environment"), "", true);
        }
    }
    
    private async Task StartImplementTask(RequestImplTask implTask)
    {
        try
        {
            implTask.Start = DateTime.Now;
            implTask.Stop = null;
            await reqHandler.StartWorkOnImplTask(implTask, ObjAction.implement);
        }
        catch (Exception exception)
        {
            DisplayMessageInUi(exception, userConfig.GetText("start_work"), "", true);
        }
    }
}
