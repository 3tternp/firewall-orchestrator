@using FWO.Api.Data
@using FWO.Api.Client
@using FWO.Config.Api
@using FWO.Ui.Services
@using FWO.Middleware.Client

@page "/request/implementations/{ticketId?}"
@attribute [Authorize(Roles = $"{Roles.Admin}, {Roles.Implementer}, {Roles.Auditor}, {Roles.FwAdmin}")]

@inject ApiConnection apiConnection
@inject UserConfig userConfig
@inject NavigationManager NavigationManager
@inject MiddlewareClient middlewareClient

<h3>@(userConfig.GetText("implementations"))</h3>
<hr />

@if(InitComplete)
{
    <div class="form-group row">
        <label for="taskDevId" class="col-sm-1 col-form-label col-form-label-sm">@(userConfig.GetText("view")):</label>
        <div class="col-sm-4">
            @if(userConfig.ReqOwnerBased)
            {
                <Dropdown ElementType="FwoOwner" @bind-SelectedElement="selectedOwnerOpt" ElementToString="@(o => o.Name)" Elements="ownerOptions" AppendWidth="100">
                    <ElementTemplate Context="owner">
                        @owner.Name
                    </ElementTemplate>
                    <Append>
                        <button type="button" class="btn btn-sm btn-primary" style="100px" @onclick="SelectOwner">@(userConfig.GetText("select"))</button>
                    </Append>
                </Dropdown>
            }
            else
            {
                <Dropdown ElementType="Device" @bind-SelectedElement="selectedDeviceOpt" ElementToString="@(d => d.Name)" Elements="deviceOptions" AppendWidth="100">
                    <ElementTemplate Context="device">
                        @device.Name
                    </ElementTemplate>
                    <Append>
                        <button type="button" class="btn btn-sm btn-primary" style="100px" @onclick="SelectDevice">@(userConfig.GetText("select"))</button>
                    </Append>
                </Dropdown>
            }
        </div>
        
    </div>

    @if(DisplayTickets)
    {
        <DisplayTicketTable Phase="WorkflowPhases.implementation" States="states" ReqHandler="reqHandler" 
            ResetParent="Reset" StartImplPhase="StartImplementTask"/>
    }
    else
    {
        <DisplayImplTaskTable Phase="WorkflowPhases.implementation" States="states" 
            ReqHandler="reqHandler" ResetParent="Select" AllImplTasks="allImplTasks" DeviceView="true"
            StartImplPhase="StartImplementTask"/>
    }
}
else
{
    <div class="spinner-border" role="status">
        <span class="sr-only">Loading...</span>
    </div>
}

@code
{
    [CascadingParameter]
    Action<Exception?, string, string, bool> DisplayMessageInUi { get; set; } = DefaultInit.DoNothing;
    
    [CascadingParameter]
    private Task<AuthenticationState>? authenticationStateTask { get; set; }

    [Parameter]
    public string? TicketId { get; set; }

    private RequestHandler reqHandler = new ();
    private RequestStateDict states = new ();
    private List<FwoOwner> Owners = new();
    private bool InitComplete = false;

    private bool DisplayTickets = true;
    private List<RequestImplTask> allImplTasks = new ();
    private List<Device> deviceOptions = new ();
    private Device selectedDeviceOpt = new ();
    private List<FwoOwner> ownerOptions = new ();
    private FwoOwner selectedOwnerOpt = new ();


    protected override async Task OnInitializedAsync()
    {
        try
        {
            apiConnection.SetProperRole(authenticationStateTask!.Result.User, new List<string> { Roles.Admin, Roles.Implementer, Roles.FwAdmin, Roles.Auditor});
            await states.Init(apiConnection);

            if(userConfig.ReqOwnerBased)
            {
                Owners = await ModellingHandlerBase.GetOwnApps(authenticationStateTask, userConfig, apiConnection, DisplayMessageInUi);
            }
            reqHandler = new (DisplayMessageInUi, userConfig, apiConnection, middlewareClient, WorkflowPhases.implementation){};
            await Reset();
            await HandleTicketId();
            reqHandler.SetContinueEnv(ObjAction.implement);
            if(userConfig.ReqOwnerBased)
            {
                InitOwnerOptions();
            }
            else
            {
                InitDeviceOptions();
            }
            InitComplete = true;
        }
        catch (Exception exception)
        {
            DisplayMessageInUi(exception, userConfig.GetText("fetch_requests"), "", true);
        }
    }

    private void InitOwnerOptions()
    {
        FwoOwner optTicket = new (){ Id = -3, Name = userConfig.GetText("tickets")};
        FwoOwner assignedToMe = new (){ Id = -2, Name = userConfig.GetText("assigned_to_me")};
        FwoOwner allMyOwners = new (){ Id = -1, Name = userConfig.GetText("all_my_owners")};
        ownerOptions = new (Owners);
        ownerOptions.Add(optTicket);
        ownerOptions.Add(allMyOwners);
        ownerOptions.Add(assignedToMe);
        selectedOwnerOpt = allMyOwners;
    }

    private void InitDeviceOptions()
    {
        Device optTicket = new (){ Id = -1, Name = userConfig.GetText("tickets")};
        deviceOptions = new (reqHandler.Devices);
        deviceOptions.Add(optTicket);
        deviceOptions.Add(new (){ Id = 0, Name = userConfig.GetText("all_gateways") });
        selectedDeviceOpt = optTicket;
    }

    private async Task HandleTicketId()
    {
        if(long.TryParse(TicketId, out long ticketId))
        {
            string newPhase = await reqHandler.HandleExtTicketId(WorkflowPhases.implementation, ticketId);
            if(newPhase != "")
            {
                NavigationManager.NavigateTo($"/request/{newPhase.ToString()}s/{TicketId}");
            }
        }
    }
    private async Task Select()
    {
        if(userConfig.ReqOwnerBased)
        {
            await SelectOwner();
        }
        else
        {
            await SelectDevice();
        }
    }

    private async Task SelectOwner()
    {
        try
        {
            allImplTasks = new ();
            if(selectedDeviceOpt.Id != -3)
            {
                foreach(var ticket in reqHandler.TicketList)
                {
                    foreach(var reqTask in ticket.Tasks)
                    {
                        foreach(var implTask in reqTask.ImplementationTasks)
                        {
                            if (selectedOwnerOpt.Id == -1 || (selectedOwnerOpt.Id == -2 && implTask.CurrentHandler?.DbId == userConfig.User.DbId)
                                || (selectedOwnerOpt.Id > 0 && reqTask.Owners.FirstOrDefault(o => o.Owner.Id == selectedOwnerOpt.Id) != null))
                            {
                                implTask.TicketId = ticket.Id;
                                implTask.ReqTaskId = reqTask.Id;
                                allImplTasks.Add(implTask);
                            }
                        }
                    }
                }
            }
            DisplayTickets = (selectedOwnerOpt.Id == -3);
            await Reset();
            StateHasChanged();
        }
        catch (Exception exception)
        {
            DisplayMessageInUi(exception, userConfig.GetText("select_owner"), "", true);
        }
    }

    private async Task SelectDevice()
    {
        try
        {
            allImplTasks = new ();
            if(selectedDeviceOpt.Id != -1)
            {
                foreach(var ticket in reqHandler.TicketList)
                {
                    foreach(var reqTask in ticket.Tasks)
                    {
                        foreach(var implTask in reqTask.ImplementationTasks)
                        {
                            if (selectedDeviceOpt.Id == 0 || implTask.DeviceId == selectedDeviceOpt.Id)
                            {
                                implTask.TicketId = ticket.Id;
                                implTask.ReqTaskId = reqTask.Id;
                                allImplTasks.Add(implTask);
                            }
                        }
                    }
                }
            }
            DisplayTickets = (selectedDeviceOpt.Id == -1);
            await Reset();
            StateHasChanged();
        }
        catch (Exception exception)
        {
            DisplayMessageInUi(exception, userConfig.GetText("select_device"), "", true);
        }
    }

    private async Task Reset()
    {
        try
        {
            reqHandler.ReadOnlyMode = !(authenticationStateTask!.Result.User.IsInRole(Roles.Implementer) || authenticationStateTask!.Result.User.IsInRole(Roles.FwAdmin) || authenticationStateTask!.Result.User.IsInRole(Roles.Admin));
            await reqHandler.Init(Owners.ConvertAll(x => x.Id));
        }
        catch (Exception exception)
        {
            DisplayMessageInUi(exception, userConfig.GetText("init_environment"), "", true);
        }
    }
    
    private async Task StartImplementTask(RequestImplTask implTask)
    {
        try
        {
            implTask.Start = DateTime.Now;
            implTask.Stop = null;
            await reqHandler.StartWorkOnImplTask(implTask, ObjAction.implement);
        }
        catch (Exception exception)
        {
            DisplayMessageInUi(exception, userConfig.GetText("start_work"), "", true);
        }
    }
}
