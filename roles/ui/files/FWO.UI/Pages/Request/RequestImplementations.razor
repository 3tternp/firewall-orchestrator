@using BlazorTable
@using FWO.Api.Data
@using FWO.Api.Client
@using FWO.Config.Api
@using FWO.Ui.Services

@page "/request/implementations"
@attribute [Authorize(Roles = "admin, implementer, auditor, fw-admin")]

@inject ApiConnection apiConnection
@inject UserConfig userConfig

<h3>@(userConfig.GetText("implementations"))</h3>
<hr />
<DisplayOverview Phase="WorkflowPhases.implementation" @bind-Requests="requests" ShowTicketDetails="ShowTicketDetails" 
    StateMatrix ="stateMatrix" States="states"></DisplayOverview>

<DisplayTicket Phase="WorkflowPhases.implementation" StartImplPhase="StartImplementation" ContinueImplPhase="ImplementTask" 
    @bind-Display="ShowTicketMode" @bind-ImplementMode="ImplementTaskMode" @bind-Ticket="actTicket" AllImplTasks="allImplTasks" 
    StateMatrix ="stateMatrix" States="states" @bind-Requests="requests"></DisplayTicket>


@code
{
    [CascadingParameter]
    Action<Exception?, string, string, bool>? DisplayMessageInUi { get; set; }
    
    private List<RequestTicket> requests = new List<RequestTicket>();

    private bool ShowTicketMode = false;
    private bool ImplementTaskMode = false;
  
    private RequestTicket actTicket = new RequestTicket();
    private List<ImplementationTask> allImplTasks = new List<ImplementationTask>();

    private RequestStateDict states = new RequestStateDict();
    private List<int> actPossibleStates = new List<int>();
    private StateMatrix stateMatrix = new StateMatrix();


    protected override async Task OnInitializedAsync()
    {
        try
        {
            await stateMatrix.Init(WorkflowPhases.implementation, apiConnection);
            await states.Init(apiConnection);

            var Variables = new
            {
                from_state = stateMatrix.LowestInputState,
                to_state = stateMatrix.LowestEndState,
            };
            requests = await apiConnection.SendQueryAsync<List<RequestTicket>>(FWO.Api.Client.Queries.RequestQueries.getTickets, Variables);
        }
        catch (Exception exception)
        {
            DisplayMessageInUi!(exception, userConfig.GetText("fetch_requests"), "", true);
        }
    }

    private async Task ShowTicketDetails(RequestTicket ticket)
    {
        actTicket = new RequestTicket(ticket);
        allImplTasks = new List<ImplementationTask>();
        foreach(var reqTask in actTicket.Tasks)
        {
            foreach(var implTask in reqTask.ImplementationTasks)
            {
                implTask.ReqTaskId = reqTask.Id;
                allImplTasks.Add(implTask);
            }
        }
        ShowTicketMode = true;
        StateHasChanged();
    }
    
    private async Task StartImplementation(ImplementationTask task)
    {
        task.Start = DateTime.Now;
        task.CurrentHandler = userConfig.User;
        actPossibleStates = stateMatrix.getAllowedTransitions(task.StateId);
        if(actPossibleStates.Count == 1 && actPossibleStates[0] >= stateMatrix.LowestStartedState && actPossibleStates[0] < stateMatrix.LowestEndState)
        {
            task.StateId = actPossibleStates[0];
        }
        await UpdateImplTaskStateInDb(task);
        List<int> taskStates = new List<int>();
        foreach (RequestTask reqTask in actTicket.Tasks)
        {
            foreach(var implTask in reqTask.ImplementationTasks)
            {
                taskStates.Add(implTask.StateId);
            }
        }
        actTicket.StateId = stateMatrix.getDerivedStateFromSubStates(taskStates);
        await UpdateTicketStateInDb();
        await ImplementTask(task);
    }

    private async Task ImplementTask(ImplementationTask task)
    {
        ImplementTaskMode = true;
        StateHasChanged();
    }

    private async Task UpdateTicketStateInDb()
    {
        try
        {           
            if (actTicket.StateId >= stateMatrix.LowestEndState)
            {
                actTicket.CompletionDate = DateTime.Now;
            }
            // Update existing ticket state
            var Variables = new
            {
                id = actTicket.Id,
                state = actTicket.StateId,
                closed = actTicket.CompletionDate
            };
            int udId = (await apiConnection.SendQueryAsync<ReturnId>(FWO.Api.Client.Queries.RequestQueries.updateTicketState, Variables)).UpdatedId;
            if(udId != actTicket.Id)
            {
                DisplayMessageInUi!(null, userConfig.GetText("save_request"), userConfig.GetText("E8002"), true);
            }
            else
            {
                requests[requests.FindIndex(x => x.Id == actTicket.Id)] = actTicket;
            }
        }
        catch (Exception exception)
        {
            DisplayMessageInUi!(exception, userConfig.GetText("save_request"), "", true);
        }
    }

    private async Task UpdateImplTaskStateInDb(ImplementationTask task)
    {
        try
        {
            var Variables = new
            {
                id = task.Id,
                state = task.StateId,
                start = task.Start,
                stop = task.Stop,
                handler = task.CurrentHandler?.DbId
            };
            int udId = (await apiConnection.SendQueryAsync<ReturnId>(FWO.Api.Client.Queries.RequestQueries.updateImplementationTaskState, Variables)).UpdatedId;
            if(udId != task.Id)
            {
                DisplayMessageInUi!(null, userConfig.GetText("save_task"), userConfig.GetText("E8004"), true);
            }
        }
        catch (Exception exception)
        {
            DisplayMessageInUi!(exception, userConfig.GetText("save_task"), "", true);
        }
    }
}
