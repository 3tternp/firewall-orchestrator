@using FWO.Api.Data
@using FWO.Api.Client
@using FWO.Config.Api
@using FWO.Ui.Services

@page "/request/implementations"
@attribute [Authorize(Roles = "admin, implementer, auditor, fw-admin")]

@inject ApiConnection apiConnection
@inject UserConfig userConfig

<h3>@(userConfig.GetText("implementations"))</h3>
<hr />

@if(InitComplete)
{
    <div class="form-group row">
        <label for="taskDevId" class="col-sm-1 col-form-label col-form-label-sm">@(userConfig.GetText("view")):</label>
        <div class="col-sm-2">
            <select id="taskDevId" class="form-control form-control-sm" @bind="DeviceId">
                <option value="-1">@(userConfig.GetText("tickets"))</option>
                <option value="0">@(userConfig.GetText("all_gateways"))</option>
                @foreach (Device device in devices)
                {
                    <option value="@device.Id">@(device.Name)</option>
                }
            </select>
        </div>
        <button class="btn btn-sm btn-primary" @onclick="SelectDevice">@(userConfig.GetText("select"))</button>
    </div>

    @if(DisplayTickets)
    {
        <DisplayTicketTable Phase="WorkflowPhases.implementation" StateMatrix ="stateMatrix" States="states" ReqHandler="reqHandler" 
            ResetParent="Reset" StartImplPhase="StartImplementTask"/>
    }
    else
    {
        <DisplayImplTaskTable Phase="WorkflowPhases.implementation" StateMatrix="stateMatrix" States="states" 
            ReqHandler="reqHandler" ResetParent="Reset" AllImplTasks="allImplTasks" DeviceView="true"
            StartImplPhase="StartImplementTask"/>
    }
}

@code
{
    [CascadingParameter]
    Action<Exception?, string, string, bool>? DisplayMessageInUi { get; set; }
    
    private RequestHandler reqHandler;
    private RequestDbAccess dbAcc;
    private List<Device> devices = new List<Device>();
    private RequestStateDict states = new RequestStateDict();
    private StateMatrix stateMatrix = new StateMatrix();
    private bool InitComplete = false;

    private bool DisplayTickets = true;
    private int DeviceId = -1;
    private List<ImplementationTask> allImplTasks = new List<ImplementationTask>();


    protected override async Task OnInitializedAsync()
    {
        try
        {
            await stateMatrix.Init(WorkflowPhases.implementation, apiConnection);
            await states.Init(apiConnection);

            dbAcc = new RequestDbAccess(DisplayMessageInUi, userConfig, apiConnection){};
            devices = await apiConnection.SendQueryAsync<List<Device>>(FWO.Api.Client.Queries.DeviceQueries.getDeviceDetails);
            reqHandler = new RequestHandler(DisplayMessageInUi, userConfig, dbAcc, stateMatrix, devices, WorkflowPhases.implementation){};
            await reqHandler.Init();
            reqHandler.SetContinueEnv(ObjAction.implement);
    
            InitComplete = true;
        }
        catch (Exception exception)
        {
            DisplayMessageInUi!(exception, userConfig.GetText("fetch_requests"), "", true);
        }
    }

    private async Task SelectDevice()
    {
        allImplTasks = new List<ImplementationTask>();
        if(DeviceId != -1)
        {
            foreach(var ticket in reqHandler.TicketList)
            {
                foreach(var reqTask in ticket.Tasks)
                {
                    foreach(var implTask in reqTask.ImplementationTasks)
                    {
                        if (DeviceId == 0 || implTask.DeviceId == DeviceId)
                        {
                            implTask.TicketId = ticket.Id;
                            implTask.ReqTaskId = reqTask.Id;
                            allImplTasks.Add(implTask);
                        }
                    }
                }
            }
        }
        DisplayTickets = (DeviceId == -1);
    }

    private async Task Reset()
    {
        await reqHandler.Init();
    }
    
    private async Task StartImplementTask(ImplementationTask implTask)
    {
        implTask.Start = DateTime.Now;
        await reqHandler.StartWorkOnImplTask(implTask, ObjAction.implement);
    }
}
