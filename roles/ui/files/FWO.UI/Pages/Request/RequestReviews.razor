@using FWO.Api.Data
@using FWO.Api.Client
@using FWO.Config.Api
@using FWO.Ui.Services

@page "/request/reviews"
@attribute [Authorize(Roles = "admin, reviewer, auditor, fw-admin")]

@inject ApiConnection apiConnection
@inject UserConfig userConfig

<h3>@(userConfig.GetText("reviews"))</h3>
<hr />
@if(InitComplete)
{
    <DisplayTicketTable Phase="WorkflowPhases.review" States="states" ReqHandler="reqHandler" 
        ResetParent="Reset" StartImplPhase="StartReviewTask"/>
}


@code
{
    [CascadingParameter]
    Action<Exception?, string, string, bool>? DisplayMessageInUi { get; set; }
    
    private RequestHandler reqHandler;
    private RequestStateDict states = new RequestStateDict();
    private bool InitComplete = false;


    protected override async Task OnInitializedAsync()
    {
        try
        {
            await states.Init(apiConnection);

            reqHandler = new RequestHandler(DisplayMessageInUi, userConfig, apiConnection, WorkflowPhases.review){};
            await reqHandler.Init();
            reqHandler.SetContinueEnv(ObjAction.review);
    
            InitComplete = true;
        }
        catch (Exception exception)
        {
            DisplayMessageInUi!(exception, userConfig.GetText("fetch_requests"), "", true);
        }
    }

    private async Task Reset()
    {
        await reqHandler.Init();
    }
    
    private async Task StartReviewTask(RequestImplTask implTask)
    {
        await reqHandler.StartWorkOnImplTask(implTask, ObjAction.review);
    }
}
