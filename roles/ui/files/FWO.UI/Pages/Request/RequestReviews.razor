@using FWO.Api.Data
@using FWO.Api.Client
@using FWO.Config.Api
@using FWO.Ui.Services

@page "/request/reviews"
@attribute [Authorize(Roles = "admin, reviewer, auditor, fw-admin")]

@inject ApiConnection apiConnection
@inject UserConfig userConfig

<h3>@(userConfig.GetText("reviews"))</h3>
<hr />
@if(InitComplete)
{
    <DisplayTicketTable Phase="WorkflowPhases.review" StateMatrix ="stateMatrix" States="states" ReqHandler="reqHandler" 
        ResetParent="Reset" AllImplTasks="allImplTasks"
        ShowTicketDetails="ShowTicketDetails" StartImplPhase="StartReviewTask"/>
}


@code
{
    [CascadingParameter]
    Action<Exception?, string, string, bool>? DisplayMessageInUi { get; set; }
    
    private RequestHandler reqHandler;
    private RequestDbAccess dbAcc;
    
    private RequestTicket actTicket = new RequestTicket();
    private List<ImplementationTask> allImplTasks = new List<ImplementationTask>();
    private List<Device> devices = new List<Device>();

    private RequestStateDict states = new RequestStateDict();
    private List<int> actPossibleStates = new List<int>();
    private StateMatrix stateMatrix = new StateMatrix();
    private bool InitComplete = false;


    protected override async Task OnInitializedAsync()
    {
        try
        {
            await stateMatrix.Init(WorkflowPhases.review, apiConnection);
            await states.Init(apiConnection);

            dbAcc = new RequestDbAccess(DisplayMessageInUi, userConfig, apiConnection){};
            devices = await apiConnection.SendQueryAsync<List<Device>>(FWO.Api.Client.Queries.DeviceQueries.getDeviceDetails);
            reqHandler = new RequestHandler(DisplayMessageInUi, userConfig, dbAcc, stateMatrix, devices, WorkflowPhases.review){};
            await reqHandler.Init();
            reqHandler.SetContinueEnv(ObjAction.review);
    
            InitComplete = true;
        }
        catch (Exception exception)
        {
            DisplayMessageInUi!(exception, userConfig.GetText("fetch_requests"), "", true);
        }
    }

    private async Task Reset()
    {
        // await reqHandler.Init();
    }

    private async Task ShowTicketDetails(RequestTicket ticket)
    {
        reqHandler.SetTicketEnv(ticket);
        allImplTasks = new List<ImplementationTask>();
        foreach(var reqTask in reqHandler.ActTicket.Tasks)
        {
            foreach(var implTask in reqTask.ImplementationTasks)
            {
                implTask.ReqTaskId = reqTask.Id;
                allImplTasks.Add(implTask);
            }
        }
        reqHandler.SetTicketOpt(ObjAction.display);
    }
    
    private async Task StartReviewTask(ImplementationTask task)
    {
        task.CurrentHandler = userConfig.User;
        actPossibleStates = stateMatrix.getAllowedTransitions(task.StateId);
        if(actPossibleStates.Count == 1 && actPossibleStates[0] >= stateMatrix.LowestStartedState && actPossibleStates[0] < stateMatrix.LowestEndState)
        {
            task.StateId = actPossibleStates[0];
        }
        await dbAcc.UpdateImplTaskStateInDb(task);
        await dbAcc.UpdateTicketStateFromImplTasks(reqHandler.ActTicket, reqHandler.TicketList, stateMatrix);
        reqHandler.SetImplTaskOpt(ObjAction.review);
    }
}
