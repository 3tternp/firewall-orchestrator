@using FWO.Api.Data
@using FWO.Api.Client
@using FWO.Config.Api
@using FWO.Ui.Services

@page "/request/reviews"
@attribute [Authorize(Roles = "admin, reviewer, auditor, fw-admin")]

@inject ApiConnection apiConnection
@inject UserConfig userConfig

<h3>@(userConfig.GetText("reviews"))</h3>
<hr />
<DisplayOverview Phase="WorkflowPhases.review" Requests="requests" ShowTicketDetails="ShowTicketDetails" 
    StateMatrix ="stateMatrix" States="states"></DisplayOverview>

<DisplayTicket Phase="WorkflowPhases.review" DbAcc="dbAcc" StateMatrix ="stateMatrix" States="states"
    ResetParent="Reset" StartImplPhase="StartReviewTask" SetContinueEnv="ContReviewTask" 
    @bind-Display="ShowTicketMode" ImplementMode="ReviewTaskMode"
    AllImplTasks="allImplTasks" @bind-Ticket="actTicket" @bind-Requests="requests"></DisplayTicket>


@code
{
    [CascadingParameter]
    Action<Exception?, string, string, bool>? DisplayMessageInUi { get; set; }
    
    private RequestDbAccess dbAcc;
    private List<RequestTicket> requests = new List<RequestTicket>();

    private bool ShowTicketMode = false;
    private bool ReviewTaskMode = false;
  
    private RequestTicket actTicket = new RequestTicket();
    private List<ImplementationTask> allImplTasks = new List<ImplementationTask>();

    private RequestStateDict states = new RequestStateDict();
    private List<int> actPossibleStates = new List<int>();
    private StateMatrix stateMatrix = new StateMatrix();


    protected override async Task OnInitializedAsync()
    {
        try
        {
            await stateMatrix.Init(WorkflowPhases.review, apiConnection);
            await states.Init(apiConnection);
            dbAcc = new RequestDbAccess(DisplayMessageInUi, userConfig, apiConnection){};
            requests = await dbAcc.FetchTickets(stateMatrix);
        }
        catch (Exception exception)
        {
            DisplayMessageInUi!(exception, userConfig.GetText("fetch_requests"), "", true);
        }
    }

    private async Task Reset()
    {
        ShowTicketMode = false;
        ReviewTaskMode = false;
        requests = await dbAcc.FetchTickets(stateMatrix);
        StateHasChanged();
    }

    private async Task ShowTicketDetails(RequestTicket ticket)
    {
        actTicket = ticket;
        allImplTasks = new List<ImplementationTask>();
        foreach(var reqTask in actTicket.Tasks)
        {
            foreach(var implTask in reqTask.ImplementationTasks)
            {
                implTask.ReqTaskId = reqTask.Id;
                allImplTasks.Add(implTask);
            }
        }
        ShowTicketMode = true;
        StateHasChanged();
    }
    
    private async Task StartReviewTask(ImplementationTask task)
    {
        task.CurrentHandler = userConfig.User;
        actPossibleStates = stateMatrix.getAllowedTransitions(task.StateId);
        if(actPossibleStates.Count == 1 && actPossibleStates[0] >= stateMatrix.LowestStartedState && actPossibleStates[0] < stateMatrix.LowestEndState)
        {
            task.StateId = actPossibleStates[0];
        }
        await dbAcc.UpdateImplTaskStateInDb(task);
        await dbAcc.UpdateTicketStateFromImplTasks(actTicket, requests, stateMatrix);
        await ContReviewTask();
    }

    private async Task ContReviewTask()
    {
        ReviewTaskMode = true;
        StateHasChanged();
    }
}
