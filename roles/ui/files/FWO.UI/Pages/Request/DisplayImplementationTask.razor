@using FWO.Api.Client
@using FWO.Api.Data
@using FWO.Config.Api
@using FWO.Ui.Services

@attribute [Authorize(Roles = "admin, requester, approver, planner, implementer, reviewer, auditor, fw-admin")]

@inject ApiConnection apiConnection
@inject UserConfig userConfig


<PopUp Title="@(userConfig.GetText("implementation") + ": " + ImplTask.Id)" Show="@Display" XLarge="true" OnClose="() => Close()">
    <Body>
        @if (Display)
        {
            <form>
                <div class="form-group row">
                    <label for="taskDevId" class="col-sm-1 col-form-label col-form-label-sm">@(userConfig.GetText("device"))*:</label>
                    @if (EditMode)
                    {
                        <div class="col-sm-2">
                            <select id="taskDevId" class="form-control form-control-sm" @bind="ImplTask.DeviceId">
                                @foreach (Device device in devices)
                                {
                                    <option value="@device.Id">@(device.Name)</option>
                                }
                            </select>
                        </div>
                    }
                    else
                    {
                        <label class="col-sm-2">@(ImplTask.DeviceId != null && ImplTask.DeviceId != 0 ? devices[devices.FindIndex(x => x.Id == ImplTask.DeviceId)].Name : "")</label>
                    }
                    <label for="taskReqAction" class="col-sm-1 col-form-label col-form-label-sm">@(userConfig.GetText("action"))*:</label>
                    @if (EditMode)
                    {
                        <div class="col-sm-2">
                            <select id="taskReqAction" class="form-control form-control-sm" @bind="ImplTask.ImplAction">
                                @foreach (string action in Enum.GetNames(typeof(RequestAction)))
                                {
                                    <option value="@action">@(userConfig.GetText(action))</option>
                                }
                            </select>
                        </div>
                    }
                    else
                    {
                        <label class="col-sm-2">@(userConfig.GetText(ImplTask.ImplAction))</label>
                    }
                    <label for="taskState" class="col-sm-1 col-form-label col-form-label-sm">@(userConfig.GetText("state")):</label>
                    <label class="col-sm-2">@States.Name[ImplTask.StateId]</label>
                    <label for="taskPlanner" class="col-sm-1 col-form-label col-form-label-sm">@(userConfig.GetText("implementer")):</label>
                    <label class="col-sm-2">@ImplTask.CurrentHandler?.Name</label>
                </div>
                <div class="form-group row">
                    <label for="taskRuleAction" class="col-sm-1 col-form-label col-form-label-sm">@(userConfig.GetText("rule_action")):</label>
                    @if (EditMode)
                    {
                        <div class="col-sm-2">
                            <select id="taskRuleAction" class="form-control form-control-sm" @bind="ImplTask.RuleAction">
                                @foreach (var action in ruleActions)
                                {
                                    <option value="@action.Id">@(action.Name)</option>
                                }
                            </select>
                        </div>
                    }
                    else
                    {
                        <label class="col-sm-2">@(((ImplTask.RuleAction != null) ? ruleActions.Find(x => x.Id == ImplTask.RuleAction)?.Name : ""))</label>
                    }
                    <label for="taskRuleTracking" class="col-sm-1 col-form-label col-form-label-sm">@(userConfig.GetText("track")):</label>
                    @if (EditMode)
                    {
                        <div class="col-sm-2">
                            <select id="taskRuleTracking" class="form-control form-control-sm" @bind="ImplTask.Tracking">
                                @foreach (var track in trackings)
                                {
                                    <option value="@track.Id">@(track.Name)</option>
                                }
                            </select>
                        </div>
                    }
                    else
                    {
                        <label class="col-sm-2">@(((ImplTask.Tracking != null) ? trackings.Find(x => x.Id == ImplTask.Tracking)?.Name : ""))</label>
                    }
                    <label for="taskRuleValidFrom" class="col-sm-1 col-form-label col-form-label-sm">@(userConfig.GetText("valid_from")):</label>
                    @if (EditMode)
                    {
                        <div class="col-sm-2">
                            <input id="taskRuleValidFrom" type="date" class="form-control form-control-sm" @bind="ImplTask.TargetBeginDate" />
                        </div>
                    }
                    else
                    {
                        <label class="col-sm-2">@ImplTask.TargetBeginDate?.ToString("d")</label>
                    }
                    <label for="taskRuleValidTo" class="col-sm-1 col-form-label col-form-label-sm">@(userConfig.GetText("valid_to")):</label>
                    @if (EditMode)
                    {
                        <div class="col-sm-2">
                            <input id="taskRuleValidTo" type="date" class="form-control form-control-sm" @bind="ImplTask.TargetEndDate" />
                        </div>
                    }
                    else
                    {
                        <label class="col-sm-2">@ImplTask.TargetEndDate?.ToString("d")</label>
                    }
                </div>
                @if(ReqTask.TaskType == TaskType.access.ToString())
                {
                    <DisplayAccessElements @bind-Sources="actSources" @bind-Destinations="actDestinations" @bind-Services="actServices" 
                        TaskId="ReqTask.Id" EditMode="EditMode"></DisplayAccessElements>
                }
                <div class="form-group row">
                    <label for="taskComment" class="col-sm-1 col-form-label col-form-label-sm">@(userConfig.GetText("comment")):</label>
                    @if (ImplementMode)
                    {
                        <div class="col-sm-11">
                            <input id="taskComment" type="text" class="form-control form-control-sm" @bind="ImplTask.FwAdminComments" />
                        </div>
                    }
                    else
                    {
                        <label class="col-sm-11">@ImplTask.FwAdminComments</label>
                    }
                </div>
            </form>
        }
    </Body>
    <Footer>
        <div class="btn-group">
            @if (EditMode)
            {
                <AuthorizeView Roles="admin, planner, fw-admin">
                    <Authorized>
                        <button class="btn btn-sm btn-primary" @onclick:preventDefault @onclick="SaveImplTask">@(userConfig.GetText("save"))</button>
                    </Authorized>
                    <NotAuthorized>
                        <button class="btn btn-sm btn-primary" disabled>@(userConfig.GetText("save"))</button>
                    </NotAuthorized> 
                </AuthorizeView>
            }
            else if (ImplementMode)
            {
                <AuthorizeView Roles="admin, implementer, reviewer, fw-admin">
                    <Authorized>
                        <button class="btn btn-sm btn-primary" @onclick:preventDefault @onclick="InitPromoteImplTask">@(userConfig.GetText("promote_task"))</button>
                    </Authorized>
                    <NotAuthorized>
                        <button class="btn btn-sm btn-primary" disabled>@(userConfig.GetText("promote_task"))</button>
                    </NotAuthorized> 
                </AuthorizeView>
            }
            <button class="btn btn-sm btn-secondary" @onclick="Close">@(userConfig.GetText("cancel"))</button>
        </div>
    </Footer>
</PopUp>

<PromoteObject @bind-Promote="PromoteImplTaskMode" Save="ConfPromoteImplTask" StatefulObject="ImplTask" StateMatrix="StateMatrix" States="States"></PromoteObject>

@code
{
    [CascadingParameter]
    Action<Exception?, string, string, bool>? DisplayMessageInUi { get; set; }
    
    [Parameter]
    public WorkflowPhases Phase { get; set; } = WorkflowPhases.planning;

    [Parameter]
    public RequestDbAccess DbAcc { get; set; }

    [Parameter]
    public StateMatrix StateMatrix { get; set; } = new StateMatrix();

    [Parameter]
    public RequestStateDict States { get; set; } = new RequestStateDict();

    [Parameter]
    public bool Display { get; set; } = false;

    [Parameter]
    public EventCallback<bool> DisplayChanged { get; set; }

    [Parameter]
    public bool EditMode { get; set; } = false;

    [Parameter]
    public EventCallback<bool> EditModeChanged { get; set; }

    [Parameter]
    public bool AddMode { get; set; } = false;

    [Parameter]
    public EventCallback<bool> AddModeChanged { get; set; }

    [Parameter]
    public bool ImplementMode { get; set; } = false;

    [Parameter]
    public EventCallback<bool> ImplementModeChanged { get; set; }

    [Parameter]
    public Func<ImplementationTask, Task>? AddImplTask { get; set; }
    
    [Parameter]
    public Func<ImplementationTask, Task>? ChangeImplTask { get; set; }

    [Parameter]
    public Func<StatefulObject, Task>? PromoteImplTask { get; set; }

    [Parameter]
    public ImplementationTask ImplTask { get; set; } = new ImplementationTask();

    [Parameter]
    public EventCallback<ImplementationTask> ImplTaskChanged { get; set; }

    [Parameter]
    public RequestTask ReqTask { get; set; } = new RequestTask();

    [Parameter]
    public EventCallback<RequestTask> ReqTaskChanged { get; set; }

    [Parameter]
    public RequestTicket Ticket { get; set; } = new RequestTicket();

    [Parameter]
    public EventCallback<RequestTicket> TicketChanged { get; set; }

    [Parameter]
    public List<RequestTicket> Requests { get; set; } = new List<RequestTicket>();

    [Parameter]
    public EventCallback<List<RequestTicket>> RequestsChanged { get; set; }


    private List<RuleAction> ruleActions = new List<RuleAction>();
    private List<Tracking> trackings = new List<Tracking>();
    private List<Device> devices = new List<Device>();
    
    private ImplementationElement actImplElement = new ImplementationElement();
    private List<int> possibleStates = new List<int>();
    private bool PromoteImplTaskMode = false;

    List<NwObjectElement> actSources = new List<NwObjectElement>();
    List<NwObjectElement> actDestinations = new List<NwObjectElement>();
    List<NwServiceElement> actServices = new List<NwServiceElement>();


    protected override async Task OnInitializedAsync()
    {
        try
        {
            ruleActions = await apiConnection.SendQueryAsync<List<RuleAction>>(FWO.Api.Client.Queries.StmQueries.getRuleActions);
            trackings = await apiConnection.SendQueryAsync<List<Tracking>>(FWO.Api.Client.Queries.StmQueries.getTracking);
            devices = await apiConnection.SendQueryAsync<List<Device>>(FWO.Api.Client.Queries.DeviceQueries.getDeviceDetails);
        }
        catch (Exception exception)
        {
            DisplayMessageInUi!(exception, userConfig.GetText("fetch_data"), "", true);
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        if (Display)
        {
            InitElements();
        }
    }

    private void InitElements()
    {
        actSources = ImplTask.getNwObjectElements(AccessField.source);
        actDestinations = ImplTask.getNwObjectElements(AccessField.destination);
        actServices = ImplTask.getServiceElements();
    }

    private void Close()
    {
        Display = false;
        EditMode = false;
        AddMode = false;
    }

    private void UpdateElements()
    {
        foreach(var oldElem in ImplTask.ImplElements.Where(x => x.Id > 0 && (x.Field == AccessField.source.ToString() || 
            x.Field == AccessField.destination.ToString() || x.Field == AccessField.service.ToString())))
        {
            if(actSources.FirstOrDefault(x => x.ElemId == oldElem.Id) == null && 
                actDestinations.FirstOrDefault(x => x.ElemId == oldElem.Id) == null && 
                actServices.FirstOrDefault(x => x.ElemId == oldElem.Id) == null)
            {
                ImplTask.RemovedElements.Add(oldElem);
            }
        }

        ImplTask.ImplElements.RemoveAll(x => (x.Field == AccessField.source.ToString() || 
            x.Field == AccessField.destination.ToString() || x.Field == AccessField.service.ToString()));

        foreach(var source in actSources)
        {
            ImplTask.ImplElements.Add(source.ToImplElement(AccessField.source));
        }
        foreach(var destination in actDestinations)
        {
            ImplTask.ImplElements.Add(destination.ToImplElement(AccessField.destination));
        }
        foreach(var service in actServices)
        {
            ImplTask.ImplElements.Add(service.ToImplElement(AccessField.service));
        }
    }

    private async Task SaveImplTask()
    {
        try
        {
            if (ImplTask.Sanitize())
            {
                DisplayMessageInUi!(null, userConfig.GetText("save_task"), userConfig.GetText("U0001"), true);
            }
            UpdateElements();
            if (CheckTaskValues())
            {
                if (AddMode)
                {
                    await AddImplTask(ImplTask);
                }
                else
                {
                    await ChangeImplTask(ImplTask);
                }
                Close();
            } 
        }
        catch (Exception exception)
        {
            DisplayMessageInUi!(exception, userConfig.GetText("save_task"), "", true);
        }
    }

    private bool CheckTaskValues()
    {
        foreach (var implElem in ImplTask.ImplElements)
        {
            if (implElem.NetworkId == null && implElem.ServiceId == null)
            {
                if (implElem.Port < 1 || implElem.Port > 65535)
                {
                    DisplayMessageInUi!(null, userConfig.GetText("save_element"), userConfig.GetText("E5103"), true);
                    return false;
                }
            }
        }
        return true;
    }

    private async Task InitPromoteImplTask()
    {
        PromoteImplTaskMode = true;
    }

    private async Task ConfPromoteImplTask(StatefulObject implTask)
    {
        PromoteImplTaskMode = false;
        await PromoteImplTask(implTask);
    }
}
