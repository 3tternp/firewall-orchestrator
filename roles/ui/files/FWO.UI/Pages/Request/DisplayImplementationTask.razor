@using FWO.Api.Client
@using FWO.Api.Data
@using FWO.Config.Api
@using FWO.Ui.Services

@attribute [Authorize(Roles = "admin, requester, approver, planner, implementer, auditor, fw-admin")]

@inject ApiConnection apiConnection
@inject UserConfig userConfig


<PopUp Title="@(userConfig.GetText("implementation") + ": " + ImplTask.Id)" Show="@Display" XLarge="true" OnClose="() => Close()">
    <Body>
        @if (Display)
        {
            <form>
                <div class="form-group row">
                    <label for="taskDevId" class="col-sm-1 col-form-label col-form-label-sm">@(userConfig.GetText("device"))*:</label>
                    @if (EditMode)
                    {
                        <div class="col-sm-2">
                            <select id="taskDevId" class="form-control form-control-sm" @bind="ImplTask.DeviceId">
                                @foreach (Device device in devices)
                                {
                                    <option value="@device.Id">@(device.Name)</option>
                                }
                            </select>
                        </div>
                    }
                    else
                    {
                        <label class="col-sm-2">@(ImplTask.DeviceId != null && ImplTask.DeviceId != 0 ? devices[devices.FindIndex(x => x.Id == ImplTask.DeviceId)].Name : "")</label>
                    }
                    <label for="taskReqAction" class="col-sm-1 col-form-label col-form-label-sm">@(userConfig.GetText("action"))*:</label>
                    @if (EditMode)
                    {
                        <div class="col-sm-2">
                            <select id="taskReqAction" class="form-control form-control-sm" @bind="ImplTask.ImplAction">
                                @foreach (string action in Enum.GetNames(typeof(RequestAction)))
                                {
                                    <option value="@action">@(userConfig.GetText(action))</option>
                                }
                            </select>
                        </div>
                    }
                    else
                    {
                        <label class="col-sm-2">@(userConfig.GetText(ImplTask.ImplAction))</label>
                    }
                    <label for="taskState" class="col-sm-1 col-form-label col-form-label-sm">@(userConfig.GetText("state")):</label>
                    <label class="col-sm-2">@States.Name[ImplTask.StateId]</label>
                    <label for="taskPlanner" class="col-sm-1 col-form-label col-form-label-sm">@(userConfig.GetText("implementer")):</label>
                    <label class="col-sm-2">@ImplTask.CurrentHandler?.Name</label>
                </div>
                <div class="form-group row">
                    <label for="taskRuleAction" class="col-sm-1 col-form-label col-form-label-sm">@(userConfig.GetText("rule_action")):</label>
                    @if (EditMode)
                    {
                        <div class="col-sm-2">
                            <select id="taskRuleAction" class="form-control form-control-sm" @bind="ImplTask.RuleAction">
                                @foreach (var action in ruleActions)
                                {
                                    <option value="@action.Id">@(action.Name)</option>
                                }
                            </select>
                        </div>
                    }
                    else
                    {
                        <label class="col-sm-2">@(((ImplTask.RuleAction != null) ? ruleActions.Find(x => x.Id == ImplTask.RuleAction)?.Name : ""))</label>
                    }
                    <label for="taskRuleTracking" class="col-sm-1 col-form-label col-form-label-sm">@(userConfig.GetText("track")):</label>
                    @if (EditMode)
                    {
                        <div class="col-sm-2">
                            <select id="taskRuleTracking" class="form-control form-control-sm" @bind="ImplTask.Tracking">
                                @foreach (var track in trackings)
                                {
                                    <option value="@track.Id">@(track.Name)</option>
                                }
                            </select>
                        </div>
                    }
                    else
                    {
                        <label class="col-sm-2">@(((ImplTask.Tracking != null) ? trackings.Find(x => x.Id == ImplTask.Tracking)?.Name : ""))</label>
                    }
                    <label for="taskRuleValidFrom" class="col-sm-1 col-form-label col-form-label-sm">@(userConfig.GetText("valid_from")):</label>
                    @if (EditMode)
                    {
                        <div class="col-sm-2">
                            <input id="taskRuleValidFrom" type="date" class="form-control form-control-sm" @bind="ImplTask.TargetBeginDate" />
                        </div>
                    }
                    else
                    {
                        <label class="col-sm-2">@ImplTask.TargetBeginDate?.ToString("d")</label>
                    }
                    <label for="taskRuleValidTo" class="col-sm-1 col-form-label col-form-label-sm">@(userConfig.GetText("valid_to")):</label>
                    @if (EditMode)
                    {
                        <div class="col-sm-2">
                            <input id="taskRuleValidTo" type="date" class="form-control form-control-sm" @bind="ImplTask.TargetEndDate" />
                        </div>
                    }
                    else
                    {
                        <label class="col-sm-2">@ImplTask.TargetEndDate?.ToString("d")</label>
                    }
                </div>
                @if(ReqTask.TaskType == TaskType.access.ToString())
                {
                    <DisplayAccessElements @bind-Source="actSource" @bind-Destination="actDestination" @bind-Service="actService" EditMode="EditMode"></DisplayAccessElements>
                }
                <div class="form-group row">
                    <label for="taskComment" class="col-sm-1 col-form-label col-form-label-sm">@(userConfig.GetText("comment")):</label>
                    @if (ImplementMode)
                    {
                        <div class="col-sm-11">
                            <input id="taskComment" type="text" class="form-control form-control-sm" @bind="ImplTask.FwAdminComments" />
                        </div>
                    }
                    else
                    {
                        <label class="col-sm-11">@ImplTask.FwAdminComments</label>
                    }
                </div>
            </form>
        }
    </Body>
    <Footer>
        <div class="btn-group">
            @if (EditMode)
            {
                <AuthorizeView Roles="admin, planner, fw-admin">
                    <Authorized>
                        <button class="btn btn-sm btn-primary" @onclick:preventDefault @onclick="SaveImplTask">@(userConfig.GetText("save"))</button>
                    </Authorized>
                    <NotAuthorized>
                        <button class="btn btn-sm btn-primary" disabled>@(userConfig.GetText("save"))</button>
                    </NotAuthorized> 
                </AuthorizeView>
            }
            else if (ImplementMode)
            {
                <AuthorizeView Roles="admin, implementer, fw-admin">
                    <Authorized>
                        <button class="btn btn-sm btn-primary" @onclick:preventDefault @onclick="InitPromoteImplTask">@(userConfig.GetText("promote_task"))</button>
                    </Authorized>
                    <NotAuthorized>
                        <button class="btn btn-sm btn-primary" disabled>@(userConfig.GetText("promote_task"))</button>
                    </NotAuthorized> 
                </AuthorizeView>
            }
            <button class="btn btn-sm btn-secondary" @onclick="Close">@(userConfig.GetText("cancel"))</button>
        </div>
    </Footer>
</PopUp>

<PromoteObject @bind-Display="PromoteImplTaskMode" Save="PromoteImplTask" StatefulObject="ImplTask" PossibleStates="possibleStates" States="States"></PromoteObject>

@code
{
    [CascadingParameter]
    Action<Exception?, string, string, bool>? DisplayMessageInUi { get; set; }
    
    [Parameter]
    public WorkflowPhases Phase { get; set; } = WorkflowPhases.planning;

    [Parameter]
    public bool Display { get; set; } = false;

    [Parameter]
    public EventCallback<bool> DisplayChanged { get; set; }

    [Parameter]
    public bool EditMode { get; set; } = false;

    [Parameter]
    public EventCallback<bool> EditModeChanged { get; set; }

    [Parameter]
    public bool AddMode { get; set; } = false;

    [Parameter]
    public EventCallback<bool> AddModeChanged { get; set; }

    [Parameter]
    public bool ImplementMode { get; set; } = false;

    [Parameter]
    public EventCallback<bool> ImplementModeChanged { get; set; }

    [Parameter]
    public ImplementationTask ImplTask { get; set; } = new ImplementationTask();

    [Parameter]
    public EventCallback<ImplementationTask> ImplTaskChanged { get; set; }

    [Parameter]
    public StateMatrix StateMatrix { get; set; } = new StateMatrix();

    [Parameter]
    public RequestStateDict States { get; set; } = new RequestStateDict();

    [Parameter]
    public RequestTask ReqTask { get; set; } = new RequestTask();

    [Parameter]
    public EventCallback<RequestTask> ReqTaskChanged { get; set; }


    private List<RuleAction> ruleActions = new List<RuleAction>();
    private List<Tracking> trackings = new List<Tracking>();
    private List<Device> devices = new List<Device>();
    
    private ImplementationElement actImplElement = new ImplementationElement();
    private List<int> possibleStates = new List<int>();
    private bool PromoteImplTaskMode = false;

    RuleElement actSource = new RuleElement();
    RuleElement actDestination = new RuleElement();
    RuleElement actService = new RuleElement();


    protected override async Task OnInitializedAsync()
    {
        try
        {
            ruleActions = await apiConnection.SendQueryAsync<List<RuleAction>>(FWO.Api.Client.Queries.StmQueries.getRuleActions);
            trackings = await apiConnection.SendQueryAsync<List<Tracking>>(FWO.Api.Client.Queries.StmQueries.getTracking);
            devices = await apiConnection.SendQueryAsync<List<Device>>(FWO.Api.Client.Queries.DeviceQueries.getDeviceDetails);
        }
        catch (Exception exception)
        {
            DisplayMessageInUi!(exception, userConfig.GetText("fetch_data"), "", true);
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        if (Display)
        {
            InitElements();
        }
    }

    private void InitElements()
    {
        actSource = ImplTask.getRuleElement(RuleField.source) ?? new RuleElement();
        actDestination = ImplTask.getRuleElement(RuleField.destination) ?? new RuleElement();
        actService = ImplTask.getRuleElement(RuleField.service) ?? new RuleElement();
    }

    private void AddElements()
    {
        ImplTask.ImplElements.Add(actSource.ToImplElement(RuleField.source));
        ImplTask.ImplElements.Add(actDestination.ToImplElement(RuleField.destination));
        ImplTask.ImplElements.Add(actService.ToImplElement(RuleField.service));
    }

    private void UpdateElements()
    {
        ImplTask.ImplElements[ImplTask.ImplElements.FindIndex(x => x.Id == actSource.ElemId)] = actSource.ToImplElement(RuleField.source);
        ImplTask.ImplElements[ImplTask.ImplElements.FindIndex(x => x.Id == actDestination.ElemId)] = actDestination.ToImplElement(RuleField.destination);
        ImplTask.ImplElements[ImplTask.ImplElements.FindIndex(x => x.Id == actService.ElemId)] = actService.ToImplElement(RuleField.service);
    }

    private async Task SaveImplTask()
    {
        try
        {
            if (ImplTask.Sanitize())
            {
                DisplayMessageInUi!(null, userConfig.GetText("save_task"), userConfig.GetText("U0001"), true);
            }
            if (CheckTaskValues())
            {
                if (AddMode)
                {
                    AddElements();
                    ImplTask.Id = await AddImplTaskToDb(ImplTask);
                    ReqTask.ImplementationTasks.Add(ImplTask);
                }
                else
                {
                    UpdateElements();
                    await UpdateImplTaskInDb(ImplTask);
                    ReqTask.ImplementationTasks[ReqTask.ImplementationTasks.FindIndex(x => x.ImplTaskNumber == ImplTask.ImplTaskNumber)] = ImplTask;
                }
                Close();
            }
        }
        catch (Exception exception)
        {
            DisplayMessageInUi!(exception, userConfig.GetText("save_task"), "", true);
        }
    }

    private bool CheckTaskValues()
    {
        @* if (ImplTask. == null || ImplTask. == "")
        {
            DisplayMessageInUi!(null, userConfig.GetText("save_task"), userConfig.GetText("E5102"), true);
            return false;
        } *@
        return true;
    }

    private void Close()
    {
        Display = false;
        EditMode = false;
        AddMode = false;
    }

    private async Task InitPromoteImplTask()
    {
        possibleStates = StateMatrix.getAllowedTransitions(ImplTask.StateId);
        if(possibleStates.Count == 1)
        {
            ImplTask.StateId = possibleStates[0];
            await UpdateImplTaskStateInDb(ImplTask);
            //ReqTask.ImplementationTasks[ReqTask.ImplementationTasks.FindIndex(x => x.ImplTaskNumber == ImplTask.ImplTaskNumber)] = ImplTask;
        }
        else
        {
            PromoteImplTaskMode = true;
        }
    }

    private async Task PromoteImplTask(StatefulObject implTask)
    {
        try
        {
            ImplTask.StateId = implTask.StateId;
            PromoteImplTaskMode = false;
            ImplTask.CurrentHandler = userConfig.User;
            await UpdateImplTaskStateInDb(ImplTask);
            //ReqTask.ImplementationTasks[ReqTask.ImplementationTasks.FindIndex(x => x.ImplTaskNumber == ImplTask.ImplTaskNumber)] = ImplTask;
        }
        catch (Exception exception)
        {
            DisplayMessageInUi!(exception, userConfig.GetText("save_task"), "", true);
        }
    }

    private async Task<int> AddImplTaskToDb(ImplementationTask task)
    {
        int returnId = 0;
        try
        {
            var Variables = new
            {
                reqTaskId = task.ReqTaskId,
                implIaskNumber = task.ImplTaskNumber,
                state = task.StateId,
                device = task.DeviceId,
                implAction = task.ImplAction,
                ruleAction = task.RuleAction,
                tracking = task.Tracking,
                handler = task.CurrentHandler?.DbId,
                validFrom = task.TargetBeginDate,
                validTo = task.TargetEndDate,
                comment = task.FwAdminComments
            };
            ReturnId[]? returnIds = (await apiConnection.SendQueryAsync<NewReturning>(FWO.Api.Client.Queries.RequestQueries.newImplementationTask, Variables)).ReturnIds;
            if (returnIds == null)
            {
                DisplayMessageInUi!(null, userConfig.GetText("add_task"), userConfig.GetText("E8003"), true);
            }
            else
            {
                returnId = returnIds[0].NewId;
                foreach(var element in task.ImplElements)
                {
                    element.ImplTaskId = returnId;
                    await AddImplElementToDb(element);
                }
            }
        }
        catch (Exception exception)
        {
            DisplayMessageInUi!(exception, userConfig.GetText("add_task"), "", true);
        }
        return returnId;
    }

    private async Task UpdateImplTaskInDb(ImplementationTask task)
    {
        try
        {
            var Variables = new
            {
                id = task.Id,
                reqTaskId = task.ReqTaskId,
                implIaskNumber = task.ImplTaskNumber,
                state = task.StateId,
                device = task.DeviceId,
                implAction = task.ImplAction,
                ruleAction = task.RuleAction,
                tracking = task.Tracking,
                handler = task.CurrentHandler?.DbId,
                validFrom = task.TargetBeginDate,
                validTo = task.TargetEndDate,
                comment = task.FwAdminComments
            };
            int udId = (await apiConnection.SendQueryAsync<ReturnId>(FWO.Api.Client.Queries.RequestQueries.updateImplementationTask, Variables)).UpdatedId;
            if(udId != task.Id)
            {
                DisplayMessageInUi!(null, userConfig.GetText("save_task"), userConfig.GetText("E8004"), true);
            }
            else
            {
                foreach(var element in task.ImplElements)
                {
                    await UpdateImplElementInDb(element);
                }
            }
        }
        catch (Exception exception)
        {
            DisplayMessageInUi!(exception, userConfig.GetText("save_task"), "", true);
        }
    }

    private async Task<int> AddImplElementToDb(ImplementationElement element)
    {
        int returnId = 0;
        try
        {
            var Variables = new
            {
                implementationAction = element.ImplAction,
                implTaskId = element.ImplTaskId,
                ip = element.Ip.ToCidrString(),
                port = element.Port,
                proto = element.ProtoId,
                network_obj_id = element.NetworkId,
                service_id = element.ServiceId,
                field = element.Field,
                user_id = element.UserId,
                original_nat_id = element.OriginalNatId
            };
            ReturnId[]? returnIds = (await apiConnection.SendQueryAsync<NewReturning>(FWO.Api.Client.Queries.RequestQueries.newImplementationElement, Variables)).ReturnIds;
            if (returnIds == null)
            {
                DisplayMessageInUi!(null, userConfig.GetText("add_element"), userConfig.GetText("E8006"), true);
            }
            else
            {
                returnId = returnIds[0].NewId;
            }
        }
        catch (Exception exception)
        {
            DisplayMessageInUi!(exception, userConfig.GetText("add_element"), "", true);
        }
        return returnId;
    }

    private async Task UpdateImplElementInDb(ImplementationElement element)
    {
        try
        {
            var Variables = new
            {
                id = element.Id,                
                implementationAction = element.ImplAction,
                implTaskId = element.ImplTaskId,
                ip = element.Ip.ToCidrString(),
                port = element.Port,
                proto = element.ProtoId,
                network_obj_id = element.NetworkId,
                service_id = element.ServiceId,
                field = element.Field,
                user_id = element.UserId,
                original_nat_id = element.OriginalNatId
            };
            int udId = (await apiConnection.SendQueryAsync<ReturnId>(FWO.Api.Client.Queries.RequestQueries.updateImplementationElement, Variables)).UpdatedId;
            if(udId != element.Id)
            {
                DisplayMessageInUi!(null, userConfig.GetText("save_element"), userConfig.GetText("E8007"), true);
            }
        }
        catch (Exception exception)
        {
            DisplayMessageInUi!(exception, userConfig.GetText("save_element"), "", true);
        }
    }
        
    private async Task UpdateImplTaskStateInDb(ImplementationTask task)
    {
        try
        {
            var Variables = new
            {
                id = task.Id,
                state = task.StateId,
                start = task.Start,
                stop = task.Stop,
                handler = task.CurrentHandler?.DbId
            };
            int udId = (await apiConnection.SendQueryAsync<ReturnId>(FWO.Api.Client.Queries.RequestQueries.updateImplementationTaskState, Variables)).UpdatedId;
            if(udId != task.Id)
            {
                DisplayMessageInUi!(null, userConfig.GetText("save_task"), userConfig.GetText("E8004"), true);
            }
        }
        catch (Exception exception)
        {
            DisplayMessageInUi!(exception, userConfig.GetText("save_task"), "", true);
        }
    }
}
