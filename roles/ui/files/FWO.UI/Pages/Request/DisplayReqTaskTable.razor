@using FWO.Config.Api
@using FWO.Ui.Services

@attribute [Authorize(Roles = "admin, requester, approver, planner, implementer, reviewer, auditor, fw-admin")]

@inject UserConfig userConfig

@if (ReqHandler.EditTicketMode)
{
    <button class="btn btn-success m-2" @onclick:preventDefault @onclick="AddReqTask">@(userConfig.GetText("add_task"))</button>
}
<div class="m-2">
    <Table class="table table-bordered table-responsive overflow-auto sticky-header" TableItem="RequestTask" Items="ReqHandler.ActTicket.Tasks" PageSize="0" ColumnReorder="true">
        <Column TableItem="RequestTask" Title="@(userConfig.GetText("actions"))" Field="(x => x.Id)" Sortable="false" Filterable="false">
            <Template>
                <div class="btn-group">
                    <button class="btn btn-sm btn-primary" @onclick:preventDefault @onclick="() => ShowReqTask(context)">@(userConfig.GetText("details"))</button>
                    @if (ReqHandler.EditTicketMode)
                    {
                        <button class="btn btn-sm btn-warning" @onclick:preventDefault @onclick="() => EditReqTask(context)">@(userConfig.GetText("edit"))</button>
                        <button class="btn btn-sm btn-danger" @onclick:preventDefault @onclick="() => DeleteReqTask(context)">@(userConfig.GetText("delete"))</button>
                    }
                    @if (Phase > WorkflowPhases.request)
                    {
                        <button class="btn btn-sm btn-primary" @onclick:preventDefault @onclick="() => ShowApprovals(context)">@(userConfig.GetText("approvals"))</button>
                        @if (context.StateId < StateMatrix.LowestStartedState)
                        {
                            <AuthorizeView Roles="admin, approver, planner, implementer, reviewer, fw-admin">
                                <Authorized Context="ctx">
                                    <button class="btn btn-sm btn-warning" @onclick:preventDefault @onclick="() => StartPhase(context)">@(userConfig.GetText("start_" + Phase.ToString()))</button>
                                </Authorized>
                                <NotAuthorized Context="ctx">
                                    <button class="btn btn-sm btn-warning" disabled>@(userConfig.GetText("start_" + Phase.ToString()))</button>
                                </NotAuthorized> 
                            </AuthorizeView>
                        }
                        else if (context.StateId < StateMatrix.LowestEndState)
                        {
                            <button class="btn btn-sm btn-warning" @onclick:preventDefault @onclick="() => ContinuePhase(context)">@(userConfig.GetText("continue_" + Phase.ToString()))</button>
                            @if(Phase == WorkflowPhases.planning)
                            {
                                <button class="btn btn-sm btn-warning" @onclick:preventDefault @onclick="() => AssignTask(context)">@(userConfig.GetText("assign"))</button>
                            }
                        }
                    }
                </div>
            </Template>
        </Column>
        <Column TableItem="RequestTask" Title="@(userConfig.GetText("id"))" Field="@(x => x.Id)" Sortable="true" Filterable="true" />
        <Column TableItem="RequestTask" Title="@(userConfig.GetText("title"))" Field="@(x => x.Title)" Sortable="true" Filterable="true" />
        <Column TableItem="RequestTask" Title="@(userConfig.GetText("state"))" Field="@(x => x.StateId)" Sortable="true" Filterable="false" >
            <Template>
                @(States.Name[context.StateId])
            </Template>
        </Column>
        <Column TableItem="RequestTask" Title="@(userConfig.GetText("current_handler"))" Field="@(x => x.CurrentHandler.Name)" Sortable="true" Filterable="true" />
        @if(Phase == WorkflowPhases.approval)
        {
            <Column TableItem="RequestTask" Title="@(userConfig.GetText("deadline"))" Field="@(x => x.Id)" Sortable="true" Filterable="true" >
                <Template>
                    @(context.Approvals.FirstOrDefault(x => x.InitialApproval)?.Deadline)
                </Template>
            </Column>
        }
        else
        {
            <Column TableItem="RequestTask" Title="@(userConfig.GetText("assigned"))" Field="@(x => x.AssignedGroup)" Sortable="true" Filterable="true" >
                <Template>
                    @(new DistName(context.AssignedGroup).UserName)
                </Template>
            </Column>
            <Column TableItem="RequestTask" Title="@(userConfig.GetText("start"))" Field="@(x => x.Start)" Sortable="true" Filterable="true" />
            <Column TableItem="RequestTask" Title="@(userConfig.GetText("stop"))" Field="@(x => x.Stop)" Sortable="true" Filterable="true" />
        }
    </Table>
</div>

<DisplayRequestTask Phase="Phase" StateMatrix="StateMatrix" States="States" ReqHandler="ReqHandler"
    ResetParent="Reset" AllImplTasks="AllImplTasks" StartImplPhase="StartImplPhase"/>
<AssignTask @bind-Display="ReqHandler.DisplayAssignMode" ReqHandler="ReqHandler"/>
<DeleteObject @bind-Display="ReqHandler.DisplayDeleteMode" Delete="ReqHandler.ConfDeleteReqTask" ObjName="@ReqHandler.ActReqTask.Title"></DeleteObject>
<DisplayApprovals @bind-Display="ReqHandler.DisplayApprovalMode" Approvals="ReqHandler.ActReqTask.Approvals" States="States"></DisplayApprovals>


@code
{
    [CascadingParameter]
    Action<Exception?, string, string, bool>? DisplayMessageInUi { get; set; }
    
    [Parameter]
    public WorkflowPhases Phase { get; set; } = WorkflowPhases.request;

    [Parameter]
    public StateMatrix StateMatrix { get; set; } = new StateMatrix();

    [Parameter]
    public RequestStateDict States { get; set; } = new RequestStateDict();

    [Parameter]
    public RequestHandler ReqHandler { get; set; }

    [Parameter]
    public Func<Task> ResetParent { get; set; }

    [Parameter]
    public List<ImplementationTask>? AllImplTasks { get; set; }

    [Parameter]
    public Func<RequestTask, Task>? StartPhase { get; set; }

    [Parameter]
    public Func<ImplementationTask, Task>? StartImplPhase { get; set; }


    private async Task Reset()
    {
        ReqHandler.ResetReqTaskActions();
        StateHasChanged();
    }

    private void ShowReqTask(RequestTask reqTask)
    {
        ReqHandler.SelectReqTask(reqTask, ObjAction.display);
    }

    private void ShowApprovals(RequestTask reqTask)
    {
        ReqHandler.SelectReqTask(reqTask, ObjAction.displayApprovals);
    }

    private async Task AddReqTask()
    {
        ReqHandler.SelectReqTask(new RequestTask(), ObjAction.add);
    }

    private async Task EditReqTask(RequestTask reqTask)
    {
        ReqHandler.SelectReqTask(reqTask, ObjAction.edit);
    }

    private async Task DeleteReqTask(RequestTask reqTask)
    {
        ReqHandler.SelectReqTask(reqTask, ObjAction.displayDelete);
    }

    private async Task AssignTask(RequestTask reqTask)
    {
        ReqHandler.SelectReqTask(reqTask, ObjAction.displayAssign);
    }

    private async Task ContinuePhase(RequestTask reqTask)
    {
        ReqHandler.ContinuePhase(reqTask);
    }
}
