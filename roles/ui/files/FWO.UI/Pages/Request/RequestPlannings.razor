@using BlazorTable
@using FWO.Api.Data
@using FWO.Api.Client
@using FWO.Config.Api
@using FWO.Ui.Services

@page "/request/plannings"
@attribute [Authorize(Roles = "admin, planner, auditor, fw-admin")]

@inject ApiConnection apiConnection
@inject UserConfig userConfig

<h3>@(userConfig.GetText("plannings"))</h3>
<hr />

<div class="m-2">
    <Table class="table table-bordered table-responsive vheight75 overflow-auto sticky-header" TableItem="RequestTicket" Items="requests" PageSize="0" ColumnReorder="true">
        <Column TableItem="RequestTicket" Title="@(userConfig.GetText("actions"))" Field="(x => x.Id)" Sortable="false" Filterable="false">
            <Template>
                <div class="btn-group">
                    @if (context.StateId <= stateMatrix.LowestEndState)
                    {
                        <button class="btn btn-sm btn-warning" @onclick="() => PlanRequest(context)">@(userConfig.GetText("plan"))</button>
                    }
                    else
                    {
                        <button class="btn btn-sm btn-primary" @onclick="() => ShowRequestDetails(context)">@(userConfig.GetText("details"))</button>
                    }
                </div>
            </Template>
        </Column>
        <Column TableItem="RequestTicket" Title="@(userConfig.GetText("id"))" Field="@(x => x.Id)" Sortable="true" Filterable="true" />
        <Column TableItem="RequestTicket" Title="@(userConfig.GetText("title"))" Field="@(x => x.Title)" Sortable="true" Filterable="true" />
        <Column TableItem="RequestTicket" Title="@(userConfig.GetText("requester"))" Field="@(x => x.Requester.Name)" Sortable="true" Filterable="true" />
        <Column TableItem="RequestTicket" Title="@(userConfig.GetText("state"))" Field="@(x => x.StateId)" Sortable="true" Filterable="false" >
            <Template>
                @(states.Name[context.StateId])
            </Template>
        </Column>
        <Column TableItem="RequestTicket" Title="@(userConfig.GetText("created"))" Field="@(x => x.CreationDate)" Sortable="true" Filterable="true" />
        <Column TableItem="RequestTicket" Title="@(userConfig.GetText("closed"))" Field="@(x => x.CompletionDate)" Sortable="true" Filterable="true" />
    </Table>
</div>

<PopUp Title="@(userConfig.GetText("request") + ": " + actTicket.Title)" Show="@ShowTicketMode" Large="true" OnClose="() => ShowTicketMode = false">
    <Body>
        @if (ShowTicketMode)
        {
            <form>
                <div class="form-group row">
                    <label for="requestId" class="col-sm-3 col-form-label col-form-label-sm">@(userConfig.GetText("id")):</label>
                    <label class="col-sm-8">@actTicket.Id</label>
                </div>
                <div class="form-group row">
                    <label for="taskId" class="col-sm-3 col-form-label col-form-label-sm">@(userConfig.GetText("state")):</label>
                    <label class="col-sm-8">@states.Name[actTicket.StateId]</label>
                </div>
                <div class="form-group row">
                    <label for="requestRequester" class="col-sm-3 col-form-label col-form-label-sm">@(userConfig.GetText("requester")):</label>
                    <label class="col-sm-8">@actTicket.Requester?.Name</label>
                </div>
                @(userConfig.GetText("tasks"))
                <div class="m-2">
                    <Table class="table table-bordered table-responsive overflow-auto sticky-header" TableItem="RequestTask" Items="actTicket.Tasks" PageSize="0" ColumnReorder="true">
                        <Column TableItem="RequestTask" Title="@(userConfig.GetText("actions"))" Field="(x => x.Id)" Sortable="false" Filterable="false">
                            <Template>
                                <div class="btn-group">
                                    @if (context.StateId < stateMatrix.LowestEndState)
                                    {
                                        <button class="btn btn-sm btn-warning" @onclick:preventDefault @onclick="() => PlanTask(context)">@(userConfig.GetText("plan"))</button>
                                    }
                                    else
                                    {
                                        <button class="btn btn-sm btn-primary" @onclick:preventDefault @onclick="() => ShowReqTask(context)">@(userConfig.GetText("details"))</button>
                                    }
                                </div>
                            </Template>
                        </Column>
                        <Column TableItem="RequestTask" Title="@(userConfig.GetText("id"))" Field="@(x => x.Id)" Sortable="true" Filterable="true" />
                        <Column TableItem="RequestTask" Title="@(userConfig.GetText("title"))" Field="@(x => x.Title)" Sortable="true" Filterable="true" />
                        <Column TableItem="RequestTask" Title="@(userConfig.GetText("state"))" Field="@(x => x.StateId)" Sortable="true" Filterable="false" >
                            <Template>
                                @(states.Name[context.StateId])
                            </Template>
                        </Column>
                        <Column TableItem="RequestTask" Title="@(userConfig.GetText("start"))" Field="@(x => x.Start)" Sortable="true" Filterable="true" />
                        <Column TableItem="RequestTask" Title="@(userConfig.GetText("stop"))" Field="@(x => x.Stop)" Sortable="true" Filterable="true" />
                    </Table>
                </div>
            </form>
        }
    </Body>
    <Footer>
        <div class="btn-group">
            @if (PlanRequestMode)
            {
                <AuthorizeView Roles="admin, requester, fw-admin">
                    <Authorized>
                        <button class="btn btn-sm btn-primary" @onclick="InitSaveRequest">@(userConfig.GetText("save"))</button>
                    </Authorized>
                    <NotAuthorized>
                        <button class="btn btn-sm btn-primary" disabled>@(userConfig.GetText("save"))</button>
                    </NotAuthorized> 
                </AuthorizeView>
            }
            <button class="btn btn-sm btn-secondary" @onclick="CancelRequest">@(userConfig.GetText("cancel"))</button>
        </div>
    </Footer>
</PopUp>

<PopUp Title="@(userConfig.GetText("save_request"))" Show="@PromoteRequestMode" OnClose="() => PromoteRequestMode = false">
    <Body>
        @if (PromoteRequestMode)
        {
            <div class="form-group row">
                <label for="promoteRequest" class="col-sm-3 col-form-label col-form-label-sm">@(userConfig.GetText("promote_to")):</label>
                <div class="col-sm-8">
                    <select id="promoteRequest" class="form-control form-control-sm" @bind="actTicket.StateId">
                        @foreach (int state in actPossibleStates)
                        {
                            <option value="@state">@(states.Name[state])</option>
                        }
                    </select>
                </div>
            </div>
        }
    </Body>
    <Footer>
        <div class="btn-group">
            <AuthorizeView Roles="admin, requester, fw-admin">
                <Authorized>
                    <button class="btn btn-sm btn-primary" @onclick:preventDefault @onclick="SaveRequest">@(userConfig.GetText("save"))</button>
                </Authorized>
                <NotAuthorized>
                    <button class="btn btn-sm btn-primary" disabled>@(userConfig.GetText("save"))</button>
                </NotAuthorized> 
            </AuthorizeView>
            <button class="btn btn-sm btn-secondary" @onclick="CancelSaveRequest">@(userConfig.GetText("cancel"))</button>
        </div>
    </Footer>
</PopUp>

<PopUp Title="@(userConfig.GetText("task") + ": " + actReqTask.Title)" Show="@ShowReqTaskMode" Large="true" OnClose="() => ShowReqTaskMode = false">
    <Body>
        @if (ShowReqTaskMode)
        {
            <form>
                <div class="form-group row">
                    <label for="taskId" class="col-sm-3 col-form-label col-form-label-sm">@(userConfig.GetText("id")):</label>
                    <label class="col-sm-8">@actReqTask.Id</label>
                </div>
                <div class="form-group row">
                    <label for="taskState" class="col-sm-3 col-form-label col-form-label-sm">@(userConfig.GetText("state")):</label>
                    <label class="col-sm-8">@states.Name[actReqTask.StateId]</label>
                </div>
                <div class="form-group row">
                    <label for="taskType" class="col-sm-3 col-form-label col-form-label-sm">@(userConfig.GetText("type")):</label>
                    <label class="col-sm-8">@(userConfig.GetText(actReqTask.TaskType))</label>
                </div>
                <div class="form-group row">
                    <label for="taskAction" class="col-sm-3 col-form-label col-form-label-sm">@(userConfig.GetText("action")):</label>
                    <label class="col-sm-8">@(userConfig.GetText(actReqTask.RequestAction))</label>
                </div>
                <div class="form-group row">
                    <label for="taskRuleAction" class="col-sm-3 col-form-label col-form-label-sm">@(userConfig.GetText("rule_action")):</label>
                    <label class="col-sm-8">@(((actReqTask.RuleAction != null) ? ruleActions.Find(x => x.Id == actReqTask.RuleAction)?.Name : ""))</label>
                </div>
                <div class="form-group row">
                    <label for="taskTracking" class="col-sm-3 col-form-label col-form-label-sm">@(userConfig.GetText("track")):</label>
                    <label class="col-sm-8">@(((actReqTask.Tracking != null) ? trackings.Find(x => x.Id == actReqTask.Tracking)?.Name : ""))</label>
                </div>
                <div class="form-group row">
                    <label for="taskReason" class="col-sm-3 col-form-label col-form-label-sm">@(userConfig.GetText("reason")):</label>
                    <label class="col-sm-8">@actReqTask.Reason</label>
                </div>
                @(userConfig.GetText("request_elements"))
                <div class="m-2">
                    <Table class="table table-bordered table-responsive overflow-auto sticky-header" TableItem="RequestElement" Items="actReqTask.Elements" PageSize="0" ColumnReorder="true">
                        <Column TableItem="RequestElement" Title="@(userConfig.GetText("actions"))" Field="(x => x.Id)" Sortable="false" Filterable="false">
                            <Template>
                                <div class="btn-group">
                                    <button class="btn btn-sm btn-primary" @onclick:preventDefault @onclick="() => ShowReqElement(context)">@(userConfig.GetText("details"))</button>
                                </div>
                            </Template>
                        </Column>
                        <Column TableItem="RequestElement" Title="@(userConfig.GetText("action"))" Field="@(x => x.RequestAction)" Sortable="true" Filterable="true" >
                            <Template>
                                @(userConfig.GetText(context.RequestAction))
                            </Template>
                        </Column>
                        <Column TableItem="RequestElement" Title="@(userConfig.GetText("type"))" Field="@(x => x.Field)" Sortable="true" Filterable="true" />
                        <Column TableItem="RequestElement" Title="@(userConfig.GetText("ip"))" Field="@(x => x.Ip)" Sortable="true" Filterable="true" />
                        <Column TableItem="RequestElement" Title="@(userConfig.GetText("port"))" Field="@(x => x.Port)" Sortable="true" Filterable="true" />
                        <Column TableItem="RequestElement" Title="@(userConfig.GetText("protocol"))" Field="@(x => x.ProtoId)" Sortable="true" Filterable="true" >
                            <Template>
                                @(((context.ProtoId != null) ? ipProtos.Find(x => x.Id == context.ProtoId)?.Name : ""))
                            </Template>
                        </Column>
                    </Table>
                </div>
                @(userConfig.GetText("implementation_tasks"))
                @if (PlanTaskMode)
                {
                    <button class="btn btn-success m-2" @onclick:preventDefault @onclick="AddImplTask">@(userConfig.GetText("create_implementation"))</button>
                }
                <div class="m-2">
                    <Table class="table table-bordered table-responsive overflow-auto sticky-header" TableItem="ImplementationTask" Items="actReqTask.ImplementationTasks" PageSize="0" ColumnReorder="true">
                        <Column TableItem="ImplementationTask" Title="@(userConfig.GetText("actions"))" Field="(x => x.Id)" Sortable="false" Filterable="false">
                            <Template>
                                <div class="btn-group">
                                    @if (context.StateId < stateMatrix.LowestEndState)
                                    {
                                        <button class="btn btn-sm btn-warning" @onclick:preventDefault @onclick="() => EditImplTask(context)">@(userConfig.GetText("edit"))</button>
                                        <button class="btn btn-sm btn-danger" @onclick:preventDefault @onclick="() => DeleteImplTask(context)">@(userConfig.GetText("delete"))</button>
                                    }
                                    else
                                    {
                                        <button class="btn btn-sm btn-primary" @onclick:preventDefault @onclick="() => ShowImplTask(context)">@(userConfig.GetText("details"))</button>
                                    }
                                </div>
                            </Template>
                        </Column>
                        <Column TableItem="ImplementationTask" Title="@(userConfig.GetText("number"))" Field="@(x => x.ImplTaskNumber)" Sortable="true" Filterable="true" />
                        <Column TableItem="ImplementationTask" Title="@(userConfig.GetText("device"))" Field="@(x => x.DeviceId)" Sortable="true">
                            <Template>
                                @(context.DeviceId != null && context.DeviceId != 0 ? devices[devices.FindIndex(x => x.Id == context.DeviceId)].Name : "")
                            </Template>
                        </Column>
                    </Table>
                </div>
            </form>
        }
    </Body>
    <Footer>
        <div class="btn-group">
            @if (PlanTaskMode)
            {
                <AuthorizeView Roles="admin, planner, fw-admin">
                    <Authorized>
                        <button class="btn btn-sm btn-primary" @onclick:preventDefault @onclick="InitSaveReqTask">@(userConfig.GetText("save"))</button>
                    </Authorized>
                    <NotAuthorized>
                        <button class="btn btn-sm btn-primary" disabled>@(userConfig.GetText("save"))</button>
                    </NotAuthorized> 
                </AuthorizeView>
            }
            <button class="btn btn-sm btn-secondary" @onclick="CancelTask">@(userConfig.GetText("cancel"))</button>
        </div>
    </Footer>
</PopUp>

<PopUp Title="@(userConfig.GetText("element") + ": " + actReqElement.Id)" Show="@ShowReqElementMode" Large="true" OnClose="() => ShowReqElementMode = false">
    <Body>
        @if (ShowReqElementMode)
        {
            <form>
                <div class="form-group row">
                    <label for="elementAction" class="col-sm-3 col-form-label col-form-label-sm">@(userConfig.GetText("action"))*:</label>
                    <label class="col-sm-8">@(userConfig.GetText(actReqElement.RequestAction))</label>
                </div>
                <div class="form-group row">
                    <label for="elementField" class="col-sm-3 col-form-label col-form-label-sm">@(userConfig.GetText("type"))*:</label>
                    <label class="col-sm-8">@(userConfig.GetText(actReqElement.Field))</label>
                </div>
                <div class="form-group row">
                    <label for="elementIp" class="col-sm-3 col-form-label col-form-label-sm">@(userConfig.GetText("ip"))*:</label>
                    <label class="col-sm-8">@actReqElement.Ip</label>
                </div>
                <div class="form-group row">
                    <label for="elementPort" class="col-sm-3 col-form-label col-form-label-sm">@(userConfig.GetText("port"))*:</label>
                    <label class="col-sm-8">@actReqElement.Port</label>
                </div>
                <div class="form-group row">
                    <label for="elementProto" class="col-sm-3 col-form-label col-form-label-sm">@(userConfig.GetText("protocol")):</label>
                    <label class="col-sm-8">@(((actReqElement.ProtoId != null) ? ipProtos.Find(x => x.Id == actReqElement.ProtoId)?.Name : ""))</label>
                </div>
            </form>
        }
    </Body>
    <Footer>
        <div class="btn-group">
            <button class="btn btn-sm btn-secondary" @onclick="CancelReqElement">@(userConfig.GetText("cancel"))</button>
        </div>
    </Footer>
</PopUp>

<PopUp Title="@(userConfig.GetText("save_task"))" Show="@promoteTaskMode" OnClose="() => promoteTaskMode = false">
    <Body>
        @if (promoteTaskMode)
        {
            <div class="form-group row">
                <label for="promoteTask" class="col-sm-3 col-form-label col-form-label-sm">@(userConfig.GetText("promote_to")):</label>
                <div class="col-sm-8">
                    <select id="promoteTask" class="form-control form-control-sm" @bind="actReqTask.StateId">
                        @foreach (int state in actPossibleStates)
                        {
                            <option value="@state">@(states.Name[state])</option>
                        }
                    </select>
                </div>
            </div>
        }
    </Body>
    <Footer>
        <div class="btn-group">
            <AuthorizeView Roles="admin, planner, fw-admin">
                <Authorized>
                    <button class="btn btn-sm btn-primary" @onclick:preventDefault @onclick="SaveReqTask">@(userConfig.GetText("save"))</button>
                </Authorized>
                <NotAuthorized>
                    <button class="btn btn-sm btn-primary" disabled>@(userConfig.GetText("save"))</button>
                </NotAuthorized> 
            </AuthorizeView>
            <button class="btn btn-sm btn-secondary" @onclick="CancelSaveTask">@(userConfig.GetText("cancel"))</button>
        </div>
    </Footer>
</PopUp>

<PopUp Title="@(userConfig.GetText("task") + ": " + actImplTask.ImplTaskNumber)" Show="@ShowImplTaskMode" Large="true" OnClose="() => ShowImplTaskMode = false">
    <Body>
        @if (ShowImplTaskMode)
        {
            <form>
                <div class="form-group row">
                    <label for="taskDevId" class="col-sm-3 col-form-label col-form-label-sm">@(userConfig.GetText("device"))*:</label>
                    @if (EditImplTaskMode)
                    {
                        <div class="col-sm-8">
                            <select id="taskDevId" class="form-control form-control-sm" @bind="actImplTask.DeviceId">
                                @foreach (Device device in devices)
                                {
                                    <option value="@device.Id">@(device.Name)</option>
                                }
                            </select>
                        </div>
                    }
                    else
                    {
                        <label class="col-sm-8">@(actImplTask.DeviceId != null && actImplTask.DeviceId != 0 ? devices[devices.FindIndex(x => x.Id == actImplTask.DeviceId)].Name : "")</label>
                    }
                </div>
                <div class="form-group row">
                    <label for="taskReqAction" class="col-sm-3 col-form-label col-form-label-sm">@(userConfig.GetText("action"))*:</label>
                    @if (EditImplTaskMode)
                    {
                        <div class="col-sm-8">
                            <select id="taskReqAction" class="form-control form-control-sm" @bind="actImplTask.ImplAction">
                                @foreach (string action in Enum.GetNames(typeof(RequestAction)))
                                {
                                    <option value="@action">@(userConfig.GetText(action))</option>
                                }
                            </select>
                        </div>
                    }
                    else
                    {
                        <label class="col-sm-8">@(userConfig.GetText(actImplTask.ImplAction))</label>
                    }
                </div>
                <div class="form-group row">
                    <label for="taskRuleAction" class="col-sm-3 col-form-label col-form-label-sm">@(userConfig.GetText("rule_action")):</label>
                    @if (EditImplTaskMode)
                    {
                        <div class="col-sm-8">
                            <select id="taskRuleAction" class="form-control form-control-sm" @bind="actImplTask.RuleAction">
                                @foreach (var action in ruleActions)
                                {
                                    <option value="@action.Id">@(action.Name)</option>
                                }
                            </select>
                        </div>
                    }
                    else
                    {
                        <label class="col-sm-8">@(((actImplTask.RuleAction != null) ? ruleActions.Find(x => x.Id == actImplTask.RuleAction)?.Name : ""))</label>
                    }
                </div>
                <div class="form-group row">
                    <label for="taskRuleTracking" class="col-sm-3 col-form-label col-form-label-sm">@(userConfig.GetText("track")):</label>
                    @if (EditImplTaskMode)
                    {
                        <div class="col-sm-8">
                            <select id="taskRuleTracking" class="form-control form-control-sm" @bind="actImplTask.Tracking">
                                @foreach (var track in trackings)
                                {
                                    <option value="@track.Id">@(track.Name)</option>
                                }
                            </select>
                        </div>
                    }
                    else
                    {
                        <label class="col-sm-8">@(((actImplTask.Tracking != null) ? trackings.Find(x => x.Id == actImplTask.Tracking)?.Name : ""))</label>
                    }
                </div>
                @(userConfig.GetText("elements"))
                @if (EditImplTaskMode)
                {
                    <div class="btn-group">
                        <button class="btn btn-success m-2" @onclick:preventDefault @onclick="SearchImplElement">@(userConfig.GetText("search_element"))</button>
                        <button class="btn btn-success m-2" @onclick:preventDefault @onclick="AddImplElement">@(userConfig.GetText("add_element"))</button>
                    </div>
                }
                <div class="m-2">
                    <Table class="table table-bordered table-responsive overflow-auto sticky-header" TableItem="ImplementationElement" Items="actImplTask.ImplElements" PageSize="0" ColumnReorder="true">
                        <Column TableItem="ImplementationElement" Title="@(userConfig.GetText("actions"))" Field="(x => x.Id)" Sortable="false" Filterable="false">
                            <Template>
                                <div class="btn-group">
                                    @if (EditImplTaskMode)
                                    {
                                        <button class="btn btn-sm btn-warning" @onclick:preventDefault @onclick="() => EditImplElement(context)">@(userConfig.GetText("edit"))</button>
                                        <button class="btn btn-sm btn-danger" @onclick:preventDefault @onclick="() => DeleteImplElement(context)">@(userConfig.GetText("delete"))</button>
                                    }
                                    else
                                    {
                                        <button class="btn btn-sm btn-primary" @onclick:preventDefault @onclick="() => ShowImplElement(context)">@(userConfig.GetText("details"))</button>
                                    }
                                </div>
                            </Template>
                        </Column>
                        <Column TableItem="ImplementationElement" Title="@(userConfig.GetText("action"))" Field="@(x => x.ImplAction)" Sortable="true" Filterable="true" >
                            <Template>
                                @(userConfig.GetText(context.ImplAction))
                            </Template>
                        </Column>
                        <Column TableItem="ImplementationElement" Title="@(userConfig.GetText("type"))" Field="@(x => x.Field)" Sortable="true" Filterable="true" />
                        <Column TableItem="ImplementationElement" Title="@(userConfig.GetText("ip"))" Field="@(x => x.Ip)" Sortable="true" Filterable="true" />
                        <Column TableItem="ImplementationElement" Title="@(userConfig.GetText("port"))" Field="@(x => x.Port)" Sortable="true" Filterable="true" />
                        <Column TableItem="ImplementationElement" Title="@(userConfig.GetText("protocol"))" Field="@(x => x.ProtoId)" Sortable="true" Filterable="true" >
                            <Template>
                                @(((context.ProtoId != null) ? ipProtos.Find(x => x.Id == context.ProtoId)?.Name : ""))
                            </Template>
                        </Column>
                </Table>
                </div>
            </form>
        }
    </Body>
    <Footer>
        <div class="btn-group">
            @if (EditImplTaskMode)
            {
                <AuthorizeView Roles="admin, planner, fw-admin">
                    <Authorized>
                        <button class="btn btn-sm btn-primary" @onclick:preventDefault @onclick="SaveImplTask">@(userConfig.GetText("save"))</button>
                    </Authorized>
                    <NotAuthorized>
                        <button class="btn btn-sm btn-primary" disabled>@(userConfig.GetText("save"))</button>
                    </NotAuthorized> 
                </AuthorizeView>
            }
            <button class="btn btn-sm btn-secondary" @onclick="CancelImplTask">@(userConfig.GetText("cancel"))</button>
        </div>
    </Footer>
</PopUp>

<PopUp Title="@(userConfig.GetText("delete_task"))" Show="@DeleteImplTaskMode" OnClose="() => DeleteImplTaskMode = false">
    <Body>
        @if (DeleteImplTaskMode)
        {
            <p>@(userConfig.GetText("U8002")) @(actImplTask.ImplTaskNumber)?</p>
        }
    </Body>
    <Footer>
        <div class="btn-group">
            <AuthorizeView Roles="admin">
                <Authorized>
                    <button class="btn btn-sm btn-danger" @onclick="ConfDeleteImplTask">@(userConfig.GetText("delete"))</button>
                </Authorized>
                <NotAuthorized>
                    <button class="btn btn-sm btn-danger" disabled>@(userConfig.GetText("delete"))</button>
                </NotAuthorized> 
            </AuthorizeView>
            <button class="btn btn-sm btn-secondary" @onclick="CancelImplTask">@(userConfig.GetText("cancel"))</button>
        </div>
    </Footer>
</PopUp>

<PopUp Title="@(userConfig.GetText("element") + ": " + actImplElement.Id)" Show="@ShowImplElementMode" Large="true" OnClose="() => ShowImplElementMode = false">
    <Body>
        @if (ShowImplElementMode)
        {
            <form>
                <div class="form-group row">
                    <label for="elementField" class="col-sm-3 col-form-label col-form-label-sm">@(userConfig.GetText("type"))*:</label>
                    @if (EditImplElementMode) 
                    {
                        <div class="col-sm-8">
                            <input id="elementField" type="text" class="form-control form-control-sm" @bind="actImplElement.Field" />
                        </div>
                    }
                    else
                    {
                        <label class="col-sm-8">@actImplElement.Field</label>
                    }              
                </div>
                <div class="form-group row">
                    <label for="elementIp" class="col-sm-3 col-form-label col-form-label-sm">@(userConfig.GetText("ip"))*:</label>
                    @if (EditImplElementMode) 
                    {
                        <div class="col-sm-8">
                            <input id="elementIp" type="text" class="form-control form-control-sm" @bind="actImplElement.Ip" />
                        </div>
                    }
                    else
                    {
                        <label class="col-sm-8">@actImplElement.Ip</label>
                    }              
                </div>
                <div class="form-group row">
                    <label for="elementPort" class="col-sm-3 col-form-label col-form-label-sm">@(userConfig.GetText("port"))*:</label>
                    @if (EditImplElementMode) 
                    {
                        <div class="col-sm-8">
                            <input id="elementPort" type="text" class="form-control form-control-sm" @bind="actImplElement.Port" />
                        </div>
                    }
                    else
                    {
                        <label class="col-sm-8">@actImplElement.Port</label>
                    }              
                </div>
            </form>
        }
    </Body>
    <Footer>
        <div class="btn-group">
            @if (EditImplElementMode)
            {
                <AuthorizeView Roles="admin, requester, fw-admin">
                    <Authorized>
                        <button class="btn btn-sm btn-primary" @onclick:preventDefault @onclick="SaveImplElement">@(userConfig.GetText("save"))</button>
                    </Authorized>
                    <NotAuthorized>
                        <button class="btn btn-sm btn-primary" disabled>@(userConfig.GetText("save"))</button>
                    </NotAuthorized> 
                </AuthorizeView>
            }
            <button class="btn btn-sm btn-secondary" @onclick="CancelImplElement">@(userConfig.GetText("cancel"))</button>
        </div>
    </Footer>
</PopUp>

<PopUp Title="@(userConfig.GetText("search_element"))" Show="@SearchImplElementMode" Large="true" OnClose="() => SearchImplElementMode = false">
    <Body>
        @if (SearchImplElementMode)
        {
            <form>
                <div class="form-group row">
                    <label for="elementObject" class="col-sm-3 col-form-label col-form-label-sm">@(userConfig.GetText("object")):</label>
                    <div class="col-sm-8">
                        <select id="elementObject" class="form-control form-control-sm" @bind="actImplElement.NetworkId">
                            @foreach (NetworkObject nwObject in nwObjects)
                            {
                                <option value="@nwObject.Id">@(nwObject.Name)</option>
                            }
                        </select>
                    </div>
                </div>
            </form>
        }
    </Body>
    <Footer>
        <div class="btn-group">
            @if (EditImplElementMode)
            {
                <AuthorizeView Roles="admin, requester, fw-admin">
                    <Authorized>
                        <button class="btn btn-sm btn-primary" @onclick:preventDefault @onclick="SaveImplElement">@(userConfig.GetText("save"))</button>
                    </Authorized>
                    <NotAuthorized>
                        <button class="btn btn-sm btn-primary" disabled>@(userConfig.GetText("save"))</button>
                    </NotAuthorized> 
                </AuthorizeView>
            }
            <button class="btn btn-sm btn-secondary" @onclick="CancelImplElement">@(userConfig.GetText("cancel"))</button>
        </div>
    </Footer>
</PopUp>

<PopUp Title="@(userConfig.GetText("delete_element"))" Show="@DeleteImplElementMode" OnClose="() => DeleteImplElementMode = false">
    <Body>
        @if (DeleteImplElementMode)
        {
            <p>@(userConfig.GetText("U8001")) @(actImplElement.Ip)?</p>
        }
    </Body>
    <Footer>
        <div class="btn-group">
            <AuthorizeView Roles="admin">
                <Authorized>
                    <button class="btn btn-sm btn-danger" @onclick="ConfDeleteImplElement">@(userConfig.GetText("delete"))</button>
                </Authorized>
                <NotAuthorized>
                    <button class="btn btn-sm btn-danger" disabled>@(userConfig.GetText("delete"))</button>
                </NotAuthorized> 
            </AuthorizeView>
            <button class="btn btn-sm btn-secondary" @onclick="CancelImplElement">@(userConfig.GetText("cancel"))</button>
        </div>
    </Footer>
</PopUp>

@code
{
    [CascadingParameter]
    Action<Exception?, string, string, bool>? DisplayMessageInUi { get; set; }
    
    private List<RequestTicket> requests = new List<RequestTicket>();

    private bool ShowTicketMode = false;
    private bool PlanRequestMode = false;
    private bool PromoteRequestMode = false;
    private bool PlanTaskMode = false;
    private bool ShowReqTaskMode = false;
    private bool ShowReqElementMode = false;
    private bool promoteTaskMode = false;
    private bool ShowImplTaskMode = false;
    private bool EditImplTaskMode = false;
    private bool AddImplTaskMode = false;
    private bool DeleteImplTaskMode = false;
    private bool ShowImplElementMode = false;
    private bool EditImplElementMode = false;
    private bool AddImplElementMode = false;
    private bool SearchImplElementMode = false;
    private bool DeleteImplElementMode = false;

    private RequestTicket actTicket = new RequestTicket();
    private RequestTask actReqTask = new RequestTask();
    private RequestElement actReqElement = new RequestElement();
    private ImplementationTask actImplTask = new ImplementationTask();
    private ImplementationElement actImplElement = new ImplementationElement();

    private RequestStates states = new RequestStates();
    private List<int> actPossibleStates = new List<int>();
    private StateMatrix stateMatrix = new StateMatrix();
    private List<Device> devices = new List<Device>();
    private List<NetworkObject> nwObjects = new List<NetworkObject>();
    private List<IpProtocol> ipProtos = new List<IpProtocol>();
    private List<RuleAction> ruleActions = new List<RuleAction>();
    private List<Tracking> trackings = new List<Tracking>();


    protected override async Task OnInitializedAsync()
    {
        try
        {
            stateMatrix.Init(2);
            states.Init();

            devices = await apiConnection.SendQueryAsync<List<Device>>(FWO.Api.Client.Queries.DeviceQueries.getDeviceDetails);
            // nwObjects = await apiConnection.SendQueryAsync<List<NetworkObject>>(FWO.Api.Client.Queries.ObjectQueries.getNetworkObjects);
            ipProtos = await apiConnection.SendQueryAsync<List<IpProtocol>>(FWO.Api.Client.Queries.StmQueries.getIpProtocols);
            ruleActions = await apiConnection.SendQueryAsync<List<RuleAction>>(FWO.Api.Client.Queries.StmQueries.getRuleActions);
            trackings = await apiConnection.SendQueryAsync<List<Tracking>>(FWO.Api.Client.Queries.StmQueries.getTracking);

            var Variables = new
            {
                from_state = stateMatrix.LowestInputState,
                to_state = 999,
            };
            requests = await apiConnection.SendQueryAsync<List<RequestTicket>>(FWO.Api.Client.Queries.RequestQueries.getTickets, Variables);
            @* requests.Add(new RequestTicket()
                {
                    Id=1, Title="DummyReq", CreationDate=DateTime.Now, StateId=49, Requester=new UiUser(){Name="Dummy"},
                    Tasks = new List<RequestTask>()
                        {
                            new RequestTask () {Id=1, Title="Task1", StateId=49, 
                                                Elements = new List<RequestElement>()
                                                {
                                                    new RequestElement(){Id=1, Ip="127.0.0.0", Port=123, Field="Src"}
                                                }},
                            new RequestTask () {Id=2, Title="Task2", StateId=49}
                        }
                });         *@
        }
        catch (Exception exception)
        {
            DisplayMessageInUi!(exception, userConfig.GetText("fetch_requests"), "", true);
        }
    }


    private void PlanRequest(RequestTicket ticket)
    {
        PlanRequestMode = true;
        ShowRequestDetails(ticket);
    }

    private void ShowRequestDetails(RequestTicket ticket)
    {
        actTicket = new RequestTicket(ticket);
        ShowTicketMode = true;
    }

    private async Task InitSaveRequest()
    {
        if(actTicket.Tasks.Count > 0)
        {
            List<int> taskStates = new List<int>();
            foreach (RequestTask task in actTicket.Tasks)
            {
                taskStates.Add(task.StateId);
            }
            if (taskStates.Count > 0)
            {
                actTicket.StateId = stateMatrix.getRequestStateFromTaskStates(taskStates);
            }
            await SaveRequest();
        }
        else
        {
            actPossibleStates = stateMatrix.getAllowedTransitions(actTicket.StateId);
            if(actPossibleStates.Count == 1)
            {
                actTicket.StateId = actPossibleStates[0];
                await SaveRequest();
            }
            else
            {
                PromoteRequestMode = true;
            }
        }
    }

    private async Task SaveRequest()
    {
        try
        {           
            PromoteRequestMode = false;
            if (actTicket.Sanitize())
            {
                DisplayMessageInUi!(null, userConfig.GetText("save_request"), userConfig.GetText("U0001"), true);
            }
            if (CheckRequestValues())
            {    
                // Update existing ticket state
                var Variables = new
                {
                    id = actTicket.Id,
                    state = actTicket.StateId
                };
                int udId = (await apiConnection.SendQueryAsync<ReturnId>(FWO.Api.Client.Queries.RequestQueries.updateTicketState, Variables)).UpdatedId;
                if(udId != actTicket.Id)
                {
                    DisplayMessageInUi!(null, userConfig.GetText("save_request"), userConfig.GetText("E8002"), true);
                }
                else
                {
                    requests[requests.FindIndex(x => x.Id == actTicket.Id)] = actTicket;
                    PlanRequestMode = false;
                    ShowTicketMode = false;
                }
            }
        }
        catch (Exception exception)
        {
            DisplayMessageInUi!(exception, userConfig.GetText("save_request"), "", true);
        }
    }

    private bool CheckRequestValues()
    {
        if (actTicket.Title == null || actTicket.Title == "")
        {
            DisplayMessageInUi!(null, userConfig.GetText("save_request"), userConfig.GetText("E5102"), true);
            return false;
        }
        return true;
    }
    
    private void CancelRequest()
    {
        PlanRequestMode = false;
        ShowTicketMode = false;
    }

    private void CancelSaveRequest()
    {
        PromoteRequestMode = false;
    }

    private void PlanTask(RequestTask task)
    {
        PlanTaskMode = true;
        ShowReqTask(task);
    }

    private void ShowReqTask(RequestTask task)
    {
        actReqTask = new RequestTask(task);
        ShowReqTaskMode = true;
    }

    private async Task InitSaveReqTask()
    {
        actPossibleStates = stateMatrix.getAllowedTransitions(actReqTask.StateId);
        if(actPossibleStates.Count == 1)
        {
            actReqTask.StateId = actPossibleStates[0];
            await SaveReqTask();
        }
        else
        {
            promoteTaskMode = true;
        }
    }

    private async Task SaveReqTask()
    {
        try
        {
            promoteTaskMode = false;
            if (actReqTask.Sanitize())
            {
                DisplayMessageInUi!(null, userConfig.GetText("save_task"), userConfig.GetText("U0001"), true);
            }
            if (CheckTaskValues())
            {    
                if (actReqTask.Start == null && actReqTask.StateId >= stateMatrix.LowestStartedState)
                {
                    actReqTask.Start = DateTime.Now;
                }
                if (actReqTask.Stop == null && actReqTask.StateId >= stateMatrix.LowestEndState)
                {
                    actReqTask.Stop = DateTime.Now;
                }
                foreach(ImplementationTask implTask in actReqTask.ImplementationTasks)
                {
                    implTask.StateId = actReqTask.StateId;
                }
                actTicket.Tasks[actTicket.Tasks.FindIndex(x => x.Id == actReqTask.Id)] = actReqTask;
                ShowReqTaskMode = false;
                PlanTaskMode = false;
            }
        }
        catch (Exception exception)
        {
            DisplayMessageInUi!(exception, userConfig.GetText("save_task"), "", true);
        }
    }

    private bool CheckTaskValues()
    {
        if (actReqTask.Title == null || actReqTask.Title == "")
        {
            DisplayMessageInUi!(null, userConfig.GetText("save_task"), userConfig.GetText("E5102"), true);
            return false;
        }
        return true;
    }

    private void CancelTask()
    {
        PlanTaskMode = false;
        ShowReqTaskMode = false;
    }

    private void CancelSaveTask()
    {
        promoteTaskMode = false;
    }


    private void ShowReqElement(RequestElement element)
    {
        actReqElement = new RequestElement(element);
        ShowReqElementMode = true;
    }

    private void CancelReqElement()
    {
        ShowReqElementMode = false;
    }


    private void ShowImplTask(ImplementationTask task)
    {
        actImplTask = task;
        ShowImplTaskMode = true;
    }

    private void EditImplTask(ImplementationTask task)
    {
        EditImplTaskMode = true;
        ShowImplTask(task);
    }

    private void AddImplTask()
    {
        AddImplTaskMode = true;
        EditImplTask(new ImplementationTask(actReqTask){
            ImplTaskNumber = actReqTask.ImplementationTasks.Count + 1,
            DeviceId = (devices.Count > 0 ? devices[0].Id : 0)
            });
    }

    private async Task SaveImplTask()
    {
        try
        {
            if (actImplTask.Sanitize())
            {
                DisplayMessageInUi!(null, userConfig.GetText("save_task"), userConfig.GetText("U0001"), true);
            }
            if (CheckTaskValues())
            {
                if (AddImplTaskMode)
                {
                    actReqTask.ImplementationTasks.Add(actImplTask);
                }
                else
                {
                    actReqTask.ImplementationTasks[actReqTask.ImplementationTasks.FindIndex(x => x.ImplTaskNumber == actImplTask.ImplTaskNumber)] = actImplTask;
                }
                ShowImplTaskMode = false;
                EditImplTaskMode = false;
                AddImplTaskMode = false;
            }
        }
        catch (Exception exception)
        {
            DisplayMessageInUi!(exception, userConfig.GetText("save_task"), "", true);
        }
    }

    private void DeleteImplTask(ImplementationTask task)
    {
        actImplTask = task;
        DeleteImplTaskMode = true;
    }

    private void ConfDeleteImplTask()
    {
        actReqTask.ImplementationTasks.Remove(actImplTask);
        DeleteImplTaskMode = false;
    }

    private void CancelImplTask()
    {
        ShowImplTaskMode = false;
        EditImplTaskMode = false;
        AddImplTaskMode = false;
        DeleteImplTaskMode = false;
    }


    private void SearchImplElement()
    {
        actImplElement = new ImplementationElement();
        SearchImplElementMode = true;
    }

    private void ShowImplElement(ImplementationElement element)
    {
        actImplElement = new ImplementationElement(element);
        ShowImplElementMode = true;
    }

    private void EditImplElement(ImplementationElement element)
    {
        EditImplElementMode = true;
        ShowImplElement(element);
    }

    private void AddImplElement()
    {
        AddImplElementMode = true;
        EditImplElement(new ImplementationElement());
    }

    private async Task SaveImplElement()
    {
        try
        {
            if (actImplElement.Sanitize())
            {
                DisplayMessageInUi!(null, userConfig.GetText("save_element"), userConfig.GetText("U0001"), true);
            }
            if (CheckElementValues())
            {    
                if (AddImplElementMode)
                {
                    actImplTask.ImplElements.Add(actImplElement);
                }
                else
                {
                    actImplTask.ImplElements[actImplTask.ImplElements.FindIndex(x => x.Id == actImplElement.Id)] = actImplElement;
                }
                ShowImplElementMode = false;
                EditImplElementMode = false;
                AddImplElementMode = false;
            }
        }
        catch (Exception exception)
        {
            DisplayMessageInUi!(exception, userConfig.GetText("save_element"), "", true);
        }
    }

    private bool CheckElementValues()
    {
        if (actImplElement.Ip == null || actImplElement.Ip == "")
        {
            DisplayMessageInUi!(null, userConfig.GetText("save_element"), userConfig.GetText("E5102"), true);
            return false;
        }
        return true;
    }

    private void DeleteImplElement(ImplementationElement element)
    {
        actImplElement = element;
        DeleteImplElementMode = true;
    }

    private void ConfDeleteImplElement()
    {
        actImplTask.ImplElements.Remove(actImplElement);
        DeleteImplElementMode = false;
    }

    private void CancelImplElement()
    {
        AddImplElementMode = false;
        EditImplElementMode = false;
        ShowImplElementMode = false;
        SearchImplElementMode = false;
        DeleteImplElementMode = false;
    }
}
