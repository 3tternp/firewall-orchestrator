@using FWO.Api.Data
@using FWO.Api.Client
@using FWO.Config.Api
@using FWO.Ui.Services

@page "/request/plannings"
@attribute [Authorize(Roles = "admin, planner, auditor, fw-admin")]

@inject ApiConnection apiConnection
@inject UserConfig userConfig

<h3>@(userConfig.GetText("plannings"))</h3>
<hr />

@if(InitComplete)
{
    <DisplayTicketTable Phase="WorkflowPhases.planning" States="states" ReqHandler="reqHandler" 
        ResetParent="Reset" StartPhase="StartPlanTask"/>
}


@code
{
    [CascadingParameter]
    Action<Exception?, string, string, bool>? DisplayMessageInUi { get; set; }

    [CascadingParameter]
    private Task<AuthenticationState>? authenticationStateTask { get; set; }

    private RequestHandler reqHandler;
    private RequestStateDict states = new RequestStateDict();
    private bool InitComplete = false;


    protected override async Task OnInitializedAsync()
    {
        try
        {
            await states.Init(apiConnection);

            reqHandler = new RequestHandler(DisplayMessageInUi, userConfig, apiConnection, WorkflowPhases.planning){};
            await Reset();
            reqHandler.SetContinueEnv(ObjAction.plan);
    
            InitComplete = true;
        }
        catch (Exception exception)
        {
            DisplayMessageInUi!(exception, userConfig.GetText("fetch_requests"), "", true);
        }
    }

    private async Task Reset()
    {
        reqHandler.ReadOnlyMode = !(authenticationStateTask!.Result.User.IsInRole("planner") || authenticationStateTask!.Result.User.IsInRole("admin"));
        await reqHandler.Init();
    }

    private async Task StartPlanTask(RequestReqTask reqTask)
    {
        reqTask.Start = DateTime.Now;
        await reqHandler.StartWorkOnReqTask(reqTask, ObjAction.plan);
    }
}
