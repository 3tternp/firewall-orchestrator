@using BlazorTable
@using FWO.Api.Data
@using FWO.Api.Client
@using FWO.Config.Api
@using FWO.Ui.Services
@using FWO.Middleware.Client

@page "/request/plannings"
@attribute [Authorize(Roles = "admin, planner, auditor, fw-admin")]

@inject ApiConnection apiConnection
@inject MiddlewareClient middlewareClient
@inject UserConfig userConfig

<h3>@(userConfig.GetText("plannings"))</h3>
<hr />
<DisplayOverview Phase="WorkflowPhases.planning" @bind-Requests="requests" ShowTicketDetails="ShowTicketDetails" 
    StateMatrix ="stateMatrix" States="states"></DisplayOverview>

<DisplayTicket Phase="WorkflowPhases.planning" StartPhase="StartPlanning" ContinuePhase="PlanTask"
    @bind-Display="ShowTicketMode" @bind-EditMode="PlanningMode" @bind-Ticket="actTicket" 
    StateMatrix ="stateMatrix" States="states" @bind-Requests="requests"></DisplayTicket>


@code
{
    [CascadingParameter]
    Action<Exception?, string, string, bool>? DisplayMessageInUi { get; set; }
    
    private List<RequestTicket> requests = new List<RequestTicket>();

    private bool ShowTicketMode = false;
    private bool PlanningMode = false;

    private RequestTicket actTicket = new RequestTicket();
    private RequestTask actReqTask = new RequestTask();
    
    private RequestStateDict states = new RequestStateDict();
    private List<int> actPossibleStates = new List<int>();
    private StateMatrix stateMatrix = new StateMatrix();


    protected override async Task OnInitializedAsync()
    {
        try
        {
            await stateMatrix.Init(WorkflowPhases.planning, apiConnection);
            await states.Init(apiConnection);

            var Variables = new
            {
                from_state = stateMatrix.LowestInputState,
                to_state = stateMatrix.LowestEndState,
            };
            requests = await apiConnection.SendQueryAsync<List<RequestTicket>>(FWO.Api.Client.Queries.RequestQueries.getTickets, Variables);
        }
        catch (Exception exception)
        {
            DisplayMessageInUi!(exception, userConfig.GetText("fetch_requests"), "", true);
        }
    }

    private async Task ShowTicketDetails(RequestTicket ticket)
    {
        actTicket = new RequestTicket(ticket);
        ShowTicketMode = true;
        StateHasChanged();
    }

    private async Task StartPlanning(RequestTask task)
    {
        task.Start = DateTime.Now;
        task.CurrentHandler = userConfig.User;
        actPossibleStates = stateMatrix.getAllowedTransitions(task.StateId);
        if(actPossibleStates.Count == 1 && actPossibleStates[0] >= stateMatrix.LowestStartedState && actPossibleStates[0] < stateMatrix.LowestEndState)
        {
            task.StateId = actPossibleStates[0];
        }
        await UpdateReqTaskInDb(task);
        List<int> taskStates = new List<int>();
        foreach (RequestTask tsk in actTicket.Tasks)
        {
            taskStates.Add(tsk.StateId);
        }
        actTicket.StateId = stateMatrix.getRequestStateFromTaskStates(taskStates);
        await UpdateTicket();
        PlanTask(task);
    }

    private async Task PlanTask(RequestTask task)
    {
        actReqTask = task;
        actReqTask.CurrentHandler = userConfig.User;
        PlanningMode = true;
        StateHasChanged();
    }

    private async Task UpdateReqTaskInDb(RequestTask task)
    {
        try
        {
            var Variables = new
            {
                id = task.Id,
                state = task.StateId,
                start = task.Start,
                stop = task.Stop,
                handler = task.CurrentHandler?.DbId,
                recentHandler = task.RecentHandler?.DbId,
                assignedGroup = task.AssignedGroup,
                comment = task.FwAdminComments
            };
            int udId = (await apiConnection.SendQueryAsync<ReturnId>(FWO.Api.Client.Queries.RequestQueries.updateRequestTaskState, Variables)).UpdatedId;
            if(udId != task.Id)
            {
                DisplayMessageInUi!(null, userConfig.GetText("save_task"), userConfig.GetText("E8004"), true);
            }
        }
        catch (Exception exception)
        {
            DisplayMessageInUi!(exception, userConfig.GetText("save_task"), "", true);
        }
    }

    private async Task UpdateTicket()
    {
        try
        {           
            // Update existing ticket state
            var Variables = new
            {
                id = actTicket.Id,
                state = actTicket.StateId
            };
            int udId = (await apiConnection.SendQueryAsync<ReturnId>(FWO.Api.Client.Queries.RequestQueries.updateTicketState, Variables)).UpdatedId;
            if(udId != actTicket.Id)
            {
                DisplayMessageInUi!(null, userConfig.GetText("save_request"), userConfig.GetText("E8002"), true);
            }
            else
            {
                requests[requests.FindIndex(x => x.Id == actTicket.Id)] = actTicket;
            }
        }
        catch (Exception exception)
        {
            DisplayMessageInUi!(exception, userConfig.GetText("save_request"), "", true);
        }
    }
}
