@using FWO.Api.Client
@using FWO.Config.Api
@using FWO.Ui.Services
@using FWO.Middleware.Client


@attribute [Authorize(Roles = "admin, requester, approver, planner, implementer, reviewer, auditor, fw-admin")]

@inject ApiConnection apiConnection
@inject MiddlewareClient middlewareClient
@inject UserConfig userConfig

<PopUp Title="@(userConfig.GetText("task") + ": " + (ObjectName != "" ? userConfig.GetText(ObjectName) : ""))" Show="@Display" Large="true" OnClose="() => Display = false">
    <Body>
        @if (Display)
        {
            <form>
                <form class="form-group row">
                    <label for="assignedGroup" class="col-sm-2 col-form-label col-form-label-sm">@(userConfig.GetText("assign_to")):</label>
                    <div class="col-sm-8">
                        <select id="assignedGroup" class="form-control-sm col-sm" @bind="StatefulObject.AssignedGroup">
                            @foreach (var group in userAndGroupList)
                            {
                                <option value="@group.Dn">@(group.Name)</option>
                            }
                        </select>
                    </div>
                    @if(userAndGroupList.Count > 0)
                    {
                        <div class="col-sm-2">
                            <AuthorizeView Roles="admin">
                                <Authorized>
                                    <button class="btn btn-sm btn-success" @onclick="async () => { await Assign(StatefulObject); await Close();}" @onclick:preventDefault>@(userConfig.GetText("assign"))</button>
                                </Authorized>
                                <NotAuthorized>
                                    <button class="btn btn-sm btn-success" disabled>@(userConfig.GetText("assign"))</button>
                                </NotAuthorized> 
                            </AuthorizeView>
                        </div>
                    }
                </form>
                @if(StatefulObject.RecentHandler != null && StatefulObject.RecentHandler != StatefulObject.CurrentHandler)
                {
                    <form class="form-group row">
                        <label for="backAsssignedGroup" class="col-sm-2 col-form-label col-form-label-sm">@(userConfig.GetText("back_to")):</label>
                        <label id="backAsssignedGroup" class="col-sm-8">@StatefulObject.RecentHandler.Name</label>
                        <AuthorizeView Roles="admin">
                            <Authorized>
                                <button class="btn btn-sm btn-success" @onclick="async () => { await AssignBack(); await Close();}" @onclick:preventDefault>@(userConfig.GetText("assign"))</button>
                            </Authorized>
                            <NotAuthorized>
                                <button class="btn btn-sm btn-success" disabled>@(userConfig.GetText("assign"))</button>
                            </NotAuthorized> 
                        </AuthorizeView>
                    </form>
                }
            </form>
        }
    </Body>
    <Footer>
        <div class="btn-group">
            <button class="btn btn-sm btn-secondary" @onclick:preventDefault @onclick="Cancel">@(userConfig.GetText("cancel"))</button>
        </div>
    </Footer>
</PopUp>


@code
{
    [CascadingParameter]
    Action<Exception?, string, string, bool>? DisplayMessageInUi { get; set; }
    
    [Parameter]
    public bool Display { get; set; } = false;

    [Parameter]
    public EventCallback<bool> DisplayChanged { get; set; }

    [Parameter]
    public Func<Task> ResetParent { get; set; }

    [Parameter]
    public StatefulObject StatefulObject { get; set; } = new StatefulObject();

    [Parameter]
    public Func<StatefulObject, Task>? Assign { get; set; }

    [Parameter]
    public Func<Task>? AssignBack { get; set; }

    [Parameter]
    public string ObjectName { get; set; } = "";


    private List<UiUser> userAndGroupList = new List<UiUser>();


    protected override async Task OnInitializedAsync()
    {
        try
        {
            userAndGroupList = await RoleAccess.GetRoleMembers(middlewareClient, "reporter");
        }
        catch (Exception exception)
        {
            DisplayMessageInUi!(exception, userConfig.GetText("fetch_requests"), "", true);
        }
    }

    private void Cancel()
    {
        Display = false;
    }

    private async Task Close()
    {
        Display = false;
        await ResetParent();
    }
}
