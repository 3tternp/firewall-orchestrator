@using BlazorTable
@using FWO.Api.Data
@using FWO.Api.Client
@using FWO.Config.Api
@using FWO.Ui.Services

@page "/request"
@page "/request/requests"
@attribute [Authorize(Roles = "admin, requester, auditor, fw-admin")]

@inject ApiConnection apiConnection
@inject UserConfig userConfig

<h3>@(userConfig.GetText("requests"))</h3>
<hr />

<button class="btn btn-success m-2" @onclick="AddRequest">@(userConfig.GetText("add_new_request"))</button>

<div class="m-2">
    <Table class="table table-bordered table-responsive vheight75 overflow-auto sticky-header" TableItem="RequestTicket" Items="requests" PageSize="0" ColumnReorder="true">
        <Column TableItem="RequestTicket" Title="@(userConfig.GetText("action"))" Field="(x => x.Id)" Sortable="false" Filterable="false">
            <Template>
                <div class="btn-group">
                    @if (context.StateId < stateMatrix.LowestEndState)
                    {
                        <button class="btn btn-sm btn-warning" @onclick="() => EditRequest(context)">@(userConfig.GetText("edit"))</button>
                    }
                    else
                    {
                        <button class="btn btn-sm btn-primary" @onclick="() => ShowRequestDetails(context)">@(userConfig.GetText("details"))</button>
                    }
                </div>
            </Template>
        </Column>
        <Column TableItem="RequestTicket" Title="@(userConfig.GetText("id"))" Field="@(x => x.Id)" Sortable="true" Filterable="true" />
        <Column TableItem="RequestTicket" Title="@(userConfig.GetText("title"))" Field="@(x => x.Title)" Sortable="true" Filterable="true" />
        <Column TableItem="RequestTicket" Title="@(userConfig.GetText("requester"))" Field="@(x => x.Requester.Name)" Sortable="true" Filterable="true" />
        <Column TableItem="RequestTicket" Title="@(userConfig.GetText("state"))" Field="@(x => x.StateId)" Sortable="true" Filterable="false" >
            <Template>
                @(states.Name[context.StateId])
            </Template>
        </Column>
        <Column TableItem="RequestTicket" Title="@(userConfig.GetText("created"))" Field="@(x => x.CreationDate)" Sortable="true" Filterable="true" />
        <Column TableItem="RequestTicket" Title="@(userConfig.GetText("closed"))" Field="@(x => x.CompletionDate)" Sortable="true" Filterable="true" />
    </Table>
</div>

<PopUp Title="@(userConfig.GetText("request") + ": " + actRequest.Title)" Show="@ShowRequestMode" Large="true" OnClose="() => ShowRequestMode = false">
    <Body>
        @if (ShowRequestMode)
        {
            <form>
                <div class="form-group row">
                    <label for="requestId" class="col-sm-3 col-form-label col-form-label-sm">@(userConfig.GetText("id")):</label>
                    <label class="col-sm-8">@actRequest.Id</label>
                </div>
                <div class="form-group row">
                    <label for="taskId" class="col-sm-3 col-form-label col-form-label-sm">@(userConfig.GetText("state")):</label>
                    <label class="col-sm-8">@states.Name[actRequest.StateId]</label>
                </div>
                <div class="form-group row">
                    <label for="requestTitle" class="col-sm-3 col-form-label col-form-label-sm">@(userConfig.GetText("title"))*:</label>
                    @if (EditRequestMode)
                    {
                        <div class="col-sm-8">
                            <input id="requestTitle" type="text" class="form-control form-control-sm" @bind="actRequest.Title" />
                        </div>
                    }
                    else
                    {
                        <label class="col-sm-8">@actRequest.Title</label>
                    }
                </div>
                <div class="form-group row">
                    <label for="requestRequester" class="col-sm-3 col-form-label col-form-label-sm">@(userConfig.GetText("requester")):</label>
                    <label class="col-sm-8">@actRequest.Requester?.Name</label>
                </div>
                @(userConfig.GetText("tasks"))
                @if (EditRequestMode)
                {
                    <button class="btn btn-success m-2" @onclick:preventDefault @onclick="AddTask">@(userConfig.GetText("add_task"))</button>
                }
                <div class="m-2">
                    <Table class="table table-bordered table-responsive overflow-auto sticky-header" TableItem="RequestTask" Items="actRequest.Tasks" PageSize="0" ColumnReorder="true">
                        <Column TableItem="RequestTask" Title="@(userConfig.GetText("action"))" Field="(x => x.Id)" Sortable="false" Filterable="false">
                            <Template>
                                <div class="btn-group">
                                    @if (EditRequestMode)
                                    {
                                        <button class="btn btn-sm btn-warning" @onclick:preventDefault @onclick="() => ShowTask(context)">@(userConfig.GetText("edit"))</button>
                                    }
                                    else
                                    {
                                        <button class="btn btn-sm btn-primary" @onclick:preventDefault @onclick="() => ShowTask(context)">@(userConfig.GetText("details"))</button>
                                    }
                                </div>
                            </Template>
                        </Column>
                        <Column TableItem="RequestTask" Title="@(userConfig.GetText("id"))" Field="@(x => x.Id)" Sortable="true" Filterable="true" />
                        <Column TableItem="RequestTask" Title="@(userConfig.GetText("title"))" Field="@(x => x.Title)" Sortable="true" Filterable="true" />
                        <Column TableItem="RequestTask" Title="@(userConfig.GetText("state"))" Field="@(x => x.StateId)" Sortable="true" Filterable="false" >
                            <Template>
                                @(states.Name[context.StateId])
                            </Template>
                        </Column>
                        <Column TableItem="RequestTask" Title="@(userConfig.GetText("start"))" Field="@(x => x.Start)" Sortable="true" Filterable="true" />
                        <Column TableItem="RequestTask" Title="@(userConfig.GetText("stop"))" Field="@(x => x.Stop)" Sortable="true" Filterable="true" />
                    </Table>
                </div>
            </form>
        }
    </Body>
    <Footer>
        <div class="btn-group">
            @if (actRequest.StateId < stateMatrix.LowestEndState)
            {
                <AuthorizeView Roles="admin, requester, fw-admin">
                    <Authorized>
                        <button class="btn btn-sm btn-primary" @onclick="InitSaveRequest">@(userConfig.GetText("save"))</button>
                    </Authorized>
                    <NotAuthorized>
                        <button class="btn btn-sm btn-primary" disabled>@(userConfig.GetText("save"))</button>
                    </NotAuthorized> 
                </AuthorizeView>
            }
            else if(stateMatrix.getAllowedTransitions(actRequest.StateId).Count > 1)
            {
                <AuthorizeView Roles="admin, requester, fw-admin">
                    <Authorized>
                        <button class="btn btn-sm btn-primary" @onclick="InitSaveRequest">@(userConfig.GetText("change_state"))</button>
                    </Authorized>
                    <NotAuthorized>
                        <button class="btn btn-sm btn-primary" disabled>@(userConfig.GetText("change_state"))</button>
                    </NotAuthorized> 
                </AuthorizeView>
            }
            <button class="btn btn-sm btn-secondary" @onclick="CancelRequest">@(userConfig.GetText("cancel"))</button>
        </div>
    </Footer>
</PopUp>

<PopUp Title="@(userConfig.GetText("task") + ": " + actTask.Title)" Show="@ShowTaskMode" Large="true" OnClose="() => ShowTaskMode = false">
    <Body>
        @if (ShowTaskMode)
        {
            <form>
                <div class="form-group row">
                    <label for="taskId" class="col-sm-3 col-form-label col-form-label-sm">@(userConfig.GetText("id")):</label>
                    <label class="col-sm-8">@actTask.Id</label>
                </div>
                <div class="form-group row">
                    <label for="taskId" class="col-sm-3 col-form-label col-form-label-sm">@(userConfig.GetText("state")):</label>
                    <label class="col-sm-8">@states.Name[actTask.StateId]</label>
                </div>
                    <div class="form-group row">
                        <label for="taskTitle" class="col-sm-3 col-form-label col-form-label-sm">@(userConfig.GetText("title"))*:</label>
                        @if (EditRequestMode)
                        {
                            <div class="col-sm-8">
                                <input id="taskTitle" type="text" class="form-control form-control-sm" @bind="actTask.Title" />
                            </div>
                        }
                        else
                        {
                            <label class="col-sm-8">@actTask.Title</label>
                        }
                    </div>
                @(userConfig.GetText("elements"))
                @if (EditRequestMode)
                {
                    <button class="btn btn-success m-2" @onclick:preventDefault @onclick="AddElement">@(userConfig.GetText("add_element"))</button>
                }
                <div class="m-2">
                    <Table class="table table-bordered table-responsive overflow-auto sticky-header" TableItem="RequestElement" Items="actTask.Elements" PageSize="0" ColumnReorder="true">
                        <Column TableItem="RequestElement" Title="@(userConfig.GetText("action"))" Field="(x => x.Id)" Sortable="false" Filterable="false">
                            <Template>
                                <div class="btn-group">
                                    @if (EditRequestMode)
                                    {
                                        <button class="btn btn-sm btn-warning" @onclick:preventDefault @onclick="() => ShowElement(context)">@(userConfig.GetText("edit"))</button>
                                    }
                                    else
                                    {
                                        <button class="btn btn-sm btn-primary" @onclick:preventDefault @onclick="() => ShowElement(context)">@(userConfig.GetText("details"))</button>
                                    }
                                </div>
                            </Template>
                        </Column>
                        <Column TableItem="RequestElement" Title="@(userConfig.GetText("type"))" Field="@(x => x.Field)" Sortable="true" Filterable="true" />
                        <Column TableItem="RequestElement" Title="@(userConfig.GetText("ip"))" Field="@(x => x.Ip)" Sortable="true" Filterable="true" />
                        <Column TableItem="RequestElement" Title="@(userConfig.GetText("port"))" Field="@(x => x.Port)" Sortable="true" Filterable="true" />
                    </Table>
                </div>
            </form>
        }
    </Body>
    <Footer>
        <div class="btn-group">
            @if (EditRequestMode)
            {
                <AuthorizeView Roles="admin, requester, fw-admin">
                    <Authorized>
                        <button class="btn btn-sm btn-primary" @onclick:preventDefault @onclick="SaveTask">@(userConfig.GetText("save"))</button>
                    </Authorized>
                    <NotAuthorized>
                        <button class="btn btn-sm btn-primary" disabled>@(userConfig.GetText("save"))</button>
                    </NotAuthorized> 
                </AuthorizeView>
            }
            <button class="btn btn-sm btn-secondary" @onclick="CancelTask">@(userConfig.GetText("cancel"))</button>
        </div>
    </Footer>
</PopUp>

<PopUp Title="@(userConfig.GetText("element") + ": " + actElement.Id)" Show="@ShowElementMode" Large="true" OnClose="() => ShowElementMode = false">
    <Body>
        @if (ShowElementMode)
        {
            <form>
                <div class="form-group row">
                    <label for="elementField" class="col-sm-3 col-form-label col-form-label-sm">@(userConfig.GetText("type"))*:</label>
                    @if (EditRequestMode) 
                    {
                        <div class="col-sm-8">
                            <input id="elementField" type="text" class="form-control form-control-sm" @bind="actElement.Field" />
                        </div>
                    }
                    else
                    {
                        <label class="col-sm-8">@actElement.Field</label>
                    }              
                </div>
                <div class="form-group row">
                    <label for="elementIp" class="col-sm-3 col-form-label col-form-label-sm">@(userConfig.GetText("ip"))*:</label>
                    @if (EditRequestMode) 
                    {
                        <div class="col-sm-8">
                            <input id="elementIp" type="text" class="form-control form-control-sm" @bind="actElement.Ip" />
                        </div>
                    }
                    else
                    {
                        <label class="col-sm-8">@actElement.Ip</label>
                    }              
                </div>
                <div class="form-group row">
                    <label for="elementPort" class="col-sm-3 col-form-label col-form-label-sm">@(userConfig.GetText("port"))*:</label>
                    @if (EditRequestMode) 
                    {
                        <div class="col-sm-8">
                            <input id="elementPort" type="text" class="form-control form-control-sm" @bind="actElement.Port" />
                        </div>
                    }
                    else
                    {
                        <label class="col-sm-8">@actElement.Port</label>
                    }              
                </div>
            </form>
        }
    </Body>
    <Footer>
        <div class="btn-group">
            @if (EditRequestMode)
            {
                <AuthorizeView Roles="admin, requester, fw-admin">
                    <Authorized>
                        <button class="btn btn-sm btn-primary" @onclick:preventDefault @onclick="SaveElement">@(userConfig.GetText("save"))</button>
                    </Authorized>
                    <NotAuthorized>
                        <button class="btn btn-sm btn-primary" disabled>@(userConfig.GetText("save"))</button>
                    </NotAuthorized> 
                </AuthorizeView>
            }
            <button class="btn btn-sm btn-secondary" @onclick="CancelElement">@(userConfig.GetText("cancel"))</button>
        </div>
    </Footer>
</PopUp>

<PopUp Title="@(userConfig.GetText("save_request"))" Show="@PromoteRequestMode" OnClose="() => PromoteRequestMode = false">
    <Body>
        @if (PromoteRequestMode)
        {
            <div class="form-group row">
                <label for="promoteRequest" class="col-sm-3 col-form-label col-form-label-sm">@(userConfig.GetText("promote_to")):</label>
                <div class="col-sm-8">
                    <select id="promoteRequest" class="form-control form-control-sm" @bind="actRequest.StateId">
                        @foreach (int state in actPossibleStates)
                        {
                            <option value="@state">@(states.Name[state])</option>
                        }
                    </select>
                </div>
            </div>
        }
    </Body>
    <Footer>
        <div class="btn-group">
            <AuthorizeView Roles="admin, requester, fw-admin">
                <Authorized>
                    <button class="btn btn-sm btn-primary" @onclick:preventDefault @onclick="SaveRequest">@(userConfig.GetText("save"))</button>
                </Authorized>
                <NotAuthorized>
                    <button class="btn btn-sm btn-primary" disabled>@(userConfig.GetText("save"))</button>
                </NotAuthorized> 
            </AuthorizeView>
            <button class="btn btn-sm btn-secondary" @onclick="CancelSaveRequest">@(userConfig.GetText("cancel"))</button>
        </div>
    </Footer>
</PopUp>


@code
{
    [CascadingParameter]
    Action<Exception?, string, string, bool>? DisplayMessageInUi { get; set; }
    
    private List<RequestTicket> requests = new List<RequestTicket>();

    private bool ShowRequestMode = false;
    private bool AddRequestMode = false;
    private bool EditRequestMode = false;
    private bool AddTaskMode = false;
    private bool ShowTaskMode = false;
    private bool AddElementMode = false;
    private bool ShowElementMode = false;
    private bool PromoteRequestMode = false;
    private List<int> actPossibleStates = new List<int>();

    private RequestTicket actRequest = new RequestTicket();
    private RequestTask actTask = new RequestTask();
    private RequestElement actElement = new RequestElement();

    private RequestStates states = new RequestStates();
    private StateMatrix stateMatrix = new StateMatrix();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            stateMatrix.Init(0);
            states.Init();

            var Variables = new
            {
                from_state = stateMatrix.LowestInputState,
                to_state = 999,
            };
            requests = await apiConnection.SendQueryAsync<List<RequestTicket>>(FWO.Api.Client.Queries.RequestQueries.getTickets, Variables);
        }
        catch (Exception exception)
        {
            DisplayMessageInUi!(exception, userConfig.GetText("fetch_requests"), "", true);
        }
    }


    private void AddRequest()
    {
        AddRequestMode = true;
        actRequest = new RequestTicket();
        EditRequest(actRequest);
    }

    private void EditRequest(RequestTicket request)
    {
        EditRequestMode = true;
        ShowRequestDetails(request);
    }

    private void ShowRequestDetails(RequestTicket request)
    {
        actRequest = new RequestTicket(request);
        ShowRequestMode = true;
    }

    private async Task InitSaveRequest()
    {
        actPossibleStates = stateMatrix.getAllowedTransitions(actRequest.StateId);
        if(actPossibleStates.Count == 1)
        {
            actRequest.StateId = actPossibleStates[0];
            await SaveRequest();
        }
        else
        {
            PromoteRequestMode = true;
        }
    }

    private async Task SaveRequest()
    {
        try
        {
            PromoteRequestMode = false;
            if (actRequest.Sanitize())
            {
                DisplayMessageInUi!(null, userConfig.GetText("save_request"), userConfig.GetText("U0001"), true);
            }
            if (CheckRequestValues())
            {
                foreach(RequestTask task in actRequest.Tasks)
                {
                    task.StateId = actRequest.StateId;
                }

                if (AddRequestMode)
                {                  
                    // insert new request
                    actRequest.CreationDate = DateTime.Now;
                    var Variables = new
                    {
                        title = actRequest.Title,
                        state = actRequest.StateId,
                        reason = actRequest.Reason,
                        requesterId = userConfig.User.DbId
                    };
                    ReturnId[]? returnIds = (await apiConnection.SendQueryAsync<NewReturning>(FWO.Api.Client.Queries.RequestQueries.newTicket, Variables)).ReturnIds;
                    if (returnIds == null)
                    {
                        DisplayMessageInUi!(null, userConfig.GetText("save_request"), userConfig.GetText("E8001"), true);
                    }
                    else
                    {
                        actRequest.Id = returnIds[0].NewId;
                        actRequest.Requester = userConfig.User;
                        requests.Add(actRequest);
                        AddRequestMode = false;
                        EditRequestMode = false;
                        ShowRequestMode = false;
                    }
                }
                else
                {
                    // Update existing request
                    var Variables = new
                    {
                        id = actRequest.Id,
                        title = actRequest.Title,
                        state = actRequest.StateId,
                        reason = actRequest.Reason
                    };
                    int udId = (await apiConnection.SendQueryAsync<ReturnId>(FWO.Api.Client.Queries.RequestQueries.updateTicket, Variables)).UpdatedId;
                    if(udId != actRequest.Id)
                    {
                        DisplayMessageInUi!(null, userConfig.GetText("save_request"), userConfig.GetText("E8002"), true);
                    }
                    else
                    {
                        requests[requests.FindIndex(x => x.Id == actRequest.Id)] = actRequest;
                        EditRequestMode = false;
                        ShowRequestMode = false;
                    }
                }
            }
        }
        catch (Exception exception)
        {
            DisplayMessageInUi!(exception, userConfig.GetText("save_request"), "", true);
        }
    }

    private bool CheckRequestValues()
    {
        if (actRequest.Title == null || actRequest.Title == "")
        {
            DisplayMessageInUi!(null, userConfig.GetText("save_request"), userConfig.GetText("E5102"), true);
            return false;
        }
        return true;
    }
    
    private void CancelRequest()
    {
        AddRequestMode = false;
        EditRequestMode = false;
        ShowRequestMode = false;
    }

    private void CancelSaveRequest()
    {
        PromoteRequestMode = false;
    }


    private void AddTask()
    {
        AddTaskMode = true;
        actTask = new RequestTask();
        ShowTask(actTask);
    }

    private void ShowTask(RequestTask task)
    {
        actTask = new RequestTask(task);
        ShowTaskMode = true;
    }

    private async Task SaveTask()
    {
        try
        {
            if (actTask.Sanitize())
            {
                DisplayMessageInUi!(null, userConfig.GetText("save_task"), userConfig.GetText("U0001"), true);
            }
            if (CheckTaskValues())
            {
                if (AddTaskMode)
                {
                    actRequest.Tasks.Add(actTask);
                }
                else
                {
                    actRequest.Tasks[actRequest.Tasks.FindIndex(x => x.Id == actTask.Id)] = actTask;
                }
                ShowTaskMode = false;
            }
        }
        catch (Exception exception)
        {
            DisplayMessageInUi!(exception, userConfig.GetText("save_task"), "", true);
        }
    }

    private bool CheckTaskValues()
    {
        if (actTask.Title == null || actTask.Title == "")
        {
            DisplayMessageInUi!(null, userConfig.GetText("save_task"), userConfig.GetText("E5102"), true);
            return false;
        }
        return true;
    }

    private void CancelTask()
    {
        AddTaskMode = false;
        ShowTaskMode = false;
    }


    private void AddElement()
    {
        AddElementMode = true;
        actElement = new RequestElement();
        ShowElement(actElement);
    }

    private void ShowElement(RequestElement element)
    {
        actElement = new RequestElement(element);
        ShowElementMode = true;
    }

    private async Task SaveElement()
    {
        try
        {
            if (actElement.Sanitize())
            {
                DisplayMessageInUi!(null, userConfig.GetText("save_element"), userConfig.GetText("U0001"), true);
            }
            if (CheckElementValues())
            {    
                if (AddElementMode)
                {
                    actTask.Elements.Add(actElement);
                }
                else
                {
                    actTask.Elements[actTask.Elements.FindIndex(x => x.Id == actElement.Id)] = actElement;
                }
                ShowElementMode = false;
            }
        }
        catch (Exception exception)
        {
            DisplayMessageInUi!(exception, userConfig.GetText("save_element"), "", true);
        }
    }

    private bool CheckElementValues()
    {
        if (actElement.Ip == null || actElement.Ip == "")
        {
            DisplayMessageInUi!(null, userConfig.GetText("save_element"), userConfig.GetText("E5102"), true);
            return false;
        }
        return true;
    }

    private void CancelElement()
    {
        AddElementMode = false;
        ShowElementMode = false;
    }
}
