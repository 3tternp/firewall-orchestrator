@using FWO.Config.Api

@attribute [Authorize(Roles = "admin, auditor, modeller")]

@inject ApiConnection apiConnection
@inject UserConfig userConfig

<PopUp Title="@(userConfig.GetText("search_interface"))" Large="true" Show="@Display" OnClose="Close">
    <Body>
        @if (Display)
        {
            <div class="form-group row">
                <label class="col-sm-2 col-form-label col-form-label-sm">@(userConfig.GetText("interface")):</label>
                <div class="col-sm-9">
                    <Dropdown ElementType="ModellingConnection" @bind-SelectedElement="selectedInterface" ElementToString="@(i => DisplayInterface(i))" Elements="availableInterfaces" Nullable="true">
                        <ElementTemplate Context="inter">
                            @DisplayInterface(inter)
                        </ElementTemplate>
                    </Dropdown>
                </div>
            </div>
        }
    </Body>
    <Footer>
        <div class="btn-group">
            @if(selectedInterface != null)
            {
                <button type="button" class="btn btn-sm btn-success" @onclick="SelectInterface">@(userConfig.GetText("select"))</button>
            }
            <button type="button" class="btn btn-sm btn-secondary" @onclick="Close">@(userConfig.GetText("cancel"))</button>
        </div>
    </Footer>
</PopUp>


@code
{
    [CascadingParameter]
    Action<Exception?, string, string, bool> DisplayMessageInUi { get; set; } = DefaultInit.DoNothing;

    [Parameter]
    public bool Display { get; set; } = false;

    [Parameter]
    public EventCallback<bool> DisplayChanged { get; set; }

    [Parameter]
    public List<ModellingConnection>? PreselectedInterfaces { get; set; }

    [Parameter]
    public EventCallback<List<ModellingConnection>> PreselectedInterfacesChanged { get; set; }

    [Parameter]
    public Func <ModellingConnection, bool> SelectAction { get; set; }

    [Parameter]
    public Func <ModellingConnection, string> DisplayInterface { get; set; }

    [Parameter]
    public FwoOwner Application { get; set; } = new();


    private List<ModellingConnection> availableInterfaces { get; set; } = new();
    private ModellingConnection? selectedInterface;
    private bool FirstTry = true;


    protected override async Task OnParametersSetAsync()
    {
        if(Display && FirstTry)
        {
            try
            {
                FirstTry = false;
                availableInterfaces = await apiConnection.SendQueryAsync<List<ModellingConnection>>(ModellingQueries.getInterfaces);
                
                foreach(var interf in availableInterfaces)
                {
                    interf.ExtractNwGroups();
                }
            }
            catch (Exception exception)
            {
                DisplayMessageInUi(exception, userConfig.GetText("fetch_data"), "", true);
            }
        }
    }

    private void SelectInterface()
    {
        AddInterface();
        SelectAction(selectedInterface); 
        Close();
    }

    private async Task AddInterface()
    {
        try
        {
            var Variables = new
            {
                appId = Application.Id,
                connectionId = selectedInterface?.Id
            };
            await apiConnection.SendQueryAsync<NewReturning>(FWO.Api.Client.Queries.ModellingQueries.addSelectedConnection, Variables);
            PreselectedInterfaces.Add(selectedInterface);
            await PreselectedInterfacesChanged.InvokeAsync(PreselectedInterfaces);
        }
        catch (Exception exception)
        {
            DisplayMessageInUi(exception, userConfig.GetText("search_interface"), "", true);
        }
    }

    private void Close()
    {
        FirstTry = true;
        Display = false;
        DisplayChanged.InvokeAsync(Display);
    }
}
