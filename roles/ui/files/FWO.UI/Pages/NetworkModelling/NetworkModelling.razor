@using FWO.Config.Api
@using FWO.Ui.Display

@page "/networkmodelling"
@attribute [Authorize(Roles = "admin, modeller, auditor")]

@inject ApiConnection apiConnection
@inject UserConfig userConfig

@if(!EditConnMode)
{
    <h3>@(userConfig.GetText("network_modelling"))</h3>
    <hr />

    <div class="form-group row col-sm-12">
        <label class="col-form-label">@(userConfig.GetText("application")):</label>
        @if(singleApp)
        {
            <label class="col-form-label text-primary ml-2">@ModellingDisplay.DisplayApp(selectedApp)</label>
        }
        else
        {
            <div class="col-sm-2">
                <Dropdown ElementType="FwoOwner" ElementToString="@(a => a.Name)" @bind-SelectedElement="selectedApp" Elements="apps">
                    <ElementTemplate Context="app">
                        @ModellingDisplay.DisplayApp(app)
                    </ElementTemplate>
                </Dropdown>
            </div>
            <button type="button" class="btn btn-sm btn-primary" @onclick="InitApp">@(userConfig.GetText("select"))</button>
        }
        <button type="button" class="ml-5 btn btn-sm btn-primary" @onclick="Report">@(userConfig.GetText("generate_report"))</button>
        @* <button type="button" class="btn btn-sm btn-dark ml-5" @onclick="ExtRequest">@(userConfig.GetText("ext_request"))</button> *@
    </div>
    <hr />
    @if(singleApp || appSelected)
    {
        <div class="form-group row m-2">
            <h5>@(userConfig.GetText("comm_profile"))</h5>
            @if(appActive)
            {
                <button type="button" class="btn btn-sm btn-success ml-5" @onclick="AddConn">@(userConfig.GetText("add_connection"))</button>
                <button type="button" class="btn btn-sm btn-success ml-5" @onclick="AddInterface">@(userConfig.GetText("add_interface"))</button>
            }
        </div>
        <div class="m-2">
            <Table class="table table-bordered table-responsive vheight75 overflow-auto sticky-header" TableItem="ModellingConnection" Items="coproOfApp" PageSize="0" ColumnReorder="true" TableRowClass="@(con => getTableRowClass(con))">
                @if(userConfig.AllowManualOwnerAdmin)
                {
                    <Column TableItem="ModellingConnection" Title="@(userConfig.GetText("actions"))" Field="(x => x.Id)" Sortable="false" Filterable="false">
                        <Template>
                            <div class="btn-group">
                                <button type="button" class="btn btn-sm btn-primary" @onclick="() => ShowDetails(context)">@(userConfig.GetText("details"))</button>
                                @if(appActive)
                                {
                                    <button type="button" class="btn btn-sm btn-warning" @onclick="() => EditConn(context)">@(userConfig.GetText("edit"))</button>
                                    <button type="button" class="btn btn-sm btn-danger" @onclick="() => RequestDeleteConnection(context)">@(userConfig.GetText("delete"))</button>
                                }
                            </div>
                        </Template>
                    </Column>
                }
                <Column TableItem="ModellingConnection" Title="@(userConfig.GetText("id"))" Field="@(x => x.Id)" Sortable="true" Filterable="true" />
                <Column TableItem="ModellingConnection" Title="@(userConfig.GetText("name"))" Field="@(x => x.Name)" Sortable="true" Filterable="true" />
                <Column TableItem="ModellingConnection" Title="@(userConfig.GetText("func_reason"))" Field="@(x => x.Reason)" Sortable="true" Filterable="true" />
                <Column TableItem="ModellingConnection" Title="@(userConfig.GetText("source"))" Field="@(x => x.Id)" Sortable="true" Filterable="true" >
                    <Template>
                        <ExpandableList Elements="GetSrcNames(context)" Context="src" ShowTextIfEmpty="false" AlwaysShowElements="@userConfig.OverviewDisplayLines">
                            <ElementTemplate>
                                @src
                            </ElementTemplate>
                        </ExpandableList>
                    </Template>
                </Column>
                <Column TableItem="ModellingConnection" Title="@(userConfig.GetText("service"))" Field="@(x => x.Id)" Sortable="true" Filterable="true" >
                    <Template>
                        <ExpandableList Elements="GetSvcNames(context)" Context="svc" ShowTextIfEmpty="false" AlwaysShowElements="@userConfig.OverviewDisplayLines">
                            <ElementTemplate>
                                @svc
                            </ElementTemplate>
                        </ExpandableList>
                    </Template>
                </Column>
                <Column TableItem="ModellingConnection" Title="@(userConfig.GetText("destination"))" Field="@(x => x.Id)" Sortable="true" Filterable="true" >
                    <Template>
                        <ExpandableList Elements="GetDstNames(context)" Context="dest" ShowTextIfEmpty="false" AlwaysShowElements="@userConfig.OverviewDisplayLines">
                            <ElementTemplate>
                                @dest
                            </ElementTemplate>
                        </ExpandableList>
                    </Template>
                </Column>
            </Table>
        </div>
    }
}
<EditConn @bind-Display="EditConnMode" Application="@selectedApp" ConnHandler="connHandler"/>
<ConfirmDelete @bind-Display="DeleteConnMode" PerformAction="DeleteConnection" Title="@userConfig.GetText("delete_connection")" DeleteMessage="@deleteMessage"/>

@code
{
    [CascadingParameter]
    private Task<AuthenticationState>? authenticationStateTask { get; set; }

    [CascadingParameter]
    Action<Exception?, string, string, bool> DisplayMessageInUi { get; set; } = DefaultInit.DoNothing;

    private List<FwoOwner> apps = new();
    private FwoOwner selectedApp = new();
    private bool singleApp = false;
    private bool appSelected = false;

    private ModellingConnectionHandler connHandler;
    private List<ModellingConnection> coproOfApp = new();
    private ModellingConnection actConn = new();
    private bool AddConnMode = false;
    private bool EditConnMode = false;
    private bool DeleteConnMode = false;
    private bool readOnly = false;
    private string deleteMessage = "";
    private bool appActive = false;


    protected override async Task OnInitializedAsync()
    {
        try
        {
            apps = await apiConnection.SendQueryAsync<List<FwoOwner>>(FWO.Api.Client.Queries.OwnerQueries.getOwners);
            if (apps.Count == 0)
            {
                DisplayMessageInUi(null, userConfig.GetText("fetch_data"), userConfig.GetText("E9001"), true);
            }
            else
            {
                selectedApp = apps.First();
            }
            if (apps.Count == 1)
            {
                singleApp = true;
                await InitApp();
            }
        }
        catch (Exception exception)
        {
            DisplayMessageInUi(exception, userConfig.GetText("fetch_data"), "", true);
        }
    }

    private async Task InitApp()
    {
        try
        {
            var queryParam = new
            {
                appId = selectedApp.Id
            };
            coproOfApp = await apiConnection.SendQueryAsync<List<ModellingConnection>>(FWO.Api.Client.Queries.ModellingQueries.getConnections, queryParam);
            actConn = coproOfApp.FirstOrDefault() ?? new ModellingConnection();
            appSelected = true;
            appActive = selectedApp.Active;
        }
        catch (Exception exception)
        {
            DisplayMessageInUi(exception, userConfig.GetText("fetch_data"), "", true);
        }
    }

    private List<string> GetSrcNames(ModellingConnection conn)
    {
        List<string> names = ModellingAppRoleWrapper.Resolve(conn.SourceAppRoles).ToList().ConvertAll(s => s.Name);
        names.AddRange(ModellingAppServerWrapper.Resolve(conn.SourceAppServers).ToList().ConvertAll(s => s.Ip));
        return names;
    }
    
    private List<string> GetDstNames(ModellingConnection conn)
    {
        List<string> names = ModellingAppRoleWrapper.Resolve(conn.DestinationAppRoles).ToList().ConvertAll(s => s.Name);
        names.AddRange(ModellingAppServerWrapper.Resolve(conn.DestinationAppServers).ToList().ConvertAll(s => s.Ip));
        return names;
    }

    private List<string> GetSvcNames(ModellingConnection conn)
    {
        List<string> names = ModellingServiceGroupWrapper.Resolve(conn.ServiceGroups).ToList().ConvertAll(s => s.Name);
        names.AddRange(ModellingServiceWrapper.Resolve(conn.Services).ToList().ConvertAll(s => s.Name));
        return names;
    }

    private async Task AddConn()
    {
        readOnly = false;
        AddConnMode = true;
        await HandleConn(new ModellingConnection() { AppId = selectedApp.Id });
    }

    private async Task AddInterface()
    {
        readOnly = false;
        AddConnMode = true;
        await HandleConn(new ModellingConnection(){ AppId = selectedApp.Id, IsInterface = true });
    }

    private async Task ShowDetails(ModellingConnection conn)
    {
        readOnly = true;
        AddConnMode = false;
        await HandleConn(conn);
    }

    private async Task EditConn(ModellingConnection conn)
    {
        readOnly = false;
        AddConnMode = false;
        await HandleConn(conn);
    }

    public async Task HandleConn(ModellingConnection conn)
    {
        connHandler = new ModellingConnectionHandler(apiConnection, userConfig, selectedApp, coproOfApp, conn, AddConnMode, readOnly, DisplayMessageInUi);
        await connHandler.Init();
        EditConnMode = true;
    }

    private void RequestDeleteConnection(ModellingConnection conn)
    {
        actConn = conn;
        deleteMessage = userConfig.GetText("U9001") + actConn.Name + "?";
        DeleteConnMode = true;
    }

    private async Task DeleteConnection()
    {
        try
        {
            if((await apiConnection.SendQueryAsync<ReturnId>(FWO.Api.Client.Queries.ModellingQueries.deleteConnection, new { id = actConn.Id })).AffectedRows > 0)
            {
                coproOfApp.Remove(actConn);
                DeleteConnMode = false;
            }
        }
        catch (Exception exception)
        {
            DisplayMessageInUi(exception, userConfig.GetText("delete_connection"), "", true);
        }
        StateHasChanged();
    }

    private string getTableRowClass(ModellingConnection conn)
    {
        if(conn.IsInterface)
        {
            return "bg-secondary";
        }
        return "";
    }

    private async Task Report()
    {

    }

    private async Task ExtRequest()
    {

    }
}
