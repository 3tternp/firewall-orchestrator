@using FWO.Config.Api
@using FWO.Ui.Display

@inject ApiConnection apiConnection
@inject UserConfig userConfig

<div class="ml-2">
    <h3>@(userConfig.GetText("library"))</h3>
</div>
<div class="col-sm-11 border rounded m-2 p-2">
    <h5>@(userConfig.GetText("app_server"))</h5>
    <div class="form-group row">
        <div class="col-sm-9">
            <select class="form-control form-control-sm" @bind="selectedIpAddresses" multiple>
                @foreach (var appserver in IpAddresses)
                {
                    <option class="draggable" draggable="true" @ondragstart="@(() => HandleDragStart(ResolveElem(selectedIpAddresses)))" value="@appserver.Id">@NwObjDisplay.DisplayWithName(appserver)</option>
                }
            </select>
        </div>
        <div class="col-sm-2">
            <button type="button" class="btn btn-sm btn-primary w-100" @onclick="() => ToAppRole(ResolveElem(selectedIpAddresses))">@(userConfig.GetText("to_app_role"))</button>
        </div>
    </div>
    <button type="button" class="btn btn-sm btn-danger" @onclick="DataInconsistent">@(userConfig.GetText("data_inconsistent"))</button>
</div>

@code
{
    [CascadingParameter]
    Action<Exception?, string, string, bool> DisplayMessageInUi { get; set; } = DefaultInit.DoNothing;

    [Parameter] 
    public DnDContainer Container { get; set; } = new();

    [Parameter]
    public EventCallback<DnDContainer> ContainerChanged { get; set; }

    [Parameter]
    public int Width { get; set; }

    [Parameter]
    public EventCallback<int> WidthChanged { get; set; }

    [Parameter]
    public List<NetworkObject> IpAddresses { get; set; }

    [Parameter]
    public Func<List<NetworkObject>, bool> ToAppRole { get; set; }


    private long[] selectedIpAddresses = new long[]{};
    private int sidebarLeftWidth { get { return Width; } set { Width = value; WidthChanged.InvokeAsync(Width);}}

    protected override async Task OnInitializedAsync()
    {
        try
        {
        }
        catch (Exception exception)
        {
            DisplayMessageInUi(exception, userConfig.GetText("fetch_data"), "", true);
        }
    }

    private void HandleDragStart(List<NetworkObject> selectedIps)
    {
        Container.Clear();
        Container.IpElements = selectedIps;
    }

    private List<NetworkObject> ResolveElem(long[] selectedIds)
    {
        List<NetworkObject> addedIps = new();
        foreach(var id in selectedIds)
        {
            addedIps.Add(IpAddresses.FirstOrDefault(x => x.Id == id));
        }
        return addedIps;
    }

    private async Task DataInconsistent()
    {

    }
}
