@using FWO.Config.Api
@using FWO.Ui.Display

@inject ApiConnection apiConnection
@inject UserConfig userConfig

<div class="ml-2">
    <h3>@(userConfig.GetText("library"))</h3>
</div>
<div class="col-sm-11 border rounded m-2 p-2">
    <h5>@(userConfig.GetText("app_server"))</h5>
    <div class="form-group row">
        <div class="col-sm-9">
            <select class="form-control form-control-sm" @bind="selectedAppServers" multiple>
                @foreach (var appserver in AppRoleHandler.AvailableAppServers)
                {
                    <option class="draggable" draggable="true" @ondragstart="() => HandleDragStart(ResolveAppServer(selectedAppServers))" value="@appserver.Id">@ModellingDisplay.DisplayAppServer(appserver)</option>
                }
            </select>
        </div>
        <div class="col-sm-2">
            <button type="button" class="btn btn-sm btn-primary w-100" @onclick="() => {AppRoleHandler.AppServerToAppRole(ResolveAppServer(selectedAppServers)); AppRoleHandlerChanged.InvokeAsync(AppRoleHandler);}">@(userConfig.GetText("to_app_role"))</button>
        </div>
    </div>
    <AuthorizeView Roles="admin, auditor">
        <Authorized>
            <button type="button" class="btn btn-sm btn-success" @onclick="() => {AppRoleHandler.CreateAppServer(); AppRoleHandlerChanged.InvokeAsync(AppRoleHandler);}">@(userConfig.GetText("add_app_server"))</button>
            @if(selectedAppServers.Length == 1 && ResolveAppServer(selectedAppServers).First().ImportSource == GlobalConfig.kManual)
            {
                <button type="button" class="btn btn-sm btn-warning" @onclick="() => {AppRoleHandler.EditAppServer(ResolveAppServer(selectedAppServers).First()); AppRoleHandlerChanged.InvokeAsync(AppRoleHandler);}">@(userConfig.GetText("edit_app_server"))</button>
                <button type="button" class="btn btn-sm btn-danger" @onclick="() => {AppRoleHandler.RequestDeleteAppServer(ResolveAppServer(selectedAppServers).First()); selectedAppServers = new long[]{}; AppRoleHandlerChanged.InvokeAsync(AppRoleHandler);}">@(userConfig.GetText("delete"))</button>
            }
        </Authorized>
        <NotAuthorized>
            <button type="button" class="btn btn-sm btn-danger" @onclick="DataInconsistent">@(userConfig.GetText("data_inconsistent"))</button>
        </NotAuthorized> 
    </AuthorizeView>
</div>
<EditAppServer @bind-Display="AppRoleHandler.EditAppServerMode" AppServerHandler="AppRoleHandler.AppServerHandler" AddMode="AppRoleHandler.AddAppServerMode"/>
<ConfirmDelete @bind-Display="AppRoleHandler.DeleteAppServerMode" PerformAction="async () => { await AppRoleHandler.DeleteAppServer(); await AppRoleHandlerChanged.InvokeAsync(AppRoleHandler);}" Title="@userConfig.GetText("delete_app_server")" DeleteMessage="@AppRoleHandler.deleteMessage"/>

@code
{
    [CascadingParameter]
    Action<Exception?, string, string, bool> DisplayMessageInUi { get; set; } = DefaultInit.DoNothing;

    [Parameter] 
    public ModellingDnDContainer Container { get; set; } = new();

    [Parameter]
    public EventCallback<ModellingDnDContainer> ContainerChanged { get; set; }

    [Parameter]
    public int Width { get; set; }

    [Parameter]
    public EventCallback<int> WidthChanged { get; set; }

    [Parameter]
    public ModellingAppRoleHandler AppRoleHandler { get; set; }

    [Parameter]
    public EventCallback<ModellingAppRoleHandler> AppRoleHandlerChanged { get; set; }

    private long[] selectedAppServers = new long[]{};
    private int sidebarLeftWidth { get { return Width; } set { Width = value; WidthChanged.InvokeAsync(Width);}}


    private void HandleDragStart(List<ModellingAppServer> selectedAppServers)
    {
        Container.Clear();
        Container.AppServerElements = selectedAppServers;
    }

    private List<ModellingAppServer> ResolveAppServer(long[] selectedIds)
    {
        List<ModellingAppServer> addedIps = new();
        foreach(var id in selectedIds)
        {
            addedIps.Add(AppRoleHandler.AvailableAppServers.FirstOrDefault(x => x.Id == id));
        }
        return addedIps;
    }

    private async Task DataInconsistent()
    {

    }
}
