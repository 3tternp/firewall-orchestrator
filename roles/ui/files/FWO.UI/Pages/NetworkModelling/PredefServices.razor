@using FWO.Config.Api
@using FWO.Ui.Display

@attribute [Authorize(Roles = "admin, auditor")]

@inject ApiConnection apiConnection
@inject UserConfig userConfig


<PopUp Title="@(userConfig.GetText("predef_services") )" Show="@Display" XLarge="true" OnClose="Close">
    <Body>
        @if (Display)
        {
            <div class="form-group row">
                <button type="button" class="btn btn-sm btn-success ml-5" @onclick="CreateServiceGroup">@(userConfig.GetText("add_service_group"))</button>
            </div>
            <Table class="table table-bordered table-responsive vheight75 overflow-auto sticky-header" TableItem="ModellingServiceGroup" Items="PredefServiceGroups" PageSize="0" ColumnReorder="true">
                <Column TableItem="ModellingServiceGroup" Title="@(userConfig.GetText("actions"))" Field="(x => x.Id)" Sortable="false" Filterable="false">
                    <Template>
                        <div class="btn-group">
                            <button type="button" class="btn btn-sm btn-warning" @onclick="() => EditServiceGroup(context)">@(userConfig.GetText("edit"))</button>
                            <AuthorizeView Roles="admin" Context="ctx">
                                <Authorized>
                                    <button type="button" class="btn btn-sm btn-danger" @onclick="() => RequestDeleteServiceGrp(context)">@(userConfig.GetText("delete"))</button>
                                </Authorized>
                                <NotAuthorized>
                                    <button type="button" disabled class="btn btn-sm btn-danger">@(userConfig.GetText("delete"))</button>
                                </NotAuthorized> 
                            </AuthorizeView>
                        </div>
                    </Template>
                </Column>
                <Column TableItem="ModellingServiceGroup" Title="@(userConfig.GetText("id"))" Field="@(x => x.Id)" Sortable="true" Filterable="true" />
                <Column TableItem="ModellingServiceGroup" Title="@(userConfig.GetText("name"))" Field="@(x => x.Name)" Sortable="true" Filterable="true" />
                <Column TableItem="ModellingServiceGroup" Title="@(userConfig.GetText("comment"))" Field="@(x => x.Comment)" Sortable="true" Filterable="true" />
                <Pager ShowPageNumber="true" ShowTotalCount="true" />
            </Table>
        }
    </Body>
    <Footer>
        <button type="button" class="btn btn-sm btn-secondary" @onclick="Close">@(userConfig.GetText("cancel"))</button>
    </Footer>
</PopUp>
<EditServiceGroup @bind-Display="EditSvcGrpMode" @bind-SvcGroupHandler="SvcGrpHandler" AddMode="AddSvcGrpMode"/>
<ConfirmDelete @bind-Display="DeleteSvcGrpMode" PerformAction="async () => {await DeleteServiceGroup(); StateHasChanged();}" Title="@userConfig.GetText("delete_service_group")" DeleteMessage="@Message"/>
<InProgress Display="workInProgress"/>


@code
{
    [CascadingParameter]
    Action<Exception?, string, string, bool> DisplayMessageInUi { get; set; } = DefaultInit.DoNothing;

    [Parameter]
    public bool Display { get; set; } = false;

    [Parameter]
    public EventCallback<bool> DisplayChanged { get; set; }


    public ModellingServiceGroupHandler SvcGrpHandler;
    private FwoOwner dummyApplication = new();  // Todo: Special App for predef Services?
    public List<ModellingServiceGroup> PredefServiceGroups { get; set; } = new();
    public List<ModellingService> AvailableServices { get; set; } = new();
    public List<KeyValuePair<int, int>> AvailableSvcElems { get; set; } = new();
    public bool AddSvcGrpMode = false;
    public bool EditSvcGrpMode = false;
    public bool DeleteSvcGrpMode = false;
    public ModellingServiceGroup ActServiceGroup { get; set; } = new();
    public string Message = "";
    private bool workInProgress = false;
    private bool firstTry = true;


    protected override async Task OnParametersSetAsync()
    {
        if (Display && firstTry)
        {
            await Refresh();
            firstTry = false;
        }
    }

    public async Task Refresh()
    {
        workInProgress = true;
        try
        {
            PredefServiceGroups = await apiConnection.SendQueryAsync<List<ModellingServiceGroup>>(ModellingQueries.getGlobalServiceGroups);
            AvailableServices = await apiConnection.SendQueryAsync<List<ModellingService>>(ModellingQueries.getGlobalServices);
            foreach(var svcGrp in PredefServiceGroups)
            {
                AvailableSvcElems.Add(new KeyValuePair<int, int>((int)ModellingTypes.ObjectType.ServiceGroup, svcGrp.Id));
            }
            if(userConfig.AllowServiceInConn)
            {
                foreach(var svc in AvailableServices)
                {
                    AvailableSvcElems.Add(new KeyValuePair<int, int>((int)ModellingTypes.ObjectType.Service, svc.Id));
                }
            }
        }
        catch (Exception exception)
        {
            DisplayMessageInUi(exception, userConfig.GetText("fetch_data"), "", true);
        }
        workInProgress = false;
    }

    public void CreateServiceGroup()
    {
        AddSvcGrpMode = true;
        HandleServiceGroup(new ModellingServiceGroup(){});
    }

    public void EditServiceGroup(ModellingServiceGroup serviceGroup)
    {
        AddSvcGrpMode = false;
        HandleServiceGroup(serviceGroup);
    }

    public void HandleServiceGroup(ModellingServiceGroup serviceGroup)
    {
        try
        {
            serviceGroup.IsGlobal = true;
            SvcGrpHandler = new ModellingServiceGroupHandler(apiConnection, userConfig, dummyApplication, PredefServiceGroups, serviceGroup, AvailableServices, AvailableSvcElems, AddSvcGrpMode, DisplayMessageInUi);
            EditSvcGrpMode = true;
        }
        catch (Exception exception)
        {
            DisplayMessageInUi(exception, userConfig.GetText("edit_service_group"), "", true);
        }
    }

    public void RequestDeleteServiceGrp(ModellingServiceGroup serviceGroup)
    {
        ActServiceGroup = serviceGroup;
        Message = userConfig.GetText("U9004") + serviceGroup.Name + "?";
        DeleteSvcGrpMode = true;
    }

    public async Task DeleteServiceGroup()
    {
        try
        {
            if((await apiConnection.SendQueryAsync<ReturnId>(ModellingQueries.deleteServiceGroup, new { id = ActServiceGroup.Id })).AffectedRows > 0)
            {
                await ModellingHandlerBase.LogChange(ModellingTypes.ChangeType.Delete, ModellingTypes.ObjectType.ServiceGroup, ActServiceGroup.Id,
                    $"Deleted Predefined Service Group: {ActServiceGroup.Display()}", apiConnection, userConfig, null, DisplayMessageInUi);
                PredefServiceGroups.Remove(ActServiceGroup);
                DeleteSvcGrpMode = false;
            }
        }
        catch (Exception exception)
        {
            DisplayMessageInUi(exception, userConfig.GetText("delete_service_group"), "", true);
        }
    }

    private void Close()
    {
        firstTry = true;
        Display = false;
        DisplayChanged.InvokeAsync(Display);
    }
}
