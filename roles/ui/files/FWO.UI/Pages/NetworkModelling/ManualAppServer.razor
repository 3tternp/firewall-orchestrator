@using FWO.Config.Api
@using FWO.Ui.Display

@attribute [Authorize(Roles = "admin, auditor")]

@inject ApiConnection apiConnection
@inject UserConfig userConfig


<PopUp Title="@(userConfig.GetText("app_server") )" Show="@Display" XLarge="true" OnClose="Close">
    <Body>
        @if (Display)
        {
            <div class="form-group row">
                <button type="button" class="btn btn-sm btn-success ml-5" @onclick="CreateAppServer">@(userConfig.GetText("add_app_server"))</button>
            </div>
            <Table class="table table-bordered table-responsive vheight75 overflow-auto sticky-header" TableItem="ModellingAppServer" Items="ManualAppServers" PageSize="0" ColumnReorder="true">
                <Column TableItem="ModellingAppServer" Title="@(userConfig.GetText("actions"))" Field="(x => x.Id)" Sortable="false" Filterable="false">
                    <Template>
                        <div class="btn-group">
                            @if(context.IsDeleted)
                            {
                                <button type="button" class="btn btn-sm btn-warning" @onclick="() => RequestReactivateAppServer(context)">@(userConfig.GetText("reactivate"))</button>
                            }
                            else
                            {
                                <button type="button" class="btn btn-sm btn-warning" @onclick="() => EditAppServer(context)">@(userConfig.GetText("edit"))</button>
                                <button type="button" class="btn btn-sm btn-danger" @onclick="() => RequestDeleteAppServer(context)">@(userConfig.GetText(context.InUse ? "deactivate" : "delete"))</button>
                            }
                        </div>
                    </Template>
                </Column>
                <Column TableItem="ModellingAppServer" Title="@(userConfig.GetText("id"))" Field="@(x => x.Id)" Sortable="true" Filterable="true" />
                <Column TableItem="ModellingAppServer" Title="@(userConfig.GetText("name"))" Field="@(x => x.Name)" Sortable="true" Filterable="true" >
                    <Template>
                        @((MarkupString)context.DisplayHtml())
                    </Template>
                </Column>
                <Column TableItem="ModellingAppServer" Title="@(userConfig.GetText("ip"))" Field="@(x => x.Ip)" Sortable="true" Filterable="true" />
                <Column TableItem="ModellingAppServer" Title="@(userConfig.GetText("is_in_use"))" Field="@(x => x.Id)" Sortable="true" Filterable="true" >
                    <Template>
                        @(GlobalConfig.ShowBool(context.InUse))
                    </Template>
                </Column>
                <Pager ShowPageNumber="true" ShowTotalCount="true" />
            </Table>
        }
    </Body>
    <Footer>
        <button type="button" class="btn btn-sm btn-secondary" @onclick="Close">@(userConfig.GetText("cancel"))</button>
    </Footer>
</PopUp>
<EditAppServer @bind-Display="EditAppServerMode" AppServerHandler="AppServerHandler" AddMode="AddAppServerMode"/>
<ConfirmDelete @bind-Display="DeleteAppServerMode" PerformAction="DeleteAppServer" Title="@userConfig.GetText("delete_app_server")" DeleteMessage="@Message"/>
<Confirm @bind-Display="ReactivateAppServerMode" PerformAction="ReactivateAppServer" Title="@userConfig.GetText("reactivate")" Message="@Message"/>
<InProgress Display="workInProgress"/>


@code
{
    [CascadingParameter]
    Action<Exception?, string, string, bool> DisplayMessageInUi { get; set; } = DefaultInit.DoNothing;

    [Parameter]
    public bool Display { get; set; } = false;

    [Parameter]
    public EventCallback<bool> DisplayChanged { get; set; }

    [Parameter]
    public FwoOwner Application { get; set; } = new();


    public List<ModellingAppServer> ManualAppServers { get; set; } = new();
    public ModellingAppServerHandler AppServerHandler;
    private ModellingAppServer actAppServer = new();
    public bool AddAppServerMode = false;
    public bool EditAppServerMode = false;
    public bool DeleteAppServerMode = false;
    public bool ReactivateAppServerMode = false;

    public string Message = "";
    private bool workInProgress = false;
    private bool firstTry = true;


    protected override async Task OnParametersSetAsync()
    {
        if (Display && firstTry)
        {
            await Refresh();
            firstTry = false;
        }
    }

    public async Task Refresh()
    {
        workInProgress = true;
        try
        {
            ManualAppServers = await apiConnection.SendQueryAsync<List<ModellingAppServer>>(ModellingQueries.getImportedAppServers, new { importSource = GlobalConfig.kManual, appId = Application.Id });
            foreach(var appServer in ManualAppServers)
            {
                appServer.InUse = await CheckAppServerInUse(appServer);
            }
        }
        catch (Exception exception)
        {
            DisplayMessageInUi(exception, userConfig.GetText("fetch_data"), "", true);
        }
        workInProgress = false;
    }

    public void CreateAppServer()
    {
        AddAppServerMode = true;
        HandleAppServer(new ModellingAppServer(){ ImportSource = GlobalConfig.kManual });
    }

    public void EditAppServer(ModellingAppServer appServer)
    {
        AddAppServerMode = false;
        HandleAppServer(appServer);
    }

    public void HandleAppServer(ModellingAppServer appServer)
    {
        try
        {
            AppServerHandler = new ModellingAppServerHandler(apiConnection, userConfig, Application, appServer, ManualAppServers, AddAppServerMode, DisplayMessageInUi);
            EditAppServerMode = true;
        }
        catch (Exception exception)
        {
            DisplayMessageInUi(exception, userConfig.GetText("edit_app_server"), "", true);
        }
    }

    public void RequestDeleteAppServer(ModellingAppServer appServer)
    {
        actAppServer = appServer;
        Message = userConfig.GetText(appServer.InUse ? "U9007" : "U9008") + appServer.Name + "?";
        DeleteAppServerMode = true;
    }

    public async Task DeleteAppServer()
    {
        try
        {
            if(await CheckAppServerInUse(actAppServer))
            {
                await apiConnection.SendQueryAsync<ReturnId>(ModellingQueries.setAppServerDeletedState, new { id = actAppServer.Id, deleted = true });
                await ModellingHandlerBase.LogChange(ModellingTypes.ChangeType.MarkDeleted, ModellingTypes.ObjectType.AppServer, actAppServer.Id,
                    $"Mark App Server as deleted: {actAppServer.Display()}", apiConnection, userConfig, Application.Id, DisplayMessageInUi);
                actAppServer.IsDeleted = true;
                ManualAppServers[ManualAppServers.FindIndex(x => x.Id == actAppServer.Id)] = actAppServer;
            }
            else if((await apiConnection.SendQueryAsync<ReturnId>(ModellingQueries.deleteAppServer, new { id = actAppServer.Id })).AffectedRows > 0)
            {
                await ModellingHandlerBase.LogChange(ModellingTypes.ChangeType.Delete, ModellingTypes.ObjectType.AppServer, actAppServer.Id,
                    $"Deleted App Server: {actAppServer.Display()}", apiConnection, userConfig, Application.Id, DisplayMessageInUi);
                ManualAppServers.Remove(actAppServer);
            }
            DeleteAppServerMode = false;
            StateHasChanged();
        }
        catch (Exception exception)
        {
            DisplayMessageInUi(exception, userConfig.GetText("delete_app_server"), "", true);
        }
    }

    public void RequestReactivateAppServer(ModellingAppServer appServer)
    {
        actAppServer = appServer;
        Message = userConfig.GetText("U9005") + appServer.Name + "?";
        ReactivateAppServerMode = true;
    }

    public async Task ReactivateAppServer()
    {
        try
        {
            if(actAppServer.IsDeleted)
            {
                await apiConnection.SendQueryAsync<ReturnId>(ModellingQueries.setAppServerDeletedState, new { id = actAppServer.Id, deleted = false });
                await ModellingHandlerBase.LogChange(ModellingTypes.ChangeType.Reactivate, ModellingTypes.ObjectType.AppServer, actAppServer.Id,
                    $"Reactivate App Server: {actAppServer.Display()}", apiConnection, userConfig, Application.Id, DisplayMessageInUi);
                actAppServer.IsDeleted = false;
                ManualAppServers[ManualAppServers.FindIndex(x => x.Id == actAppServer.Id)] = actAppServer;
            }
            ReactivateAppServerMode = false;
            StateHasChanged();
        }
        catch (Exception exception)
        {
            DisplayMessageInUi(exception, userConfig.GetText("reactivate"), "", true);
        }
    }

    private async Task<bool> CheckAppServerInUse(ModellingAppServer appServer)
    {
        try
        {
            List<ModellingAppRole> foundAppRoles = await apiConnection.SendQueryAsync<List<ModellingAppRole>>(ModellingQueries.getAppRolesForAppServer, new { id = appServer.Id });
            if (foundAppRoles.Count == 0)
            {
                List<ModellingConnection> foundConnections = await apiConnection.SendQueryAsync<List<ModellingConnection>>(ModellingQueries.getConnectionIdsForAppServer, new { id = appServer.Id });
                if (foundConnections.Count == 0)
                {
                    return false;
                }
            }
            return true;
        }
        catch (Exception exception)
        {
            DisplayMessageInUi(exception, userConfig.GetText("is_in_use"), "", true);
            return true;
        }
    }

    private void Close()
    {
        firstTry = true;
        Display = false;
        DisplayChanged.InvokeAsync(Display);
    }
}
