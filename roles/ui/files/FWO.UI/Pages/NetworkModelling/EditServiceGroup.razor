@using FWO.Config.Api
@using FWO.Ui.Display

@inject ApiConnection apiConnection
@inject UserConfig userConfig

@if (Display)
{
    <PopUp Title="@(AddMode ? userConfig.GetText("add_service_group") : userConfig.GetText("edit_service_group"))" XLarge="true" Show="@Display" OnClose="Close">
        <Body>
            <div class="row">
                <div class="col-sm-6">
                    <EditServiceGroupLeftSide @bind-Container="Container" @bind-Width="sidebarLeftWidth" SvcGroupHandler="SvcGroupHandler"/>
                </div>
                <div class="col-sm-6">
                    <h3>@(userConfig.GetText("services_group"))</h3>
                    <div class="col-sm-11 border rounded m-2 p-2">
                        <div class="form-group row">
                            <label class="col-sm-3 col-form-label col-form-label-sm">@(userConfig.GetText("name"))*:</label>
                            <input type="text" class=" col-sm-8 form-control form-control-sm" @bind="SvcGroupHandler.ActServiceGroup.Name" />
                        </div>
                        <div class="form-group row">
                            <label class="col-sm-3 col-form-label col-form-label-sm">@(userConfig.GetText("comment")):</label>
                            <input type="text" class=" col-sm-8 form-control form-control-sm" @bind="SvcGroupHandler.ActServiceGroup.Comment" />
                        </div>
                        <div class="col-sm-12">
                            <h6>@(userConfig.GetText("services"))</h6>
                            <div class="minheight-dropzone bg-secondary dropzone" 
                                ondragover="event.preventDefault();"
                                ondragstart="event.dataTransfer.setData('', event.target.id);"
                                @ondrop="HandleSvcDrop">
                                <EditList ElementType="NetworkService" Elements="SvcGroupHandler.AvailableServices.ToArray()" ElementsToAdd="SvcGroupHandler.SvcToAdd" ElementsToDelete="SvcGroupHandler.SvcToDelete" StdLayout="false">
                                    <Display>
                                        <div class="row">
                                            <div class="col-sm-12 border form-control form-control-sm bg-transparent">@ModellingDisplay.DisplayService(context)</div>
                                        </div>
                                    </Display>
                                </EditList>
                            </div>                            
                        </div>
                    </div>
                </div>
            </div>
        </Body>
        <Footer>
            <div class="btn-group">
                <AuthorizeView Roles="admin, modeller">
                    <Authorized>
                        <button type="button" class="btn btn-sm btn-primary" @onclick="async () => {await SvcGroupHandler.Save(); Close();}">@(userConfig.GetText("save"))</button>
                    </Authorized>
                    <NotAuthorized>
                        <button type="button" class="btn btn-sm btn-primary" disabled>@(userConfig.GetText("save"))</button>
                    </NotAuthorized> 
                </AuthorizeView>
                <button type="button" class="btn btn-sm btn-secondary" @onclick="Close">@(userConfig.GetText("cancel"))</button>
            </div>
        </Footer>
    </PopUp>
}

@code
{
    [CascadingParameter]
    Action<Exception?, string, string, bool> DisplayMessageInUi { get; set; } = DefaultInit.DoNothing;

    [Parameter]
    public bool Display { get; set; } = false;
        
    [Parameter]
    public EventCallback<bool> DisplayChanged { get; set; }

    [Parameter]
    public ModellingServiceGroupHandler SvcGroupHandler { get; set; }

    [Parameter]
    public EventCallback<ModellingServiceGroupHandler> SvcGroupHandlerChanged { get; set; }

    [Parameter]
    public bool AddMode { get; set; } = false;


    private DnDContainer Container { get; set; } = new DnDContainer();
    int sidebarLeftWidth = GlobalConfig.kSidebarLeftWidth + 300;

    private bool firstTry = true;


    protected override async Task OnParametersSetAsync()
    {
        if(Display && firstTry)
        {
            if(AddMode)
            {
                SvcGroupHandler.ActServiceGroup.Comment = userConfig.User.Name;
            }
            firstTry = false;
        }
    }

    private async Task HandleSvcDrop()
    {
        if(Container.SvcElements.Count > 0)
        {
            SvcGroupHandler.ServicesToSvcGroup(Container.SvcElements);
        }
        Container.Clear();
    }

    private void Close()
    {
        firstTry = true;
        Display = false;
        DisplayChanged.InvokeAsync(Display);
    }
}
