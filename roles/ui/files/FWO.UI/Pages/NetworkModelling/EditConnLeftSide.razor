@using FWO.Config.Api
@using FWO.Ui.Display
@using FWO.Api.Data

@inject ApiConnection apiConnection
@inject UserConfig userConfig

<Sidebar Collapsible="true" Resizeable="true" PositionLeft="true" @bind-Width="sidebarLeftWidth" >
    <div class="form-group row col-sm-12">
        <div class="mt-3 ml-2 col-sm-6">
            <h3>@(userConfig.GetText("library"))</h3>
        </div>
        <div class="mt-3 col-sm-5 justify-content-end">
            <label class="col-form-label text-success">@Application.Name</label>
        </div>
    </div>
    <div class="col-sm-11 border rounded m-2 p-2">
        @if(!ConnHandler.ActConn.IsInterface && ConnHandler.ActConn.UsedInterfaceId == null)
        {
            <h5>@(userConfig.GetText("interfaces"))</h5>
            <div class="form-group row">
                <div class="col-sm-9">
                    <select class="form-control form-control-sm" @bind="selectedInterface">
                        @foreach (var interf in ConnHandler.AvailableInterfaces)
                        {
                            <option class="draggable" draggable="true" @ondragstart="@(() => {if(selectedInterface > 0) HandleDragStart(ResolveConn(selectedInterface));})" value="@interf.Id">@interf.Name</option>
                        }
                    </select>
                </div>
                <div class="col-sm-3">
                    @if(selectedInterface > 0)
                    {
                        <button type="button" class="btn btn-sm btn-primary w-100" @onclick="() => {ConnHandler.InterfaceToConn(ResolveConn(selectedInterface));ConnHandlerChanged.InvokeAsync(ConnHandler);}">@(userConfig.GetText("use"))</button>
                    }
                </div>
            </div>
            <br><br>
        }
        @if(userConfig.AllowServerInConn)
        {
            <h5>@(userConfig.GetText("app_server"))</h5>
            <div class="form-group row">
                <div class="col-sm-9">
                    <select class="form-control form-control-sm" @bind="selectedAppServer" multiple>
                        @foreach (var appserver in ConnHandler.AvailableAppServer)
                        {
                            <option class="draggable" draggable="true" @ondragstart="@(() => HandleDragStart(ResolveElem(selectedAppServer)))" value="@appserver.Id">@ModellingDisplay.DisplayAppServer(appserver)</option>
                        }
                    </select>
                </div>
                <div class="col-sm-3">
                @if(!ConnHandler.SrcDropForbidden() && selectedAppServer.Length > 0)
                {
                    <button type="button" class="btn btn-sm btn-primary w-100" @onclick="() => {ConnHandler.AppServerToSource(ResolveElem(selectedAppServer));ConnHandlerChanged.InvokeAsync(ConnHandler);}">@(userConfig.GetText("to_source"))</button>
                }
                @if(!ConnHandler.DstDropForbidden() && selectedAppServer.Length > 0)
                {
                    <button type="button" class="btn btn-sm btn-primary w-100 mt-2" @onclick="() => {ConnHandler.AppServerToDestination(ResolveElem(selectedAppServer));ConnHandlerChanged.InvokeAsync(ConnHandler);}">@(userConfig.GetText("to_dest"))</button>
                }
                </div>
            </div>
            <button type="button" class="btn btn-sm btn-danger" @onclick="DataInconsistent">@(userConfig.GetText("data_inconsistent"))</button>
            <br><br>
        }
        <h5>@(userConfig.GetText("app_roles"))</h5>
        <div class="form-group row">
            <div class="col-sm-9">
                <select class="form-control form-control-sm" @bind="selectedAppRoles" multiple>
                    @foreach (var appRole in ConnHandler.AvailableAppRoles)
                    {
                        <option class="draggable" draggable="true" @ondragstart="@(() => HandleDragStart(ResolveAppRole(selectedAppRoles)))" value="@appRole.Id">
                            <div class="col-sm-12 dropzone" 
                                ondragover="event.preventDefault();"
                                ondragstart="event.dataTransfer.setData('', event.target.id);"
                                @ondrop="() => HandleAppServerDropToAppRole(appRole)">
                                @appRole.Name
                            </div>
                        </option>
                    }
                </select>
            </div>
            <div class="col-sm-3">
                @if(!ConnHandler.SrcDropForbidden() && selectedAppRoles.Length > 0)
                {
                    <button type="button" class="btn btn-sm btn-primary w-100" @onclick="() => {ConnHandler.AppRolesToSource(ResolveAppRole(selectedAppRoles));ConnHandlerChanged.InvokeAsync(ConnHandler);}">@(userConfig.GetText("to_source"))</button>
                }
                @if(!ConnHandler.DstDropForbidden() && selectedAppRoles.Length > 0)
                {
                    <button type="button" class="btn btn-sm btn-primary w-100 mt-2" @onclick="() => {ConnHandler.AppRolesToDestination(ResolveAppRole(selectedAppRoles));ConnHandlerChanged.InvokeAsync(ConnHandler);}">@(userConfig.GetText("to_dest"))</button>
                }
            </div>
        </div>
        <div class="form-group row">
            <div class="col-sm-12">
                <button type="button" class="btn btn-sm btn-success" @onclick="async () => WrapAsync(ConnHandler.CreateAppRole)">@(userConfig.GetText("add_app_role"))</button>
                @if(selectedAppRoles.Length == 1)
                {
                    <button type="button" class="btn btn-sm btn-warning" @onclick="async () => {await ConnHandler.EditAppRole(ResolveAppRole(selectedAppRoles).First());await ConnHandlerChanged.InvokeAsync(ConnHandler);}">@(userConfig.GetText("edit_app_role"))</button>
                    <button type="button" class="btn btn-sm btn-danger" @onclick="() => {ConnHandler.RequestDeleteAppRole(ResolveAppRole(selectedAppRoles).First());selectedAppRoles = new long[]{};ConnHandlerChanged.InvokeAsync(ConnHandler);}">@(userConfig.GetText("delete"))</button>
                }
            </div>
        </div>
        <br><br>
        @if(userConfig.AllowServiceInConn)
        {
            @if(!ConnHandler.svcReadOnly)
            {
                <h5>@(userConfig.GetText("services"))</h5>
                <div class="form-group row">
                    <div class="col-sm-9">
                        <select class="form-control form-control-sm" @bind="selectedServices" multiple>
                            @foreach (var service in ConnHandler.AvailableServices)
                            {
                                <option class="draggable" draggable="true" @ondragstart="@(() => HandleDragStart(ResolveSvc(selectedServices)))" value="@service.Id">@ModellingDisplay.DisplayService(service)</option>
                            }
                        </select>
                    </div>
                    <div class="col-sm-3">
                        @if(!ConnHandler.svcReadOnly && selectedServices.Length > 0)
                        {
                            <button type="button" class="btn btn-sm btn-primary w-100" @onclick="() => {ConnHandler.ServicesToConn(ResolveSvc(selectedServices));ConnHandlerChanged.InvokeAsync(ConnHandler);}">@(userConfig.GetText("to_service"))</button>
                        }
                    </div>
                </div>
                <button type="button" class="btn btn-sm btn-success" @onclick="async () => WrapAsync(ConnHandler.CreateService)">@(userConfig.GetText("add_service"))</button>
                @if(selectedServices.Length == 1)
                {
                    <button type="button" class="btn btn-sm btn-warning" @onclick="async () => { await ConnHandler.EditService(ResolveSvc(selectedServices).First()); await ConnHandlerChanged.InvokeAsync(ConnHandler);}">@(userConfig.GetText("edit_service"))</button>
                    <button type="button" class="btn btn-sm btn-danger" @onclick="() => {ConnHandler.RequestDeleteService(ResolveSvc(selectedServices).First());selectedServices = new long[]{};ConnHandlerChanged.InvokeAsync(ConnHandler);}">@(userConfig.GetText("delete"))</button>
                }
                <br><br>
            }
        }
        @if(!ConnHandler.svcReadOnly)
        {
            <h5>@(userConfig.GetText("services_groups"))</h5>
            <div class="form-group row">
                <div class="col-sm-9">
                    <select class="form-control form-control-sm" @bind="selectedServiceGroups" multiple>
                        @foreach (var grp in ConnHandler.AvailableServiceGroups)
                        {
                            <option class="draggable" draggable="true" @ondragstart="@(() => HandleDragStart(ResolveSvcGrp(selectedServiceGroups)))" value="@grp.Id">@ModellingDisplay.DisplayServiceGroup(grp)</option>
                        }
                    </select>
                </div>
                <div class="col-sm-3">
                    @if(!ConnHandler.svcReadOnly && selectedServiceGroups.Length > 0)
                    {
                        <button type="button" class="btn btn-sm btn-primary w-100" @onclick="() => {ConnHandler.ServiceGrpsToConn(ResolveSvcGrp(selectedServiceGroups));ConnHandlerChanged.InvokeAsync(ConnHandler);}">@(userConfig.GetText("to_service"))</button>
                    }
                </div>
            </div>
            <button type="button" class="btn btn-sm btn-success"@onclick="async () => WrapAsync(ConnHandler.CreateServiceGroup)">@(userConfig.GetText("add_service_group"))</button>
            @if(selectedServiceGroups.Length == 1)
            {
                <button type="button" class="btn btn-sm btn-warning"@onclick="async () => { await ConnHandler.EditServiceGroup(ResolveSvcGrp(selectedServiceGroups).First()); await ConnHandlerChanged.InvokeAsync(ConnHandler);}">@(userConfig.GetText("edit_service_group"))</button>
                <button type="button" class="btn btn-sm btn-danger"@onclick="() => {ConnHandler.RequestDeleteServiceGrp(ResolveSvcGrp(selectedServiceGroups).First());selectedServiceGroups = new long[]{};ConnHandlerChanged.InvokeAsync(ConnHandler);}">@(userConfig.GetText("delete"))</button>
            }
        }
    </div>
</Sidebar>
<ConfirmDelete @bind-Display="ConnHandler.DeleteAppRoleMode" PerformAction="async () => WrapAsync(ConnHandler.DeleteAppRole)" Title="@userConfig.GetText("delete_app_role")" DeleteMessage="@ConnHandler.deleteMessage"/>
<ConfirmDelete @bind-Display="ConnHandler.DeleteSvcGrpMode" PerformAction="async () => WrapAsync(ConnHandler.DeleteServiceGroup)" Title="@userConfig.GetText("delete_service_group")" DeleteMessage="@ConnHandler.deleteMessage"/>
<ConfirmDelete @bind-Display="ConnHandler.DeleteServiceMode" PerformAction="async () => WrapAsync(ConnHandler.DeleteService)" Title="@userConfig.GetText("delete_service")" DeleteMessage="@ConnHandler.deleteMessage"/>

@code
{
    [CascadingParameter]
    Action<Exception?, string, string, bool> DisplayMessageInUi { get; set; } = DefaultInit.DoNothing;

    [Parameter] 
    public FwoOwner Application { get; set; } = new FwoOwner();

    [Parameter] 
    public ModellingDnDContainer Container { get; set; } = new();

    [Parameter]
    public EventCallback<ModellingDnDContainer> ContainerChanged { get; set; }

    [Parameter]
    public int Width { get; set; }

    [Parameter]
    public EventCallback<int> WidthChanged { get; set; }

    [Parameter]
    public ModellingConnectionHandler ConnHandler { get; set; }

    [Parameter]
    public EventCallback<ModellingConnectionHandler> ConnHandlerChanged { get; set; }


    private long[] selectedAppServer = new long[]{};
    private long[] selectedAppRoles = new long[]{};
    private long[] selectedServices = new long[]{};
    private long[] selectedServiceGroups = new long[]{};
    private long selectedInterface = 0;
    private bool FirstTry = true;
    private int sidebarLeftWidth { get { return Width; } set { Width = value; WidthChanged.InvokeAsync(Width);}}


    protected override void OnParametersSet()
    {
        if(FirstTry)
        {
            if(ConnHandler.AvailableInterfaces.Count > 0)
            {
                selectedInterface = ConnHandler.AvailableInterfaces.First().Id;
            }
            FirstTry = false;
        }
    }

    private void HandleDragStart(ModellingConnection selectedConn)
    {
        Container.Clear();
        Container.ConnElement = selectedConn;
    }

    private void HandleDragStart(List<ModellingAppServer> selectedIps)
    {
        Container.Clear();
        Container.AppServerElements = selectedIps;
    }

    private void HandleDragStart(List<ModellingAppRole> selectedAppRoles)
    {
        Container.Clear();
        Container.AppRoleElements = selectedAppRoles;
    }

    private void HandleDragStart(List<ModellingService> selectedSvcs)
    {
        Container.Clear();
        Container.SvcElements = selectedSvcs;
    }

    private void HandleDragStart(List<ModellingServiceGroup> selectedSvcGrps)
    {
        Container.Clear();
        Container.SvcGrpElements = selectedSvcGrps;
    }

    private async Task HandleAppServerDropToAppRole(ModellingAppRole appRole)
    {
        @* if(Container.AppServerElements.Count > 0)
        {
            appRole.AppServers.AddRange(Container.AppServerElements);
            // save ???
        } *@
        Container.Clear();
    }

    private ModellingConnection ResolveConn(long selectedConn)
    {
        return ConnHandler.AvailableInterfaces.FirstOrDefault(x => x.Id == selectedConn);
    }

    private List<ModellingAppServer> ResolveElem(long[] selectedIds)
    {
        List<ModellingAppServer> addedIps = new();
        foreach(var id in selectedIds)
        {
            addedIps.Add(ConnHandler.AvailableAppServer.FirstOrDefault(x => x.Id == id));
        }
        return addedIps;
    }

    private List<ModellingAppRole> ResolveAppRole(long[] selectedIds)
    {
        List<ModellingAppRole> addedAppRoles = new();
        foreach(var id in selectedIds)
        {
            addedAppRoles.Add(ConnHandler.AvailableAppRoles.FirstOrDefault(x => x.Id == id));
        }
        return addedAppRoles;
    }

    private List<ModellingService> ResolveSvc(long[] selectedIds)
    {
        List<ModellingService> addedSvcs = new();
        foreach(var id in selectedIds)
        {
            addedSvcs.Add(ConnHandler.AvailableServices.FirstOrDefault(x => x.Id == id));
        }
        return addedSvcs;
    }

    private List<ModellingServiceGroup> ResolveSvcGrp(long[] selectedIds)
    {
        List<ModellingServiceGroup> addedSvcGrps = new();
        foreach(var id in selectedIds)
        {
            addedSvcGrps.Add(ConnHandler.AvailableServiceGroups.FirstOrDefault(x => x.Id == id));
        }
        return addedSvcGrps;
    }

    private async Task DataInconsistent()
    {

    }

    private async Task WrapAsync(Func<Task> calledFunc)
    {
        await calledFunc();
        await ConnHandlerChanged.InvokeAsync(ConnHandler);
    }
}
