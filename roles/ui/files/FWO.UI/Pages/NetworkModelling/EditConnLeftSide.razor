@using FWO.Config.Api
@using FWO.Ui.Display
@using FWO.Api.Data

@inject ApiConnection apiConnection
@inject UserConfig userConfig

<Sidebar Collapsible="true" Resizeable="true" PositionLeft="true" @bind-Width="sidebarLeftWidth" >
    <div class="form-group row col-sm-12">
        <div class="mt-3 ml-2 col-sm-6">
            <h3>@(userConfig.GetText("library"))</h3>
        </div>
        <div class="mt-3 col-sm-5 justify-content-end">
            <label class="col-form-label text-success">@Application.Name</label>
        </div>
    </div>
    <div class="col-sm-11 border rounded m-2 p-2">
        @if(!ConnHandler.ActConn.IsInterface && ConnHandler.ActConn.UsedInterfaceId == null)
        {
            <h5>@(userConfig.GetText("interfaces"))</h5>
            <div class="form-group row">
                <div class="col-sm-9">
                    <select class="form-control form-control-sm" @bind="selectedInterface">
                        @foreach (var interf in ConnHandler.AvailableInterfaces)
                        {
                            <option class="draggable" draggable="true" @ondragstart="@(() => {if(selectedInterface > 0) HandleDragStart(ResolveConn(selectedInterface));})" value="@interf.Id">@interf.Name</option>
                        }
                    </select>
                </div>
                <div class="col-sm-3">
                    @if(selectedInterface > 0)
                    {
                        <button type="button" class="btn btn-sm btn-primary w-100" @onclick="() => {ConnHandler.InterfaceToConn(ResolveConn(selectedInterface)); ConnHandlerChanged.InvokeAsync(ConnHandler);}">@(userConfig.GetText("use"))</button>
                    }
                </div>
            </div>
            <br><br>
        }
        @if(userConfig.AllowServerInConn)
        {
            <h5>@(userConfig.GetText("app_server"))</h5>
            <div class="form-group row">
                <div class="col-sm-9">
                    <select class="form-control form-control-sm" @bind="selectedAppServers" multiple>
                        @foreach (var appserver in ConnHandler.AvailableAppServers)
                        {
                            <option class="draggable" draggable="true" @ondragstart="() => HandleDragStart(ResolveAppServer(selectedAppServers))" value="@appserver.Id">@ModellingDisplay.DisplayAppServer(appserver)</option>
                        }
                    </select>
                </div>
                <div class="col-sm-3">
                @if(!ConnHandler.SrcDropForbidden() && selectedAppServers.Length > 0)
                {
                    <button type="button" class="btn btn-sm btn-primary w-100" @onclick="() => {ConnHandler.AppServerToSource(ResolveAppServer(selectedAppServers)); ConnHandlerChanged.InvokeAsync(ConnHandler);}">@(userConfig.GetText("to_source"))</button>
                }
                @if(!ConnHandler.DstDropForbidden() && selectedAppServers.Length > 0)
                {
                    <button type="button" class="btn btn-sm btn-primary w-100 mt-2" @onclick="() => {ConnHandler.AppServerToDestination(ResolveAppServer(selectedAppServers)); ConnHandlerChanged.InvokeAsync(ConnHandler);}">@(userConfig.GetText("to_dest"))</button>
                }
                </div>
            </div>
            <AuthorizeView Roles="admin, auditor">
                <Authorized>
                    <button type="button" class="btn btn-sm btn-success" @onclick="() => {ConnHandler.CreateAppServer(); ConnHandlerChanged.InvokeAsync(ConnHandler);}">@(userConfig.GetText("add_app_server"))</button>
                    @if(selectedAppServers.Length == 1 && ResolveAppServer(selectedAppServers).First().ImportSource == GlobalConfig.kManual)
                    {
                        <button type="button" class="btn btn-sm btn-warning" @onclick="() => {ConnHandler.EditAppServer(ResolveAppServer(selectedAppServers).First()); ConnHandlerChanged.InvokeAsync(ConnHandler);}">@(userConfig.GetText("edit_app_server"))</button>
                        <button type="button" class="btn btn-sm btn-danger" @onclick="() => {ConnHandler.RequestDeleteAppServer(ResolveAppServer(selectedAppServers).First()); selectedAppServers = new long[]{}; ConnHandlerChanged.InvokeAsync(ConnHandler);}">@(userConfig.GetText("delete"))</button>
                    }
                </Authorized>
                <NotAuthorized>
                    <button type="button" class="btn btn-sm btn-danger" @onclick="DataInconsistent">@(userConfig.GetText("data_inconsistent"))</button>
                </NotAuthorized> 
            </AuthorizeView>
            <br><br>
        }
        <h5>@(userConfig.GetText("app_roles"))</h5>
        <div class="form-group row">
            <div class="col-sm-9">
                <select class="form-control form-control-sm" @bind="selectedAppRoles" multiple>
                    @foreach (var appRole in ConnHandler.AvailableAppRoles)
                    {
                        <option class="draggable" draggable="true" @ondragstart="() => HandleDragStart(ResolveAppRole(selectedAppRoles))" value="@appRole.Id">
                            <div class="col-sm-12 dropzone" 
                                ondragover="event.preventDefault();"
                                ondragstart="event.dataTransfer.setData('', event.target.id);"
                                @ondrop="() => HandleAppServerDropToAppRole(appRole)">
                                @ModellingDisplay.DisplayAppRole(appRole)
                            </div>
                        </option>
                    }
                </select>
            </div>
            <div class="col-sm-3">
                @if(!ConnHandler.SrcDropForbidden() && selectedAppRoles.Length > 0)
                {
                    <button type="button" class="btn btn-sm btn-primary w-100" @onclick="() => {ConnHandler.AppRolesToSource(ResolveAppRole(selectedAppRoles)); ConnHandlerChanged.InvokeAsync(ConnHandler);}">@(userConfig.GetText("to_source"))</button>
                }
                @if(!ConnHandler.DstDropForbidden() && selectedAppRoles.Length > 0)
                {
                    <button type="button" class="btn btn-sm btn-primary w-100 mt-2" @onclick="() => {ConnHandler.AppRolesToDestination(ResolveAppRole(selectedAppRoles)); ConnHandlerChanged.InvokeAsync(ConnHandler);}">@(userConfig.GetText("to_dest"))</button>
                }
            </div>
        </div>
        <div class="form-group row">
            <div class="col-sm-12">
                <button type="button" class="btn btn-sm btn-success" @onclick="() => {ConnHandler.CreateAppRole(); ConnHandlerChanged.InvokeAsync(ConnHandler);}">@(userConfig.GetText("add_app_role"))</button>
                @if(selectedAppRoles.Length == 1)
                {
                    <button type="button" class="btn btn-sm btn-warning" @onclick="() => {ConnHandler.EditAppRole(ResolveAppRole(selectedAppRoles).First()); ConnHandlerChanged.InvokeAsync(ConnHandler);}">@(userConfig.GetText("edit_app_role"))</button>
                    <button type="button" class="btn btn-sm btn-danger" @onclick="() => {ConnHandler.RequestDeleteAppRole(ResolveAppRole(selectedAppRoles).First()); selectedAppRoles = new int[]{}; ConnHandlerChanged.InvokeAsync(ConnHandler);}">@(userConfig.GetText("delete"))</button>
                }
            </div>
        </div>
        <br><br>
        @* @if(userConfig.AllowServiceInConn)
        {
            @if(!ConnHandler.svcReadOnly)
            {
                <h5>@(userConfig.GetText("services"))</h5>
                <div class="form-group row">
                    <div class="col-sm-9">
                        <select class="form-control form-control-sm" @bind="selectedServices" multiple>
                            @foreach (var service in ConnHandler.AvailableServices)
                            {
                                <option class="draggable" draggable="true" @ondragstart="() => HandleDragStart(ResolveSvc(selectedServices))" value="@service.Id">@ModellingDisplay.DisplayService(service)</option>
                            }
                        </select>
                    </div>
                    <div class="col-sm-3">
                        @if(!ConnHandler.svcReadOnly && selectedServices.Length > 0)
                        {
                            <button type="button" class="btn btn-sm btn-primary w-100" @onclick="() => {ConnHandler.ServicesToConn(ResolveSvc(selectedServices)); ConnHandlerChanged.InvokeAsync(ConnHandler);}">@(userConfig.GetText("to_service"))</button>
                        }
                    </div>
                </div>
                <button type="button" class="btn btn-sm btn-success" @onclick="() => {ConnHandler.CreateService(); ConnHandlerChanged.InvokeAsync(ConnHandler);}">@(userConfig.GetText("add_service"))</button>
                @if(selectedServices.Length == 1)
                {
                    <button type="button" class="btn btn-sm btn-warning" @onclick="() => {ConnHandler.EditService(ResolveSvc(selectedServices).First()); ConnHandlerChanged.InvokeAsync(ConnHandler);}">@(userConfig.GetText("edit_service"))</button>
                    <button type="button" class="btn btn-sm btn-danger" @onclick="() => {ConnHandler.RequestDeleteService(ResolveSvc(selectedServices).First()); selectedServices = new int[]{}; ConnHandlerChanged.InvokeAsync(ConnHandler);}">@(userConfig.GetText("delete"))</button>
                }
                <br><br>
            }
        } *@
        @if(!ConnHandler.svcReadOnly)
        {
            <h5>@(userConfig.GetText("services"))</h5>
            <div class="form-group row">
                <div class="col-sm-9">
                    <select class="form-control form-control-sm" @bind="selectedSvcElems" multiple>
                        @for (int index = 0 ; index < ConnHandler.AvailableSvcElems.Count ; index++)
                        {
                            <option class="draggable" draggable="true" @ondragstart="() => HandleDragStart(selectedSvcElems)" value="@index">
                                @(ConnHandler.AvailableSvcElems[index].Key == (int)ModellingTypes.ObjectType.ServiceGroup ? 
                                ModellingDisplay.DisplayServiceGroup(ResolveSvcGrp(ConnHandler.AvailableSvcElems[index].Value)) : 
                                ModellingDisplay.DisplayService(ResolveSvc(ConnHandler.AvailableSvcElems[index].Value)))
                            </option>
                        }
                    </select>
                </div>
                <div class="col-sm-3">
                    @if(selectedSvcElems.Length > 0)
                    {
                        <button type="button" class="btn btn-sm btn-primary w-100" @onclick="() => {ServiceElemsToConn(selectedSvcElems); ConnHandlerChanged.InvokeAsync(ConnHandler);}">@(userConfig.GetText("to_service"))</button>
                    }
                </div>
            </div>
            <button type="button" class="btn btn-sm btn-success"@onclick="() => {ConnHandler.CreateServiceGroup(); ConnHandlerChanged.InvokeAsync(ConnHandler);}">@(userConfig.GetText("add_service_group"))</button>
            @if(selectedSvcElems.Length == 1)
            {
                @if(ConnHandler.AvailableSvcElems[selectedSvcElems[0]].Key == (int)ModellingTypes.ObjectType.ServiceGroup)
                {
                    if(!ResolveSvcGrp(ConnHandler.AvailableSvcElems[selectedSvcElems[0]].Value).IsGlobal)
                    {
                        <button type="button" class="btn btn-sm btn-warning" @onclick="() => {ConnHandler.EditServiceGroup(ResolveSvcGrp(ConnHandler.AvailableSvcElems[selectedSvcElems[0]].Value)); ConnHandlerChanged.InvokeAsync(ConnHandler);}">@(userConfig.GetText("edit_service_group"))</button>
                        <button type="button" class="btn btn-sm btn-danger" @onclick="() => {ConnHandler.RequestDeleteServiceGrp(ResolveSvcGrp(ConnHandler.AvailableSvcElems[selectedSvcElems[0]].Value)); selectedSvcElems = new int[]{}; ConnHandlerChanged.InvokeAsync(ConnHandler);}">@(userConfig.GetText("delete"))</button>
                    }
                }
                else
                {
                    if(!ResolveSvc(ConnHandler.AvailableSvcElems[selectedSvcElems[0]].Value).IsGlobal)
                    {
                        <button type="button" class="btn btn-sm btn-warning" @onclick="() => {ConnHandler.EditService(ResolveSvc(ConnHandler.AvailableSvcElems[selectedSvcElems[0]].Value)); ConnHandlerChanged.InvokeAsync(ConnHandler);}">@(userConfig.GetText("edit_service"))</button>
                        <button type="button" class="btn btn-sm btn-danger" @onclick="() => {ConnHandler.RequestDeleteService(ResolveSvc(ConnHandler.AvailableSvcElems[selectedSvcElems[0]].Value)); selectedSvcElems = new int[]{}; ConnHandlerChanged.InvokeAsync(ConnHandler);}">@(userConfig.GetText("delete"))</button>
                    }
                }
            }
        }
    </div>
</Sidebar>
<EditAppRole @bind-Display="ConnHandler.EditAppRoleMode" @bind-AppRoleHandler="ConnHandler.AppRoleHandler" AddMode="ConnHandler.AddAppRoleMode"/>
<ConfirmDelete @bind-Display="ConnHandler.DeleteAppRoleMode" PerformAction="async () => WrapAsync(ConnHandler.DeleteAppRole)" Title="@userConfig.GetText("delete_app_role")" DeleteMessage="@ConnHandler.deleteMessage"/>
<EditAppServer @bind-Display="ConnHandler.EditAppServerMode" AppServerHandler="ConnHandler.AppServerHandler" AddMode="ConnHandler.AddAppServerMode"/>
<ConfirmDelete @bind-Display="ConnHandler.DeleteAppServerMode" PerformAction="async () => WrapAsync(ConnHandler.DeleteAppServer)" Title="@userConfig.GetText("delete_app_server")" DeleteMessage="@ConnHandler.deleteMessage"/>
<EditServiceGroup @bind-Display="ConnHandler.EditSvcGrpMode" @bind-SvcGroupHandler="ConnHandler.SvcGrpHandler" AddMode="ConnHandler.AddSvcGrpMode"/>
<ConfirmDelete @bind-Display="ConnHandler.DeleteSvcGrpMode" PerformAction="async () => WrapAsync(ConnHandler.DeleteServiceGroup)" Title="@userConfig.GetText("delete_service_group")" DeleteMessage="@ConnHandler.deleteMessage"/>
<EditService @bind-Display="ConnHandler.EditServiceMode" ServiceHandler="ConnHandler.ServiceHandler" AddMode="ConnHandler.AddServiceMode"/>
<ConfirmDelete @bind-Display="ConnHandler.DeleteServiceMode" PerformAction="async () => WrapAsync(ConnHandler.DeleteService)" Title="@userConfig.GetText("delete_service")" DeleteMessage="@ConnHandler.deleteMessage"/>

@code
{
    [CascadingParameter]
    Action<Exception?, string, string, bool> DisplayMessageInUi { get; set; } = DefaultInit.DoNothing;

    [Parameter] 
    public FwoOwner Application { get; set; } = new FwoOwner();

    [Parameter] 
    public ModellingDnDContainer Container { get; set; } = new();

    [Parameter]
    public EventCallback<ModellingDnDContainer> ContainerChanged { get; set; }

    [Parameter]
    public int Width { get; set; }

    [Parameter]
    public EventCallback<int> WidthChanged { get; set; }

    [Parameter]
    public ModellingConnectionHandler ConnHandler { get; set; }

    [Parameter]
    public EventCallback<ModellingConnectionHandler> ConnHandlerChanged { get; set; }


    private long[] selectedAppServers = new long[]{};
    private int[] selectedAppRoles = new int[]{};
    // private int[] selectedServices = new int[]{};
    // private int[] selectedServiceGroups = new int[]{};
    private int[] selectedSvcElems = new int[]{};
    private int selectedInterface = 0;
    private bool FirstTry = true;
    private int sidebarLeftWidth { get { return Width; } set { Width = value; WidthChanged.InvokeAsync(Width);}}


    protected override void OnParametersSet()
    {
        if(FirstTry)
        {
            if(ConnHandler.AvailableInterfaces.Count > 0)
            {
                selectedInterface = ConnHandler.AvailableInterfaces.First().Id;
            }
            FirstTry = false;
        }
    }

    private void ServiceElemsToConn(int[] selectedSvcElems)
    {
        List<ModellingServiceGroup> serviceGroups = new();
        List<ModellingService> services = new();
        foreach(int elem in selectedSvcElems)
        {
            if(ConnHandler.AvailableSvcElems[elem].Key == (int)ModellingTypes.ObjectType.ServiceGroup)
            {
                serviceGroups.Add(ResolveSvcGrp(ConnHandler.AvailableSvcElems[elem].Value));
            }
            else
            {
                services.Add(ResolveSvc(ConnHandler.AvailableSvcElems[elem].Value));
            }
        }
        if(serviceGroups.Count > 0)
        {
            ConnHandler.ServiceGrpsToConn(serviceGroups);
        }
        if(services.Count > 0)
        {
            ConnHandler.ServicesToConn(services);
        }
    }

    private void HandleDragStart(int[] selectedSvcElems)
    {
        Container.Clear();
        foreach(int elem in selectedSvcElems)
        {
            if(ConnHandler.AvailableSvcElems[elem].Key == (int)ModellingTypes.ObjectType.ServiceGroup)
            {
                Container.SvcGrpElements.Add(ResolveSvcGrp(ConnHandler.AvailableSvcElems[elem].Value));
            }
            else
            {
                Container.SvcElements.Add(ResolveSvc(ConnHandler.AvailableSvcElems[elem].Value));
            }
        }
    }

    private void HandleDragStart(ModellingConnection selectedConn)
    {
        Container.Clear();
        Container.ConnElement = selectedConn;
    }

    private void HandleDragStart(List<ModellingAppServer> selectedIps)
    {
        Container.Clear();
        Container.AppServerElements = selectedIps;
    }

    private void HandleDragStart(List<ModellingAppRole> selectedAppRoles)
    {
        Container.Clear();
        Container.AppRoleElements = selectedAppRoles;
    }

    @* private void HandleDragStart(List<ModellingService> selectedSvcs)
    {
        Container.Clear();
        Container.SvcElements = selectedSvcs;
    }

    private void HandleDragStart(List<ModellingServiceGroup> selectedSvcGrps)
    {
        Container.Clear();
        Container.SvcGrpElements = selectedSvcGrps;
    } *@

    private async Task HandleAppServerDropToAppRole(ModellingAppRole appRole)
    {
        @* if(Container.AppServerElements.Count > 0)
        {
            appRole.AppServers.AddRange(Container.AppServerElements);
            // save ???
        } *@
        Container.Clear();
    }

    private ModellingConnection ResolveConn(int selectedConn)
    {
        return ConnHandler.AvailableInterfaces.FirstOrDefault(x => x.Id == selectedConn);
    }

    private List<ModellingAppServer> ResolveAppServer(long[] selectedIds)
    {
        List<ModellingAppServer> addedIps = new();
        foreach(var id in selectedIds)
        {
            addedIps.Add(ConnHandler.AvailableAppServers.FirstOrDefault(x => x.Id == id));
        }
        return addedIps;
    }

    private List<ModellingAppRole> ResolveAppRole(int[] selectedIds)
    {
        List<ModellingAppRole> addedAppRoles = new();
        foreach(var id in selectedIds)
        {
            addedAppRoles.Add(ConnHandler.AvailableAppRoles.FirstOrDefault(x => x.Id == id));
        }
        return addedAppRoles;
    }

    private ModellingService ResolveSvc(int selectedId)
    {
        return ConnHandler.AvailableServices.FirstOrDefault(x => x.Id == selectedId);
        @* List<ModellingService> addedSvcs = new();
        foreach(var id in selectedIds)
        {
            addedSvcs.Add(ConnHandler.AvailableServices.FirstOrDefault(x => x.Id == id));
        }
        return addedSvcs; *@
    }

    private ModellingServiceGroup? ResolveSvcGrp(int selectedId)
    {
        return ConnHandler.AvailableServiceGroups.FirstOrDefault(x => x.Id == selectedId);
        @* List<ModellingServiceGroup> addedSvcGrps = new();
        foreach(var id in selectedIds)
        {
            addedSvcGrps.Add(ConnHandler.AvailableServiceGroups.FirstOrDefault(x => x.Id == id));
        }
        return addedSvcGrps; *@
    }

    private async Task DataInconsistent()
    {

    }

    private async Task WrapAsync(Func<Task> calledFunc)
    {
        await calledFunc();
        await ConnHandlerChanged.InvokeAsync(ConnHandler);
    }
}
