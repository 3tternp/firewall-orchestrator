@using FWO.Config.Api
@using FWO.Ui.Display

@inject ApiConnection apiConnection
@inject UserConfig userConfig

@if (Display)
{
    <PopUp Title="@(AddMode ? userConfig.GetText("add_app_role") : userConfig.GetText("edit_app_role"))" XLarge="true" Show="@Display" OnClose="Close">
        <Body>
            <div class="row">
                <div class="col-sm-6">
                    <EditAppRoleLeftSide @bind-Container="Container" @bind-Width="sidebarLeftWidth" @bind-AppRoleHandler="AppRoleHandler"/>
                </div>
                <div class="col-sm-6">
                    <h3>@(userConfig.GetText("app_role"))</h3>
                    <div class="col-sm-11 border rounded m-2 p-2">
                        <div class="form-group row">
                            <label class="col-sm-3 col-form-label col-form-label-sm">@(userConfig.GetText("area"))*:</label>
                            <div class="col-sm-8">
                                <Dropdown ElementType="ModellingNetworkArea" SelectedElement="AppRoleHandler.ActAppRole.Area" ElementToString="@(a => a.Name)" 
                                        SelectedElementChanged="SelectedAreaChanged" Elements="areas" Nullable="true">
                                    <ElementTemplate Context="area">
                                        @area.Name
                                    </ElementTemplate>
                                </Dropdown>
                            </div>
                        </div>
                        <div class="form-group row">
                            <label class="col-sm-3 col-form-label col-form-label-sm">@(userConfig.GetText("name"))*:</label>
                            <input type="text" class=" col-sm-2 form-control form-control-sm" readonly @bind="AppRoleHandler.ActAppRole.NameFixedPart" />
                            <input type="text" class=" col-sm-6 form-control form-control-sm" @bind="AppRoleHandler.ActAppRole.NameFreePart" />
                        </div>
                        <div class="form-group row">
                            <label class="col-sm-3 col-form-label col-form-label-sm">@(userConfig.GetText("comment")):</label>
                            <input type="text" class=" col-sm-8 form-control form-control-sm" @bind="AppRoleHandler.ActAppRole.Comment" />
                        </div>
                        <div class="col-sm-12">
                            <h6>@(userConfig.GetText("app_server"))</h6>
                            <div class="minheight-dropzone bg-secondary dropzone" 
                                ondragover="event.preventDefault();"
                                ondragstart="event.dataTransfer.setData('', event.target.id);"
                                @ondrop="HandleServerDrop">
                                <EditList ElementType="ModellingAppServer" Elements="ModellingAppServerWrapper.Resolve(AppRoleHandler.ActAppRole.AppServers)" ElementsToAdd="AppRoleHandler.AppServerToAdd" ElementsToDelete="AppRoleHandler.AppServerToDelete" StdLayout="false">
                                    <Display>
                                        <div class="row">
                                            <div class="col-sm-12 border form-control form-control-sm bg-transparent">@ModellingDisplay.DisplayAppServer(context)</div>
                                        </div>
                                    </Display>
                                </EditList>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </Body>
        <Footer>
            <div class="btn-group">
                <AuthorizeView Roles="admin, modeller">
                    <Authorized>
                        <button type="button" class="btn btn-sm btn-primary" @onclick="async () => {await AppRoleHandler.Save(); Close();}">@(userConfig.GetText("save"))</button>
                    </Authorized>
                    <NotAuthorized>
                        <button type="button" class="btn btn-sm btn-primary" disabled>@(userConfig.GetText("save"))</button>
                    </NotAuthorized> 
                </AuthorizeView>
                <button type="button" class="btn btn-sm btn-secondary" @onclick="Close">@(userConfig.GetText("cancel"))</button>
            </div>
        </Footer>
    </PopUp>
}

@code
{
    [CascadingParameter]
    Action<Exception?, string, string, bool> DisplayMessageInUi { get; set; } = DefaultInit.DoNothing;

    [Parameter]
    public bool Display { get; set; } = false;
        
    [Parameter]
    public EventCallback<bool> DisplayChanged { get; set; }

    [Parameter]
    public ModellingAppRoleHandler AppRoleHandler { get; set; }

    [Parameter]
    public EventCallback<ModellingAppRoleHandler> AppRoleHandlerChanged { get; set; }

    [Parameter]
    public bool AddMode { get; set; } = false;


    private ModellingDnDContainer Container { get; set; } = new();
    int sidebarLeftWidth = GlobalConfig.kSidebarLeftWidth + 300;

    private List<ModellingNetworkArea> areas = new();
    private List<ModellingAppServer> actServers = new();
    private bool firstTry = true;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            areas = await apiConnection.SendQueryAsync<List<ModellingNetworkArea>>(FWO.Api.Client.Queries.ModellingQueries.getAreas);
            // todo: select relevant areas for owner?
        }
        catch (Exception exception)
        {
            DisplayMessageInUi(exception, userConfig.GetText("fetch_data"), "", true);
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        if(Display && firstTry)
        {
            if(AddMode)
            {
                AppRoleHandler.ActAppRole.Comment = userConfig.User.Name;
            }

            if(areas.Count == 0)
            {
                DisplayMessageInUi(null, userConfig.GetText("E9002"), "", true);
            }
            else
            {
                SelectedAreaChanged(AddMode ? areas.First() : AppRoleHandler.ActAppRole.Area);
            }
            firstTry = false;
        }
    }

    private async Task HandleServerDrop()
    {
        if(Container.AppServerElements.Count > 0)
        {
            AppRoleHandler.AppServerToAppRole(Container.AppServerElements);
        }
        Container.Clear();
    }

    private void Close()
    {
        firstTry = true;
        Display = false;
        DisplayChanged.InvokeAsync(Display);
    }

    private void SelectedAreaChanged(ModellingNetworkArea newArea)
    {
        AppRoleHandler.ActAppRole.Area = newArea;
        if(newArea != null && newArea.Name.Length >= ModellingAppRole.FixedPartLength && AddMode)
        {
            AppRoleHandler.ActAppRole.NameFixedPart = newArea.Name.Substring(0, ModellingAppRole.FixedPartLength).Remove(0, 2).Insert(0, "AR");
        }
        SelectAppServerFromArea(newArea);
    }

    private void SelectAppServerFromArea(ModellingNetworkArea area)
    {
        actServers = new List<ModellingAppServer>(){};
        foreach(var server in AppRoleHandler.AvailableAppServer)
        {
            if(IsInArea(server, area))
            {
                actServers.Add(server);
            }
        }
    }

    private bool IsInArea(ModellingAppServer server, ModellingNetworkArea area)
    {
        @* foreach(var subnet in area.Subnets)
        {
            var slashIdx = subnet.Network.IndexOf("/");
            if (slashIdx == -1)
            {
                slashIdx = 31;
            }
            if(server.Ip.Substring(0, slashIdx) == subnet.Network.Substring(0, slashIdx)) // TODO: correct? IPv6??
            {
                return true;
            }
        }
        return false; *@
        return true;
    }
}
