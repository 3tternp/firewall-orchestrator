@using FWO.Config.Api

@inject ApiConnection apiConnection
@inject UserConfig userConfig

@if (Display)
{
    @if(!ReadOnly)
    {
        <EditConnLeftSide @bind-Container="Container" @bind-Width="sidebarLeftWidth" Groups="groups" Services="services"
            ObjToSource="AddObjSources" ObjToDest="AddObjDestinations" GrpToSource="AddGrpSources" GrpToDest="AddGrpDestinations" 
            ToService="AddServices" CreateGroup="CreateGroup" EditGroup="EditGroup" RequestDeleteGroup="RequestDeleteGroup" 
            CreateService="CreateService" EditService="EditService" RequestDeleteService="RequestDeleteService"/>
    }
    <div style="margin-left: @($"{(ReadOnly ? 0 : sidebarLeftWidth) + 10}px");">
        <h3>@(ReadOnly || AddMode ? userConfig.GetText("connection") : userConfig.GetText("edit_connection"))</h3>
        <div class="col-sm-11 border rounded m-2 p-2">
            <div class="form-group row">
                <label class="col-sm-2 col-form-label col-form-label-sm">@(userConfig.GetText("title"))*:</label>
                <input type="text" class=" col-sm-9 form-control form-control-sm" @bind="Conn.Name" />
            </div>
            <div class="form-group row">
                <label class="col-sm-2 col-form-label col-form-label-sm">@(userConfig.GetText("func_reason")):</label>
                <textarea rows="3" type="text" class=" col-sm-9 form-control form-control-sm" @bind="Conn.Comment" />
            </div>
            <div class="form-group row">
                <div class="col-sm-4">
                    <h6>@(userConfig.GetText("source"))</h6>
                    @if(ReadOnly)
                    {
                        foreach(var src in Conn.SrcAppRoles)
                        {
                            <div class="col-sm-12 border form-control form-control-sm bg-transparent">@DisplayGrp(src)</div>
                        }
                        foreach(var src in Conn.Sources)
                        {
                            <div class="col-sm-12 border form-control form-control-sm bg-transparent">@DisplayIp(src)</div>
                        }
                    }
                    else 
                    {
                        <div class="minheight-dropzone bg-secondary dropzone" 
                            ondragover="event.preventDefault();"
                            ondragstart="event.dataTransfer.setData('', event.target.id);"
                            @ondrop="HandleSrcDrop">
                            <EditList ElementType="AppRole" Elements="Conn.SrcAppRoles.ToArray()" ElementsToAdd="SrcGrpsToAdd" ElementsToDelete="SrcGrpsToDelete" StdLayout="false">
                                <Display>
                                    <div class="row">
                                        <div class="col-sm-12 border form-control form-control-sm bg-transparent">@DisplayGrp(context)</div>
                                    </div>
                                </Display>
                            </EditList>
                            <EditList ElementType="NetworkObject" Elements="Conn.Sources.ToArray()" ElementsToAdd="SrcIpsToAdd" ElementsToDelete="SrcIpsToDelete" StdLayout="false">
                                <Display>
                                    <div class="row">
                                        <div class="col-sm-12 border form-control form-control-sm bg-transparent">@DisplayIp(context)</div>
                                    </div>
                                </Display>
                            </EditList>
                        </div>
                    }
                </div>
                <div class="col-sm-4">
                    <h6>@(userConfig.GetText("destination"))</h6>
                    @if(ReadOnly)
                    {
                        foreach(var dst in Conn.DstAppRoles)
                        {
                            <div class="col-sm-12 border form-control form-control-sm bg-transparent">@DisplayGrp(dst)</div>
                        }
                        foreach(var dst in Conn.Destinations)
                        {
                            <div class="col-sm-12 border form-control form-control-sm bg-transparent">@DisplayIp(dst)</div>
                        }
                    }
                    else 
                    {
                        <div class="minheight-dropzone bg-secondary dropzone" 
                            ondragover="event.preventDefault();"
                            ondragstart="event.dataTransfer.setData('', event.target.id);"
                            @ondrop="HandleDstDrop">
                            <EditList ElementType="AppRole" Elements="Conn.DstAppRoles.ToArray()" ElementsToAdd="DstGrpsToAdd" ElementsToDelete="DstGrpsToDelete" StdLayout="false">
                                <Display>
                                    <div class="row">
                                        <div class="col-sm-12 border form-control form-control-sm bg-transparent">@DisplayGrp(context)</div>
                                    </div>
                                </Display>
                            </EditList>
                            <EditList ElementType="NetworkObject" Elements="Conn.Destinations.ToArray()" ElementsToAdd="DstIpsToAdd" ElementsToDelete="DstIpsToDelete" StdLayout="false">
                                <Display>
                                    <div class="row">
                                        <div class="col-sm-12 border form-control form-control-sm bg-transparent">@DisplayIp(context)</div>
                                    </div>
                                </Display>
                            </EditList>
                        </div>
                    }
                </div>
                <div class="col-sm-4">
                    <h6>@(userConfig.GetText("service"))</h6>
                    @if(ReadOnly)
                    {
                        foreach(var svc in Conn.Services)
                        {
                            <div class="col-sm-12 border form-control form-control-sm bg-transparent">@FWO.Ui.Display.RuleDisplayBase.DisplayService(svc, FWO.Report.Filter.ReportType.Rules)</div>
                        }
                    }
                    else 
                    {
                        <div class="minheight-dropzone bg-secondary dropzone" 
                            ondragover="event.preventDefault();"
                            ondragstart="event.dataTransfer.setData('', event.target.id);"
                            @ondrop="HandleSvcDrop">
                            <EditList ElementType="NetworkService" Elements="Conn.Services.ToArray()" ElementsToAdd="SvcToAdd" ElementsToDelete="SvcToDelete" StdLayout="false">
                                <Display>
                                    <div class="row">
                                        <div class="col-sm-12 border form-control form-control-sm bg-transparent">@FWO.Ui.Display.RuleDisplayBase.DisplayService(context, FWO.Report.Filter.ReportType.Rules)</div>
                                    </div>
                                </Display>
                            </EditList>
                        </div>
                    }
                </div>
            </div>
        </div>
        <div class="btn-group">
            @if(!ReadOnly)
            {
                <AuthorizeView Roles="admin, modeller">
                    <Authorized>
                        <button type="button" class="btn btn-sm btn-primary" @onclick="Save">@(userConfig.GetText("save"))</button>
                    </Authorized>
                    <NotAuthorized>
                        <button type="button" class="btn btn-sm btn-primary" disabled>@(userConfig.GetText("save"))</button>
                    </NotAuthorized> 
                </AuthorizeView>
            }
            <button type="button" class="btn btn-sm btn-secondary" @onclick="Close">@(userConfig.GetText("cancel"))</button>
        </div>
    </div>
    <EditAppRole @bind-Display="EditAppRoleMode" AppRole="actAppRole" NewAppRole="NewAppRole" UpdateAppRole="UpdateAppRole" AddMode="AddAppRoleMode"/>
    <EditService @bind-Display="EditServiceMode" Service="actService" NewService="NewService" UpdateService="UpdateService" AddMode="AddServiceMode"/>
    <ConfirmDelete @bind-Display="DeleteAppRoleMode" PerformAction="DeleteAppRole" Title="@userConfig.GetText("delete_app_role")" DeleteMessage="@deleteMessage"/>
    <ConfirmDelete @bind-Display="DeleteServiceMode" PerformAction="DeleteService" Title="@userConfig.GetText("delete_service")" DeleteMessage="@deleteMessage"/>
}

@code
{
    [CascadingParameter]
    Action<Exception?, string, string, bool> DisplayMessageInUi { get; set; } = DefaultInit.DoNothing;

    [Parameter]
    public bool Display { get; set; } = false;
        
    [Parameter]
    public EventCallback<bool> DisplayChanged { get; set; }

    [Parameter]
    public Connection Conn { get; set; } = new Connection();

    [Parameter]
    public Func<Connection, Task> NewConn { get; set; } = DefaultInit.DoNothing;

    [Parameter]
    public Func<Connection, Task> UpdateConn { get; set; } = DefaultInit.DoNothing;

    [Parameter]
    public bool ReadOnly { get; set; } = false;

    [Parameter]
    public bool AddMode { get; set; } = false;


    private DnDContainer Container { get; set; } = new DnDContainer();
    int sidebarLeftWidth = GlobalConfig.kSidebarLeftWidth + 300;
    
    public List<NetworkObject> SrcIpsToAdd { get; set; } = new List<NetworkObject>();
    public List<NetworkObject> SrcIpsToDelete { get; set; } = new List<NetworkObject>();
    public List<NetworkObject> DstIpsToAdd { get; set; } = new List<NetworkObject>();
    public List<NetworkObject> DstIpsToDelete { get; set; } = new List<NetworkObject>();
    public List<AppRole> SrcGrpsToAdd { get; set; } = new List<AppRole>();
    public List<AppRole> SrcGrpsToDelete { get; set; } = new List<AppRole>();
    public List<AppRole> DstGrpsToAdd { get; set; } = new List<AppRole>();
    public List<AppRole> DstGrpsToDelete { get; set; } = new List<AppRole>();
    public List<NetworkService> SvcToAdd { get; set; } = new List<NetworkService>();
    public List<NetworkService> SvcToDelete { get; set; } = new List<NetworkService>();

    private AppRole actAppRole = new AppRole();
    private bool AddAppRoleMode = false;
    private bool EditAppRoleMode = false;
    private bool DeleteAppRoleMode = false;
    private NetworkService actService = new NetworkService();
    private bool AddServiceMode = false;
    private bool EditServiceMode = false;
    private bool DeleteServiceMode = false;
    private string deleteMessage = "";

    private List<AppRole> groups = new List<AppRole>(){};
    private List<NetworkService> services = new List<NetworkService>(){};

    // Test data
    static NetworkObject TestIp3 = new NetworkObject(){ Id = 3, IP = "1.2.3.4", IpEnd = "1.2.3.4"};
    static NetworkObject TestIp4 = new NetworkObject(){ Id = 4, IP = "111.222.1.0", IpEnd = "111.222.1.7"};
    //static NetworkObject TestIp5 = new NetworkObject(){ Id = 5, IP = "10.0.1.1", IpEnd = "10.0.1.1"};
    //static NetworkObject TestIp6 = new NetworkObject(){ Id = 6, IP = "123.1.1.0", IpEnd = "123.1.1.1"};
    static NetworkService TestService2 = new NetworkService(){ Id = 2, DestinationPort = 6666, DestinationPortEnd = 7777, Name = "TestService2", Protocol = new NetworkProtocol { Name = "UDP" }};
    static NetworkService TestService3 = new NetworkService(){ Id = 3, DestinationPort = 1234, DestinationPortEnd = 1235, Name = "TestService3", Protocol = new NetworkProtocol { Name = "UDP" }};
    static AppRole TestAppRole2 = new AppRole(){ Id = 2, Name = "AppRole2", NetworkObjects = new List<NetworkObject>(){ TestIp3, TestIp4 }};
    private int AppRoleIdCounter = 3;
    private int ServiceIdCounter = 4;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            groups = new List<AppRole>(){ TestAppRole2 };
            services = new List<NetworkService>(){ TestService2, TestService3 };
        }
        catch (Exception exception)
        {
            DisplayMessageInUi(exception, userConfig.GetText("fetch_data"), "", true);
        }
    }

    protected override async Task OnParametersSetAsync()
    {

    }

    private async Task NewAppRole(AppRole appRole)
    {
        appRole.Id = ++AppRoleIdCounter; // just for test
        groups.Add(appRole);
        AddAppRoleMode = false;
    }

    private async Task UpdateAppRole(AppRole appRole)
    {
        groups[groups.FindIndex(a => a.Id == appRole.Id)] = appRole;
        EditAppRoleMode = false;
    }

    private async Task DeleteAppRole()
    {
        groups.Remove(actAppRole);
        DeleteAppRoleMode = false;
        StateHasChanged();
    }

    private async Task NewService(NetworkService service)
    {
        service.Id = ++ServiceIdCounter; // just for test
        services.Add(service);
        AddServiceMode = false;
    }

    private async Task UpdateService(NetworkService service)
    {
        services[services.FindIndex(a => a.Id == service.Id)] = service;
        EditServiceMode = false;
    }

    private async Task DeleteService()
    {
        services.Remove(actService);
        DeleteServiceMode = false;
        StateHasChanged();
    }

    private async Task HandleSrcDrop()
    {
        if(Container.IpElements.Count > 0)
        {
            AddObjSources(Container.IpElements);
        }
        if(Container.GrpElements.Count > 0)
        {
            AddGrpSources(Container.GrpElements);
        }
        Container.Clear();
    }

    private async Task HandleDstDrop()
    {
        if(Container.IpElements.Count > 0)
        {
            AddObjDestinations(Container.IpElements);
        }
        if(Container.GrpElements.Count > 0)
        {
            AddGrpDestinations(Container.GrpElements);
        }
        Container.Clear();
    }

    private async Task HandleSvcDrop()
    {
        if(Container.SvcElements.Count > 0)
        {
            AddServices(Container.SvcElements);
        }
        Container.Clear();
    }

    private async Task Save()
    {
        foreach(var ip in SrcIpsToDelete)
        {
            Conn.Sources.Remove(ip);
        }
        foreach(var ip in SrcIpsToAdd)
        {
            Conn.Sources.Add(ip);
        }
        foreach(var ip in DstIpsToDelete)
        {
            Conn.Destinations.Remove(ip);
        }
        foreach(var ip in DstIpsToAdd)
        {
            Conn.Destinations.Add(ip);
        }
        foreach(var grp in SrcGrpsToDelete)
        {
            Conn.SrcAppRoles.Remove(grp);
        }
        foreach(var grp in SrcGrpsToAdd)
        {
            Conn.SrcAppRoles.Add(grp);
        }
        foreach(var grp in DstGrpsToDelete)
        {
            Conn.DstAppRoles.Remove(grp);
        }
        foreach(var grp in DstGrpsToAdd)
        {
            Conn.DstAppRoles.Add(grp);
        }
        foreach(var svc in SvcToDelete)
        {
            Conn.Services.Remove(svc);
        }
        foreach(var svc in SvcToAdd)
        {
            Conn.Services.Add(svc);
        }
        if(AddMode)
        {
            await NewConn(Conn);
        }
        else
        {
            await UpdateConn(Conn);
        }
        Close();
    }

    private void Close()
    {
        SrcIpsToAdd = new List<NetworkObject>();
        SrcIpsToDelete = new List<NetworkObject>();
        DstIpsToAdd = new List<NetworkObject>();
        DstIpsToDelete = new List<NetworkObject>();
        SrcGrpsToAdd = new List<AppRole>();
        SrcGrpsToDelete = new List<AppRole>();
        DstGrpsToAdd = new List<AppRole>();
        DstGrpsToDelete = new List<AppRole>();
        SvcToAdd = new List<NetworkService>();
        SvcToDelete = new List<NetworkService>();
        AddAppRoleMode = false;
        EditAppRoleMode = false;
        DeleteAppRoleMode = false;
        AddServiceMode = false;
        EditServiceMode = false;
        DeleteServiceMode = false;
        Display = false;
        DisplayChanged.InvokeAsync(Display);
    }

    private string DisplayIp(NetworkObject elem)
    {
        return FWO.Ui.Display.NwObjDisplay.DisplayIp(elem.IP, elem.IpEnd);
    }

    private string DisplayGrp(AppRole grp)
    {
        if(grp.Name != null && grp.Name != "")
        {
            return grp.Name;
        }
        if(grp.NetworkObjects.Count > 0)
        {
            return FWO.Ui.Display.NwObjDisplay.DisplayIp(grp.NetworkObjects[0].IP, grp.NetworkObjects[0].IpEnd);
        }
        return "anything else";
    }
    

    private bool AddObjSources(List<NetworkObject> sources)
    {
        foreach(var source in sources)
        {
            if(!Conn.Sources.Contains(source) && !SrcIpsToAdd.Contains(source))
            {
                SrcIpsToAdd.Add(source);
            }
        }
        StateHasChanged();
        return true;
    }

    private bool AddObjDestinations(List<NetworkObject> dests)
    {
        foreach(var dest in dests)
        {
            if(!Conn.Destinations.Contains(dest) && !DstIpsToAdd.Contains(dest))
            {
                DstIpsToAdd.Add(dest);
            }
        }
        StateHasChanged();
        return true;
    }

    private bool AddGrpSources(List<AppRole> sources)
    {
        foreach(var source in sources)
        {
            if(!Conn.SrcAppRoles.Contains(source) && !SrcGrpsToAdd.Contains(source))
            {
                SrcGrpsToAdd.Add(source);
            }
        }
        StateHasChanged();
        return true;
    }

    private bool AddGrpDestinations(List<AppRole> dests)
    {
        foreach(var dest in dests)
        {
            if(!Conn.DstAppRoles.Contains(dest) && !DstGrpsToAdd.Contains(dest))
            {
                DstGrpsToAdd.Add(dest);
            }
        }
        StateHasChanged();
        return true;
    }

    private bool AddServices(List<NetworkService> services)
    {
        foreach(var svc in services)
        {
            if(!Conn.Services.Contains(svc) && !SvcToAdd.Contains(svc))
            {
                SvcToAdd.Add(svc);
            }
        }
        StateHasChanged();
        return true;
    }

    private bool CreateGroup()
    {
        actAppRole = new AppRole();
        AddAppRoleMode = true;
        EditAppRoleMode = true;
        StateHasChanged();
        return true;
    }

    private bool EditGroup(AppRole appRole)
    {
        actAppRole = appRole;
        AddAppRoleMode = false;
        EditAppRoleMode = true;
        StateHasChanged();
        return true;
    }

    private bool RequestDeleteGroup(AppRole appRole)
    {
        actAppRole = appRole;
        deleteMessage = userConfig.GetText("U9002") + actAppRole.Name + "?";
        DeleteAppRoleMode = true;
        StateHasChanged();
        return true;
    }

    private bool CreateService()
    {
        actService = new NetworkService();
        AddServiceMode = true;
        EditServiceMode = true;
        StateHasChanged();
        return true;
    }

    private bool EditService(NetworkService service)
    {
        actService = service;
        AddServiceMode = false;
        EditServiceMode = true;
        StateHasChanged();
        return true;
    }
        
    private bool RequestDeleteService(NetworkService service)
    {
        actService = service;
        deleteMessage = userConfig.GetText("U9003") + actService.Name + "?";
        DeleteServiceMode = true;
        StateHasChanged();
        return true;
    }
}
