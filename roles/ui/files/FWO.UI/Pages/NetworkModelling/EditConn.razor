@using FWO.Config.Api
@using FWO.Ui.Display

@inject ApiConnection apiConnection
@inject UserConfig userConfig

@if (Display)
{
    @if(!ConnHandler.ReadOnly)
    {
        <EditConnLeftSide Application="@Application" @bind-Container="Container" @bind-Width="sidebarLeftWidth" @bind-ConnHandler="ConnHandler"
            AppServerToSource="AddAppServerSources" AppServerToDest="AddAppServerDestinations"
            DisplayInterfaces="@(!ConnHandler.ActConn.IsInterface && ConnHandler.ActConn.UsedInterfaceId == null)" Interfaces="interfaces" IntToConn="InterfToConn" 
            ToSrcAllowed="@(!ConnHandler.SrcDropForbidden())" ToDestAllowed="@(!ConnHandler.DstDropForbidden())" ToSvcAllowed="!ConnHandler.svcReadOnly"/>
    }
    <div style="margin-left: @($"{(ConnHandler.ReadOnly ? 0 : sidebarLeftWidth) + 10}px");">
        <h3>@(ConnHandler.ActConn.IsInterface ? userConfig.GetText("interface") : userConfig.GetText("connection"))</h3>
        <div class="col-sm-11 border rounded m-2 p-2">
            <div class="form-group row">
                <label class="col-sm-2 col-form-label col-form-label-sm">@(userConfig.GetText("title"))*:</label>
                <input type="text" class=" col-sm-9 form-control form-control-sm" @bind="ConnHandler.ActConn.Name" />
            </div>
            <div class="form-group row">
                <label class="col-sm-2 col-form-label col-form-label-sm">@(userConfig.GetText("func_reason"))*:</label>
                <textarea rows="3" type="text" class=" col-sm-9 form-control form-control-sm" @bind="ConnHandler.ActConn.Reason" />
            </div>
            <div class="form-group row">
                <div class="col-sm-4">
                    <h6>@(userConfig.GetText("source"))</h6>
                    @if(ConnHandler.ReadOnly || ConnHandler.srcReadOnly)
                    {
                        foreach(var src in ConnHandler.ActConn.SrcAppRoles)
                        {
                            <div class="col-sm-12 border form-control form-control-sm bg-transparent">@DisplayAppRole(src)</div>
                        }
                        foreach(var src in ConnHandler.ActConn.Sources)
                        {
                            <div class="col-sm-12 border form-control form-control-sm bg-transparent">@NwObjDisplay.DisplayWithName(src)</div>
                        }
                    }
                    else 
                    {
                        <div class="@SrcClass()" 
                            ondragover="event.preventDefault();"
                            ondragstart="event.dataTransfer.setData('', event.target.id);"
                            @ondrop="HandleSrcDrop">
                            <EditList ElementType="AppRole" Elements="ConnHandler.ActConn.SrcAppRoles.ToArray()" ElementsToAdd="ConnHandler.SrcAppRolesToAdd" ElementsToDelete="ConnHandler.SrcAppRolesToDelete" StdLayout="false" AfterRemoveAction="ConnHandler.CalcVisibility">
                                <Display>
                                    <div class="row">
                                        <div class="col-sm-12 border form-control form-control-sm bg-transparent">@DisplayAppRole(context)</div>
                                    </div>
                                </Display>
                            </EditList>
                            <EditList ElementType="NetworkObject" Elements="ConnHandler.ActConn.Sources.ToArray()" ElementsToAdd="ConnHandler.SrcIpsToAdd" ElementsToDelete="ConnHandler.SrcIpsToDelete" StdLayout="false" AfterRemoveAction="ConnHandler.CalcVisibility">
                                <Display>
                                    <div class="row">
                                        <div class="col-sm-12 border form-control form-control-sm bg-transparent">@NwObjDisplay.DisplayWithName(context)</div>
                                    </div>
                                </Display>
                            </EditList>
                        </div>
                    }
                </div>
                <div class="col-sm-4">
                    <h6>@(userConfig.GetText("service"))</h6>
                    @if(ConnHandler.ReadOnly || ConnHandler.svcReadOnly)
                    {
                        foreach(var grp in ConnHandler.ActConn.ServiceGroups)
                        {
                            <div class="col-sm-12 border form-control form-control-sm bg-transparent">@DisplayServiceGroup(grp)</div>
                        }
                        foreach(var svc in ConnHandler.ActConn.Services)
                        {
                            <div class="col-sm-12 border form-control form-control-sm bg-transparent">@DisplayService(svc)</div>
                        }
                    }
                    else 
                    {
                        <div class="@dropzoneClass" 
                            ondragover="event.preventDefault();"
                            ondragstart="event.dataTransfer.setData('', event.target.id);"
                            @ondrop="HandleSvcDrop">
                            <EditList ElementType="ServiceGroup" Elements="ConnHandler.ActConn.ServiceGroups.ToArray()" ElementsToAdd="ConnHandler.SvcGrpToAdd" ElementsToDelete="ConnHandler.SvcGrpToDelete" StdLayout="false" AfterRemoveAction="ConnHandler.CalcVisibility">
                                <Display>
                                    <div class="row">
                                        <div class="col-sm-12 border form-control form-control-sm bg-transparent">@DisplayServiceGroup(context)</div>
                                    </div>
                                </Display>
                            </EditList>
                            <EditList ElementType="NetworkService" Elements="ConnHandler.ActConn.Services.ToArray()" ElementsToAdd="ConnHandler.SvcToAdd" ElementsToDelete="ConnHandler.SvcToDelete" StdLayout="false" AfterRemoveAction="ConnHandler.CalcVisibility">
                                <Display>
                                    <div class="row">
                                        <div class="col-sm-12 border form-control form-control-sm bg-transparent">@DisplayService(context)</div>
                                    </div>
                                </Display>
                            </EditList>
                        </div>
                    }
                </div>
                <div class="col-sm-4">
                    <h6>@(userConfig.GetText("destination"))</h6>
                    @if(ConnHandler.ReadOnly || ConnHandler.dstReadOnly)
                    {
                        foreach(var dst in ConnHandler.ActConn.DstAppRoles)
                        {
                            <div class="col-sm-12 border form-control form-control-sm bg-transparent">@DisplayAppRole(dst)</div>
                        }
                        foreach(var dst in ConnHandler.ActConn.Destinations)
                        {
                            <div class="col-sm-12 border form-control form-control-sm bg-transparent">@NwObjDisplay.DisplayWithName(dst)</div>
                        }
                    }
                    else 
                    {
                        <div class="@DestClass()" 
                            ondragover="event.preventDefault();"
                            ondragstart="event.dataTransfer.setData('', event.target.id);"
                            @ondrop="HandleDstDrop">
                            <EditList ElementType="AppRole" Elements="ConnHandler.ActConn.DstAppRoles.ToArray()" ElementsToAdd="ConnHandler.DstAppRolesToAdd" ElementsToDelete="ConnHandler.DstAppRolesToDelete" StdLayout="false" AfterRemoveAction="ConnHandler.CalcVisibility">
                                <Display>
                                    <div class="row">
                                        <div class="col-sm-12 border form-control form-control-sm bg-transparent">@DisplayAppRole(context)</div>
                                    </div>
                                </Display>
                            </EditList>
                            <EditList ElementType="NetworkObject" Elements="ConnHandler.ActConn.Destinations.ToArray()" ElementsToAdd="ConnHandler.DstIpsToAdd" ElementsToDelete="ConnHandler.DstIpsToDelete" StdLayout="false" AfterRemoveAction="ConnHandler.CalcVisibility">
                                <Display>
                                    <div class="row">
                                        <div class="col-sm-12 border form-control form-control-sm bg-transparent">@NwObjDisplay.DisplayWithName(context)</div>
                                    </div>
                                </Display>
                            </EditList>
                        </div>
                    }
                </div>
            </div>
        </div>
        <div class="btn-group">
            @if(!ConnHandler.ReadOnly)
            {
                <AuthorizeView Roles="admin, modeller">
                    <Authorized>
                        <button type="button" class="btn btn-sm btn-primary" @onclick="async () => { await ConnHandler.Save(); Close();}">@(userConfig.GetText("save"))</button>
                    </Authorized>
                    <NotAuthorized>
                        <button type="button" class="btn btn-sm btn-primary" disabled>@(userConfig.GetText("save"))</button>
                    </NotAuthorized> 
                </AuthorizeView>
            }
            <button type="button" class="btn btn-sm btn-secondary" @onclick="Close">@(userConfig.GetText("cancel"))</button>
            @if(!ConnHandler.ReadOnly)
            {
                @if(ConnHandler.srcReadOnly || ConnHandler.dstReadOnly)
                {
                    <button type="button" class="btn btn-sm btn-danger" @onclick="() => RemoveInterf()">@(userConfig.GetText("remove_interface"))</button>
                }
            }
        </div>
    </div>
    <EditAppRole @bind-Display="ConnHandler.EditAppRoleMode" @bind-AppRoleHandler="ConnHandler.AppRoleHandler" AddMode="ConnHandler.AddAppRoleMode"/>
    <EditServiceGroup @bind-Display="ConnHandler.EditSvcGrpMode" @bind-SvcGroupHandler="ConnHandler.SvcGrpHandler" AddMode="ConnHandler.AddSvcGrpMode"/>
    <EditService @bind-Display="ConnHandler.EditServiceMode" ServiceHandler="ConnHandler.ServiceHandler" AddMode="ConnHandler.AddServiceMode"/>
    <ConfirmDelete @bind-Display="ConnHandler.DeleteAppRoleMode" PerformAction="ConnHandler.DeleteAppRole" Title="@userConfig.GetText("delete_app_role")" DeleteMessage="@ConnHandler.deleteMessage"/>
}

@code
{
    [CascadingParameter]
    Action<Exception?, string, string, bool> DisplayMessageInUi { get; set; } = DefaultInit.DoNothing;

    [Parameter]
    public bool Display { get; set; } = false;
        
    [Parameter]
    public EventCallback<bool> DisplayChanged { get; set; }

    [Parameter] 
    public FwoOwner Application { get; set; } = new FwoOwner();

    [Parameter] 
    public ModellingConnectionHandler ConnHandler { get; set; }

    [Parameter]
    public EventCallback<ModellingConnectionHandler> ConnHandlerChanged { get; set; }


    private DnDContainer Container { get; set; } = new DnDContainer();
    int sidebarLeftWidth = GlobalConfig.kSidebarLeftWidth + 300;
    
    private List<NetworkService> services = new List<NetworkService>(){};
    private List<ServiceGroup> serviceGroups = new List<ServiceGroup>(){};
    private List<NetworkConnection> interfaces = new List<NetworkConnection>(){};

    private static string dropzoneClass = "minheight-dropzone bg-secondary dropzone";
    private static string forbiddenDropzoneClass = "minheight-dropzone bg-white";

    protected override async Task OnInitializedAsync()
    {
        try
        {
            interfaces = await apiConnection.SendQueryAsync<List<NetworkConnection>>(FWO.Api.Client.Queries.ModellingQueries.getInterfaces);
        }
        catch (Exception exception)
        {
            DisplayMessageInUi(exception, userConfig.GetText("fetch_data"), "", true);
        }
    }

    protected override void OnParametersSet()
    {
        if(Display)
        {
            ConnHandler.CalcVisibility();
        }
    }

    private async Task HandleSrcDrop()
    {
        if(Container.ConnElement != null)
        {
            InterfToConn(Container.ConnElement);
        }
        else if(!ConnHandler.SrcDropForbidden())
        {
            if(Container.IpElements.Count > 0)
            {
                AddAppServerSources(Container.IpElements);
            }
            if(Container.AppRoleElements.Count > 0)
            {
                ConnHandler.AppRolesToSource(Container.AppRoleElements);
            }
        }
        Container.Clear();
    }

    private async Task HandleDstDrop()
    {
        if(Container.ConnElement != null)
        {
            InterfToConn(Container.ConnElement);
        }
        else if(!ConnHandler.DstDropForbidden())
        {
            if(Container.IpElements.Count > 0)
            {
                AddAppServerDestinations(Container.IpElements);
            }
            if(Container.AppRoleElements.Count > 0)
            {
                ConnHandler.AppRolesToDestination(Container.AppRoleElements);
            }
        }
        Container.Clear();
    }

    private async Task HandleSvcDrop()
    {
        if(Container.ConnElement != null)
        {
            InterfToConn(Container.ConnElement);
        }
        else if(Container.SvcElements.Count > 0)
        {
            ConnHandler.ServicesToConn(Container.SvcElements);
        }
        else if(Container.SvcGrpElements.Count > 0)
        {
            ConnHandler.ServiceGrpsToConn(Container.SvcGrpElements);
        }
        Container.Clear();
    }

    private void Close()
    {
        ConnHandler.Close();
        Display = false;
        DisplayChanged.InvokeAsync(Display);
    }

    private string DisplayAppRole(AppRole grp)
    {
        if(grp.Name != null && grp.Name != "")
        {
            return grp.Name;
        }
        if(grp.NetworkObjects.Count > 0)
        {
            return NwObjDisplay.DisplayWithName(grp.NetworkObjects[0]);
        }
        return "anything else";
    }

    private string DisplayService(NetworkService service)
    {
        return FWO.Ui.Display.RuleDisplayBase.DisplayService(service, FWO.Report.Filter.ReportType.Rules).ToString();
    }

    private string DisplayServiceGroup(ServiceGroup grp)
    {
        if(grp.Name != null && grp.Name != "")
        {
            return grp.Name;
        }
        if(grp.NetworkServices.Count > 0)
        {
            return DisplayService(grp.NetworkServices[0].Content);
        }
        return "anything else";
    }
    
    private bool InterfToConn(NetworkConnection inter)
    {
        ConnHandler.srcReadOnly = inter.Sources.Count > 0;
        ConnHandler.dstReadOnly = !ConnHandler.srcReadOnly;
        ConnHandler.svcReadOnly = true;
        ConnHandler.ActConn.IsInterface = false;
        ConnHandler.ActConn.UsedInterfaceId = inter.Id;
        if(ConnHandler.srcReadOnly)
        {
            ConnHandler.ActConn.Sources = new List<NetworkObject>(inter.Sources){};
        }
        else
        {
            ConnHandler.ActConn.Destinations = new List<NetworkObject>(inter.Destinations){};
        }
        ConnHandler.ActConn.Services = new List<NetworkService>(inter.Services){};
        StateHasChanged();
        return true;
    }

    private void RemoveInterf()
    {
        if(ConnHandler.srcReadOnly)
        {
            ConnHandler.ActConn.Sources = new();
        }
        if(ConnHandler.dstReadOnly)
        {
            ConnHandler.ActConn.Destinations = new();
        }
        ConnHandler.ActConn.Services = new();
        ConnHandler.ActConn.UsedInterfaceId = null;
        ConnHandler.srcReadOnly = false;
        ConnHandler.dstReadOnly = false;
        ConnHandler.svcReadOnly = false;
        StateHasChanged();
    }

    private bool AddAppServerSources(List<NetworkObject> sources)
    {
        if(!ConnHandler.SrcDropForbidden())
        {
            foreach(var source in sources)
            {
                if(!ConnHandler.ActConn.Sources.Contains(source) && !ConnHandler.SrcIpsToAdd.Contains(source))
                {
                    ConnHandler.SrcIpsToAdd.Add(source);
                }
            }
            ConnHandler.CalcVisibility();
        }
        return true;
    }

    private bool AddAppServerDestinations(List<NetworkObject> dests)
    {
        if(!ConnHandler.DstDropForbidden())
        {
            foreach(var dest in dests)
            {
                if(!ConnHandler.ActConn.Destinations.Contains(dest) && !ConnHandler.DstIpsToAdd.Contains(dest))
                {
                    ConnHandler.DstIpsToAdd.Add(dest);
                }
            }
            ConnHandler.CalcVisibility();
        }
        return true;
    }

    private string SrcClass()
    {
        if(ConnHandler.SrcDropForbidden())
        {
            return forbiddenDropzoneClass;
        }
        return dropzoneClass;
    }

    private string DestClass()
    {
        if(ConnHandler.DstDropForbidden())
        {
            return forbiddenDropzoneClass;
        }
        return dropzoneClass;
    }
}
