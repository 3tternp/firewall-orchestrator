@using FWO.Config.Api
@using FWO.Ui.Display

@inject ApiConnection apiConnection
@inject UserConfig userConfig

<div class="ml-2">
    <h3>@(userConfig.GetText("library"))</h3>
</div>
<div class="col-sm-11 border rounded m-2 p-2">
    <h5>@(userConfig.GetText("services"))</h5>
    <div class="form-group row">
        <div class="col-sm-9">
            <select class="form-control form-control-sm" @bind="selectedServices" multiple>
                @foreach (var service in SvcGroupHandler.AvailableServices)
                {
                    <option class="draggable" draggable="true" @ondragstart="() => HandleDragStart(ResolveSvc(selectedServices))" value="@service.Id">@ModellingDisplay.DisplayService(service)</option>
                }
            </select>
        </div>
        <div class="col-sm-2">
            <button type="button" class="btn btn-sm btn-primary w-100" @onclick="() => {SvcGroupHandler.ServicesToSvcGroup(ResolveSvc(selectedServices)); SvcGroupHandlerChanged.InvokeAsync(SvcGroupHandler);}">@(userConfig.GetText("to_services_group"))</button>
        </div>
    </div>
    <button type="button" class="btn btn-sm btn-success" @onclick="() => {SvcGroupHandler.CreateService(); SvcGroupHandlerChanged.InvokeAsync(SvcGroupHandler);}">@(userConfig.GetText("add_service"))</button>
    @if(selectedServices.Length == 1)
    {
        <button type="button" class="btn btn-sm btn-warning" @onclick="() => {SvcGroupHandler.EditService(ResolveSvc(selectedServices).First()); SvcGroupHandlerChanged.InvokeAsync(SvcGroupHandler);}">@(userConfig.GetText("edit_service"))</button>
        <button type="button" class="btn btn-sm btn-danger" @onclick="() => {SvcGroupHandler.RequestDeleteService(ResolveSvc(selectedServices).First()); selectedServices = new long[]{}; SvcGroupHandlerChanged.InvokeAsync(SvcGroupHandler);}">@(userConfig.GetText("delete"))</button>
    }
</div>
<EditService @bind-Display="SvcGroupHandler.EditServiceMode" ServiceHandler="SvcGroupHandler.ServiceHandler" AddMode="SvcGroupHandler.AddServiceMode"/>
<ConfirmDelete @bind-Display="SvcGroupHandler.DeleteServiceMode" PerformAction="async () => { await SvcGroupHandler.DeleteService(); await SvcGroupHandlerChanged.InvokeAsync(SvcGroupHandler);}" Title="@userConfig.GetText("delete_service")" DeleteMessage="@SvcGroupHandler.deleteMessage"/>


@code
{
    [CascadingParameter]
    Action<Exception?, string, string, bool> DisplayMessageInUi { get; set; } = DefaultInit.DoNothing;

    [Parameter] 
    public ModellingDnDContainer Container { get; set; } = new();

    [Parameter]
    public EventCallback<ModellingDnDContainer> ContainerChanged { get; set; }

    [Parameter]
    public int Width { get; set; }

    [Parameter]
    public EventCallback<int> WidthChanged { get; set; }

    [Parameter]
    public ModellingServiceGroupHandler SvcGroupHandler { get; set; }

    [Parameter]
    public EventCallback<ModellingServiceGroupHandler> SvcGroupHandlerChanged { get; set; }


    private long[] selectedServices = new long[]{};
    private int sidebarLeftWidth { get { return Width; } set { Width = value; WidthChanged.InvokeAsync(Width);}}


    private void HandleDragStart(List<ModellingService> selectedSvcs)
    {
        Container.Clear();
        Container.SvcElements = selectedSvcs;
    }

    private List<ModellingService> ResolveSvc(long[] selectedIds)
    {
        List<ModellingService> addedSvcs = new();
        foreach(var id in selectedIds)
        {
            addedSvcs.Add(SvcGroupHandler.AvailableServices.FirstOrDefault(x => x.Id == id));
        }
        return addedSvcs;
    }
}
