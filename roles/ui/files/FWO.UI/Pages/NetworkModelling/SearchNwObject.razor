@using FWO.Config.Api

@attribute [Authorize(Roles = "admin, auditor, modeller")]

@inject ApiConnection apiConnection
@inject UserConfig userConfig

<PopUp Title="@(userConfig.GetText("search_nw_object"))" Large="true" Show="@Display" OnClose="Close">
    <Body>
        @if(Display)
        {
            <div class="form-group row col-sm-12">
                <label class="col-form-label">@(userConfig.GetText("object_type")):</label>
                @if(singleType)
                {
                    <label class="col-form-label text-primary ml-2">@userConfig.GetText(selectedType.ToString())</label>
                }
                else
                {
                    <div class="col-sm-2">
                        <Dropdown ElementType="ModellingTypes.NwGroupType" ElementToString="@(a => userConfig.GetText(a.ToString()))" @bind-SelectedElement="selectedType" Elements="availableTypes">
                            <ElementTemplate Context="type">
                                @userConfig.GetText(type.ToString())
                            </ElementTemplate>
                        </Dropdown>
                    </div>
                    <button type="button" class="btn btn-sm btn-primary" @onclick="InitType">@(userConfig.GetText("select"))</button>
                }
            </div>
            @if(typeSelected)
            {
                <div class="form-group row">
                    <label class="col-sm-2 col-form-label col-form-label-sm">@(userConfig.GetText("network_objects")):</label>
                    <div class="col-sm-9">
                        <Dropdown ElementType="ModellingNwObject" @bind-SelectedElement="selectedObject" ElementToString="@(o => o.Name)" Elements="nwObjects" Nullable="true">
                            <ElementTemplate Context="obj">
                                @obj.Name
                            </ElementTemplate>
                        </Dropdown>
                    </div>
                </div>
            }
        }
    </Body>
    <Footer>
        <div class="btn-group">
            @* <button type="button" class="btn btn-sm btn-success" @onclick="() => {Interface = selectedInterface; InterfaceChanged.InvokeAsync(Interface); Close();}">@(userConfig.GetText("select"))</button> *@
            <button type="button" class="btn btn-sm btn-secondary" @onclick="Close">@(userConfig.GetText("cancel"))</button>
        </div>
    </Footer>
</PopUp>


@code
{
    [CascadingParameter]
    Action<Exception?, string, string, bool> DisplayMessageInUi { get; set; } = DefaultInit.DoNothing;

    [Parameter]
    public bool Display { get; set; } = false;

    [Parameter]
    public EventCallback<bool> DisplayChanged { get; set; }



    private List<ModellingTypes.NwGroupType> availableTypes = new(){ ModellingTypes.NwGroupType.NetworkArea };
    private ModellingTypes.NwGroupType selectedType = ModellingTypes.NwGroupType.NetworkArea;
    private bool singleType = false;
    private bool typeSelected = false;
    private List<ModellingNwObject> nwObjects = new();
    private ModellingNwObject? selectedObject;
    private bool FirstTry = true;

    protected override async Task OnParametersSetAsync()
    {
        if(Display && FirstTry)
        {
            try
            {
                FirstTry = false;
                if (availableTypes.Count == 1)
                {
                    singleType = true;
                    await InitType();
                }
            }
            catch (Exception exception)
            {
                DisplayMessageInUi(exception, userConfig.GetText("fetch_data"), "", true);
            }
        }
    }

    private async Task InitType()
    {
        try
        {
            var queryParam = new
            {
                grpType = (int)selectedType
            };
            nwObjects = await apiConnection.SendQueryAsync<List<ModellingNwObject>>(FWO.Api.Client.Queries.ModellingQueries.getNwGroupObjects, queryParam);
            typeSelected = true;
        }
        catch (Exception exception)
        {
            DisplayMessageInUi(exception, userConfig.GetText("fetch_data"), "", true);
        }
    }

    private void Close()
    {
        FirstTry = true;
        Display = false;
        DisplayChanged.InvokeAsync(Display);
    }
}
