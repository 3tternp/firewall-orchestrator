@using FWO.Config.Api

@page "/monitoring"
@attribute [Authorize(Roles = "admin, reporter, reporter-viewall, recertifier, workflow-user, workflow-admin, auditor, fw-admin")]

@inject APIConnection apiConnection
@inject UserConfig userConfig

<h3>@(userConfig.GetText("monitoring"))</h3>

<AuthorizeView Roles="admin, fw-admin, auditor">
    <h4>@(userConfig.GetText("open_alerts"))</h4>
    <Table TableClass="table table-bordered table-sm table-responsive vheight75 overflow-auto sticky-header" TableItem="LogEntry" Items="alertEntrys" PageSize="0">
        <Column Context="alert" TableItem="LogEntry" Title="@(userConfig.GetText("action"))" Field="(x => x.Id)">
            <Template>
                <AuthorizeView Roles="admin, fw-admin">
                    <Authorized Context="ctx">
                        <button class="btn btn-sm btn-danger" @onclick="() => Acknowledge(alert)">@(userConfig.GetText("acknowledge"))</button>
                    </Authorized>
                    <NotAuthorized Context="ctx">
                        <button class="btn btn-sm btn-danger" disabled>@(userConfig.GetText("acknowledge"))</button>
                    </NotAuthorized> 
                </AuthorizeView>
            </Template>
        </Column>
        <Column TableItem="LogEntry" Title="@(userConfig.GetText("id"))" Field="@(x => x.Id)" />
        <Column TableItem="LogEntry" Title="@(userConfig.GetText("timestamp"))" Field="@(x => x.Timestamp)" />
        <Column TableItem="LogEntry" Title="@(userConfig.GetText("source"))" Field="@(x => x.Source)" />
        <Column TableItem="LogEntry" Title="@(userConfig.GetText("title"))" Field="@(x => x.SuspectedCause)" />
        <Column TableItem="LogEntry" Title="@(userConfig.GetText("description"))" Field="@(x => x.Description)" />
    </Table>
</AuthorizeView>

@code
{
    [CascadingParameter]
    Action<Exception?, string, string, bool>? DisplayMessageInUi { get; set; }

    [CascadingParameter]
    private Task<AuthenticationState>? authenticationStateTask { get; set; }

    private List<LogEntry> alertEntrys = new List<LogEntry>();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            alertEntrys = await apiConnection.SendQueryAsync<List<LogEntry>>(MonitorQueries.getOpenAlerts);
        }
        catch (Exception exception)
        {
            DisplayMessageInUi!(exception, userConfig.GetText("fetch_log_entrys"), "", true);
        }
    }

    private async Task Acknowledge(LogEntry alert)
    {
        try
        {
            var Variables = new 
            { 
                id = alert.Id,
                ackUser = userConfig.User.DbId,
                ackTime = DateTime.Now
            };
            await apiConnection.SendQueryAsync<ReturnId>(MonitorQueries.acknowledgeAlert, Variables);
            alertEntrys.Remove(alert);
            InvokeAsync(StateHasChanged);
        }
        catch (Exception exception)
        {
            DisplayMessageInUi!(exception, userConfig.GetText("acknowledged_alert"), "", true);
        }
    }

}
