@using FWO.Api.Client
@using FWO.Config.Api
@using FWO.Config.Api.Data
@using FWO.Ui.Services
@using System.Text.Json

@page "/settings/actions"
@attribute [Authorize(Roles = "admin, auditor")]

@inject ApiConnection apiConnection
@inject GlobalConfig globalConfig
@inject UserConfig userConfig

@if(InitComplete)
{
    <h3>@(userConfig.GetText("state_actions"))</h3>
    @(userConfig.GetText("U5317"))
    <hr />
    <button class="btn btn-sm btn-success" @onclick="AddAction">@(userConfig.GetText("add_action"))</button>
    <br><br>
    <div class="m-2">
        <Table class="table table-bordered table-responsive vheight75 overflow-auto sticky-header" TableItem="RequestStateAction" Items="actions" PageSize="0" ColumnReorder="true">
            <Column TableItem="RequestStateAction" Title="@(userConfig.GetText("actions"))" Field="(x => x.Id)" Sortable="false" Filterable="false">
                <Template>
                    <div class="btn-group">
                        <button class="btn btn-sm btn-warning" @onclick="() => EditAction(context)">@(userConfig.GetText("edit"))</button>
                        <button class="btn btn-sm btn-danger" @onclick="() => RequestDeleteAction(context)">@(userConfig.GetText("delete"))</button>
                    </div>
                </Template>
            </Column>
            <Column TableItem="RequestStateAction" Title="@(userConfig.GetText("id"))" Field="@(x => x.Id)" Sortable="true" Filterable="true" />
            <Column TableItem="RequestStateAction" Title="@(userConfig.GetText("name"))" Field="@(x => x.Name)" Sortable="true" Filterable="true" />
            <Column TableItem="RequestStateAction" Title="@(userConfig.GetText("action_type"))" Field="@(x => x.ActionType)" Sortable="true" Filterable="true" />
            <Column TableItem="RequestStateAction" Title="@(userConfig.GetText("scope"))" Field="@(x => x.Scope)" Sortable="true" Filterable="true" />
            <Column TableItem="RequestStateAction" Title="@(userConfig.GetText("event"))" Field="@(x => x.Event)" Sortable="true" Filterable="true" />
            <Column TableItem="RequestStateAction" Title="@(userConfig.GetText("external_params"))" Field="@(x => x.ExternalParams)" Sortable="true" Filterable="true" />
        </Table>
    </div>

    <PopUp Title="@(userConfig.GetText("edit_action"))" Show="@EditActionMode" OnClose="() => EditActionMode = false">
        <Body>
            @if (EditActionMode)
            {
                <div class="form-group row">
                    <div class="col-sm-2">
                        <label class="col-sm-3 col-form-label col-form-label-sm">@(userConfig.GetText("id")):</label>
                        <label class="col-sm-2 col-form-label col-form-label-sm">@(actAction.Id)</label>
                    </div>
                    <div class="col-sm-10">
                        <label class="col-sm-3 col-form-label col-form-label-sm">@(userConfig.GetText("name"))*:</label>
                        <input type="text" class="form-control form-control-sm" @bind="actAction.Name" />
                    </div>
                </div>
                <div class="form-group row">
                    <div class="col-sm-6">
                        <label class="col-sm-3 col-form-label col-form-label-sm">@(userConfig.GetText("action_type"))*:</label>
                        <select class="form-control form-control-sm" @bind="actAction.ActionType">
                            @foreach (string action in Enum.GetNames(typeof(ActionTypes)))
                            {
                                <option value="@action">@(userConfig.GetText(action))</option>
                            }
                        </select>
                    </div>
                    <div class="col-sm-6">
                        <label class="col-sm-3 col-form-label col-form-label-sm">@(userConfig.GetText("scope")):</label>
                        <input type="text" class="form-control form-control-sm" @bind="actAction.Scope" />
                    </div>
                </div>
                <div class="form-group row">
                    <div class="col-sm-6">
                        <label class="col-sm-3 col-form-label col-form-label-sm">@(userConfig.GetText("event")):</label>
                        <input type="text" class="form-control form-control-sm" @bind="actAction.Event" />
                    </div>
                    <div class="col-sm-6">
                        <label class="col-sm-3 col-form-label col-form-label-sm">@(userConfig.GetText("external_params")):</label>
                        <input type="text" class="form-control form-control-sm" @bind="actAction.ExternalParams" />
                    </div>
                </div>
            }
        </Body>
        <Footer>
            <div class="btn-group">
                <AuthorizeView Roles="admin, requester, fw-admin">
                    <Authorized>
                        <button class="btn btn-sm btn-primary" @onclick="SaveAction">@(userConfig.GetText("save"))</button>
                    </Authorized>
                    <NotAuthorized>
                        <button class="btn btn-sm btn-primary" disabled>@(userConfig.GetText("save"))</button>
                    </NotAuthorized> 
                </AuthorizeView>
                <button class="btn btn-sm btn-secondary" @onclick="Cancel">@(userConfig.GetText("cancel"))</button>
            </div>
        </Footer>
    </PopUp>

    <PopUp Title="@(userConfig.GetText("delete_action"))" Show="@DeleteActionMode" OnClose="() => DeleteActionMode = false">
        <Body>
            @if (DeleteActionMode)
            {
                <p>@(userConfig.GetText("U5502") + actAction.Name + "?")</p>
            }
        </Body>
        <Footer>
            <div class="btn-group">
                <AuthorizeView Roles="admin">
                    <Authorized>
                        <button class="btn btn-sm btn-danger" @onclick="DeleteAction">@(userConfig.GetText("delete"))</button>
                    </Authorized>
                    <NotAuthorized>
                        <button class="btn btn-sm btn-danger" disabled>@(userConfig.GetText("delete"))</button>
                    </NotAuthorized> 
                </AuthorizeView>
                <button class="btn btn-sm btn-secondary" @onclick="Cancel">@(userConfig.GetText("cancel"))</button>
            </div>
        </Footer>
    </PopUp>
}
else
{
    <div class="spinner-border" role="status">
        <span class="sr-only">Loading...</span>
    </div>
}

@code
{
    [CascadingParameter]
    Action<Exception?, string, string, bool>? DisplayMessageInUi { get; set; }

    private List<RequestStateAction> actions = new List<RequestStateAction>();

    private RequestStateAction actAction = new RequestStateAction();

    private bool EditActionMode = false;
    private bool AddActionMode = false;
    private bool DeleteActionMode = false;
    private bool InitComplete = false;

    protected override async Task OnInitializedAsync()
    {
        await RefreshActions();
        InitComplete = true;
    }

    private async Task RefreshActions()
    {
        try
        {
            actions = new List<RequestStateAction>();
            actions = await apiConnection.SendQueryAsync<List<RequestStateAction>>(FWO.Api.Client.Queries.RequestQueries.getActions);
        }
        catch (Exception exception)
        {
            DisplayMessageInUi!(exception, userConfig.GetText("fetch_data"), "", true);
        }
    }



    private void AddAction()
    {
        AddActionMode = true;
        EditAction(new RequestStateAction());
    }

    private void EditAction(RequestStateAction state)
    {
        actAction = state;
        EditActionMode = true;
    }

    private async Task SaveAction()
    {
        if(AddActionMode)
        {
            var Variables = new
            {
                name = actAction.Name,
                actionType = actAction.ActionType,
                scope = actAction.Scope,
                eventt = actAction.Event,
                externalParameters = actAction.ExternalParams
            };
            ReturnId[]? returnIds = (await apiConnection.SendQueryAsync<NewReturning>(FWO.Api.Client.Queries.RequestQueries.newAction, Variables)).ReturnIds;
            if (returnIds == null)
            {
                DisplayMessageInUi!(null, userConfig.GetText("save_action"), userConfig.GetText("E8011"), true);
            }
            else
            {
                actAction.Id = returnIds[0].NewId;
                actions.Add(actAction);
                EditActionMode = false;
                AddActionMode = false;
            }
        }
        else
        {
            var Variables = new
            {
                id = actAction.Id,
                name = actAction.Name,
                actionType = actAction.ActionType,
                scope = actAction.Scope,
                eventt = actAction.Event,
                externalParameters = actAction.ExternalParams
            };
            int udId = (await apiConnection.SendQueryAsync<ReturnId>(FWO.Api.Client.Queries.RequestQueries.updateAction, Variables)).UpdatedId;
            if(udId != actAction.Id)
            {
                DisplayMessageInUi!(null, userConfig.GetText("save_action"), userConfig.GetText("E8011"), true);
            }
            else
            {
                actions[actions.FindIndex(x => x.Id == actAction.Id)] = actAction;
                EditActionMode = false;
            }
        }
    }

    private void Cancel()
    {
        EditActionMode = false;
        AddActionMode = false;
        DeleteActionMode = false;
    }

    private void RequestDeleteAction(RequestStateAction action)
    {
        actAction = action;
        DeleteActionMode = true;
    }

    private async Task DeleteAction()
    {
        await apiConnection.SendQueryAsync<object>(FWO.Api.Client.Queries.RequestQueries.deleteAction, new { id = actAction.Id });
        actions.Remove(actAction);
        DeleteActionMode = false;
    }
}
