@using FWO.Api.Client
@using FWO.Config.Api
@using FWO.Config.Api.Data
@using System.Text.Json
@using FWO.Ui.Pages.NetworkModelling

@page "/settings/modelling"
@attribute [Authorize(Roles = $"{Roles.Admin}, {Roles.Auditor}")]

@inject ApiConnection apiConnection
@inject GlobalConfig globalConfig
@inject UserConfig userConfig

<div class="input-group">
    <h3>@(userConfig.GetText("modelling_settings"))</h3>
    <HelpLink Page="settings/modelling"/>
</div>
@(userConfig.GetText("U5322"))
<hr />

@if (configData != null)
{
    <button type="button" class="btn btn-sm btn-dark ms-5" data-toggle="tooltip" title="@(userConfig.PureLine("H5602"))"
        @onclick="PredefServices">@(userConfig.GetText("predef_services"))</button>
    <form onsubmit="return false">
        <div class="form-group row mt-2">
            <div class="row col-sm-4" data-toggle="tooltip" title="@(userConfig.PureLine("H5603"))">
                <label class="col-form-label col-sm-8">@(userConfig.GetText("allowServerInConn")):</label>
                <div class="col-sm-2">
                    <input type="checkbox" class="w-100" @bind="configData!.AllowServerInConn">
                </div>
            </div>
            <div class="row col-sm-4" data-toggle="tooltip" title="@(userConfig.PureLine("H5604"))">
                <label class="col-form-label col-sm-8">@(userConfig.GetText("allowServiceInConn")):</label>
                <div class="col-sm-2">
                    <input type="checkbox" class="w-100" @bind="configData!.AllowServiceInConn">
                </div>
            </div>
        </div>
        <div class="form-group row mt-2">
            <div class="row col-sm-4" data-toggle="tooltip" title="@(userConfig.PureLine("H5605"))">
                <label class="col-form-label col-sm-8">@(userConfig.GetText("overviewDisplayLines"))*:</label>
                <input type="number" min="0" class="col-sm-3" @bind="configData!.OverviewDisplayLines" />
            </div>
            <div class="row col-sm-4" data-toggle="tooltip" title="@(userConfig.PureLine("H5618"))">
                <label class="col-form-label col-sm-8">@(userConfig.GetText("modIconify"))*:</label>
                <div class="col-sm-2">
                    <input type="checkbox" class="w-100" @bind="configData!.ModIconify">
                </div>
            </div>
            <div class="row col-sm-4" data-toggle="tooltip" title="@(userConfig.PureLine("H5617"))">
                <label class="col-form-label col-sm-8">@(userConfig.GetText("reducedProtocolSet")):</label>
                <div class="col-sm-2">
                    <input type="checkbox" class="w-100" @bind="configData!.ReducedProtocolSet">
                </div>
            </div>
        </div>
        <hr />
        <div class="form-group row" data-toggle="tooltip" title="@(userConfig.PureLine("H5620"))">
            <label class="col-form-label col-sm-4">@userConfig.GetText("common_areas"):</label>
            <div class="col-sm-6">
                <EditList ElementType="ModellingNwGroupWrapper" Elements="commonAreas.ToArray()" ElementsToAdd="AreasToAdd" ElementsToDelete="AreasToDelete" StdLayout="false">
                    <Display>
                        <div class="row">
                            <div class="col-sm-12 border bg-transparent">@((MarkupString)context.Content.DisplayHtml())</div>
                        </div>
                    </Display>
                </EditList>
                <div class="row col-sm-12 mt-1">
                    <button type="button" class="col-sm-2 btn btn-sm btn-primary" @onclick="SearchArea" @onclick:preventDefault>
                        @(ModellingHandlerBase.DisplayButton(userConfig, "add_common_area", Icons.Add))</button>
                </div>
            </div>
        </div>
        <hr />
        <div class="form-group row">
            <div class="row col-sm-4" data-toggle="tooltip" title="@(userConfig.PureLine("H5606"))">
                <label class="col-form-label col-sm-8">@(userConfig.GetText("networkAreaRequired")):</label>
                <div class="col-sm-2">
                    <input type="checkbox" @bind="namingConvention.NetworkAreaRequired">
                </div>
            </div>
            <div class="row col-sm-4" data-toggle="tooltip" title="@(userConfig.PureLine("H5609"))">
                <label class="col-form-label col-sm-5">@userConfig.GetText("networkAreaPattern"):</label>
                <input type="text" class="col-sm-4" @bind="namingConvention.NetworkAreaPattern" />
            </div>
            <div class="row col-sm-4" data-toggle="tooltip" title="@(userConfig.PureLine("H5610"))">
                <label class="col-form-label col-sm-5">@userConfig.GetText("appRolePattern"):</label>
                <input type="text" class="col-sm-4" @bind="namingConvention.AppRolePattern" />
            </div>
        </div>
        <div class="form-group row mt-2">
            <div class="row col-sm-4" data-toggle="tooltip" title="@(userConfig.PureLine("H5607"))">
                <label class="col-form-label col-sm-5">@userConfig.GetText("fixedPartLength"):</label>
                <input type="number" min="0" class="col-sm-4" @bind="namingConvention.FixedPartLength" />
             </div>
            <div class="row col-sm-4" data-toggle="tooltip" title="@(userConfig.PureLine("H5619"))">
                <label class="col-form-label col-sm-8">@(userConfig.GetText("useAppPart")):</label>
                <div class="col-sm-2">
                    <input type="checkbox" @bind="namingConvention.UseAppPart">
                </div>
            </div>
            <div class="row col-sm-4" data-toggle="tooltip" title="@(userConfig.PureLine("H5608"))">
                <label class="col-form-label col-sm-5">@userConfig.GetText("freePartLength"):</label>
                <input type="number" min="0" class="col-sm-4" @bind="namingConvention.FreePartLength" />
            </div>
        </div>
        <hr />
        <div class="form-group row" data-toggle="tooltip" title="@(userConfig.PureLine("H5611"))">
            <label class="col-form-label col-sm-4">@userConfig.GetText("importAppDataPath"):</label>
            <div class="col-sm-6">
                <EditList ElementType="string" Elements="appDataPaths.ToArray()" ElementsToAdd="PathsToAdd" ElementsToDelete="PathsToDelete" StdLayout="false">
                    <Display>
                        <div class="row">
                            <div class="col-sm-12 border bg-transparent">@context</div>
                        </div>
                    </Display>
                </EditList>
                <div class="row col-sm-12 mt-1">
                    <input type="text" class="col-sm-10" @bind="actPath" />
                    <button type="button" class="col-sm-2 btn btn-sm btn-primary" @onclick="AddPath" @onclick:preventDefault>@(ModellingHandlerBase.DisplayButton(userConfig, "add", Icons.Add))</button>
                </div>
            </div>
        </div>
        <div class="form-group row mt-2" data-toggle="tooltip" title="@(userConfig.PureLine("H5612"))">
            <label class="col-form-label col-sm-4">@(userConfig.GetText("importAppDataSleepTime")):</label>
            <input type="number" min="0" class="col-sm-2" @bind="configData!.ImportAppDataSleepTime" />
        </div>
        <div class="form-group row mt-2" data-toggle="tooltip" title="@(userConfig.PureLine("H5613"))">
            <label class="col-form-label col-sm-4">@(userConfig.GetText("importAppDataStartAt")):</label>
            <input type="time" step="60" class="col-sm-2" @bind="configData!.ImportAppDataStartAt" />
        </div>
        <hr />
        <div class="form-group row" data-toggle="tooltip" title="@(userConfig.PureLine("H5614"))">
            <label class="col-form-label col-sm-4">@userConfig.GetText("importSubnetDataPath"):</label>
            <input type="text" class="col-sm-6" @bind="configData!.ImportSubnetDataPath" />
        </div>
        <div class="form-group row mt-2" data-toggle="tooltip" title="@(userConfig.PureLine("H5615"))">
            <label class="col-form-label col-sm-4">@(userConfig.GetText("importSubnetDataSleepTime")):</label>
            <input type="number" min="0" class="col-sm-2" @bind="configData!.ImportSubnetDataSleepTime" />
        </div>
        <div class="form-group row mt-2" data-toggle="tooltip" title="@(userConfig.PureLine("H5616"))">
            <label class="col-form-label col-sm-4">@(userConfig.GetText("importSubnetDataStartAt")):</label>
            <input type="time" step="60" class="col-sm-2" @bind="configData!.ImportSubnetDataStartAt" />
        </div>
    </form>
    <hr />
    <AuthorizeView Roles="@Roles.Admin">
        <Authorized>
            <button type="button" class="btn btn-sm btn-primary" @onclick="Save" @onclick:preventDefault>@(userConfig.GetText("save"))</button>
        </Authorized>
        <NotAuthorized>
            <button type="button" class="btn btn-sm btn-primary" disabled>@(userConfig.GetText("save"))</button>
        </NotAuthorized> 
    </AuthorizeView>
    <br><br>
    <p>@(userConfig.GetText("U5303"))</p>
}
else
{
    <div class="spinner-border" role="status">
        <span class="sr-only">Loading...</span>
    </div>
}
<PredefServices @bind-Display="predefServices"/>
<SearchNwObject @bind-Display="searchArea" @bind-ObjectList="commonAreas" CommonAreaMode="true"/>


@code
{
    [CascadingParameter]
    Action<Exception?, string, string, bool> DisplayMessageInUi { get; set; } = DefaultInit.DoNothing;

    private ConfigData? configData;
    private List<string> appDataPaths = new();
    private List<string> PathsToAdd = new();
    private List<string> PathsToDelete = new();
    private string actPath = "";
    private List<ModellingNwGroup> allAreas = new();
    private List<long> commonAreaIds = new();
    private List<ModellingNwGroupWrapper> commonAreas = new();
    private List<ModellingNwGroupWrapper> AreasToAdd = new();
    private List<ModellingNwGroupWrapper> AreasToDelete = new();
    private bool predefServices = false;
    private bool searchArea = false;
    private ModellingNamingConvention namingConvention = new();


    protected override async Task OnInitializedAsync()
    {
        try
        {
            configData = await globalConfig.GetEditableConfig();
            appDataPaths = JsonSerializer.Deserialize<List<string>>(configData.ImportAppDataPath) ?? new();
            namingConvention = JsonSerializer.Deserialize<ModellingNamingConvention>(configData.ModNamingConvention) ?? new();
            allAreas = await apiConnection.SendQueryAsync<List<ModellingNwGroup>>(FWO.Api.Client.Queries.ModellingQueries.getNwGroupObjects, new { grpType = (int)ModellingTypes.ModObjectType.NetworkArea });
            RefreshAreas();
        }
        catch (Exception exception)
        {
            DisplayMessageInUi(exception, userConfig.GetText("read_config"), userConfig.GetText("E5301"), false);
        }
    }

    private void RefreshAreas()
    {
        if(configData.ModCommonAreas != "")
        {
            commonAreaIds = JsonSerializer.Deserialize<List<long>>(configData.ModCommonAreas) ?? new();
        }
        commonAreas = new();
        foreach(var areaId in commonAreaIds)
        {
            ModellingNwGroup? area = allAreas.FirstOrDefault(a => a.Id == areaId);
            if(area != null)
            {
                commonAreas.Add(new () { Content = area });
            }
        }
    }

    private void AddPath()
    {
        if(actPath != "")
        {
            PathsToAdd.Add(actPath);
            actPath = "";
        }
    }

    private void PredefServices()
    {
        predefServices = true;
    }

    private void SearchArea()
    {
        searchArea = true;
    }

    private async Task Save()
    {
        try
        {
            if (configData != null)
            {
                foreach(var path in PathsToDelete)
                {
                    appDataPaths.Remove(path);
                }
                foreach(var path in PathsToAdd)
                {
                    appDataPaths.Add(path);
                }
                configData.ImportAppDataPath = JsonSerializer.Serialize(appDataPaths);
                configData.ModNamingConvention = JsonSerializer.Serialize(namingConvention);
                commonAreaIds = commonAreas.ConvertAll(x => x.Content.Id);
                foreach(var area in AreasToDelete)
                {
                    commonAreaIds.Remove(area.Content.Id);
                }
                configData.ModCommonAreas = JsonSerializer.Serialize(commonAreaIds);
                await globalConfig.WriteToDatabase(configData, apiConnection);
                PathsToDelete = new();
                PathsToAdd = new();
                AreasToDelete = new();
                RefreshAreas();
                DisplayMessageInUi(null, userConfig.GetText("modelling_settings"), userConfig.GetText("U5301"), false);
            }
            else
            {
                throw new Exception("Data saved before loaded. This should be impossible.");
            }
        }
        catch (Exception exception)
        {
            DisplayMessageInUi(exception, userConfig.GetText("modelling_settings"), "", true);
        }
    }
}
