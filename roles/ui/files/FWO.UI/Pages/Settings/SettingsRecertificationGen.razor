@using FWO.Api.Client
@using FWO.Config.Api
@using FWO.Config.Api.Data
@using FWO.Recert

@page "/settings/recertificationgeneral"
@attribute [Authorize(Roles = "admin, auditor")]

@inject ApiConnection apiConnection
@inject GlobalConfig globalConfig
@inject UserConfig userConfig

<h3>@(userConfig.GetText("recert_settings"))</h3>
@(userConfig.GetText("U5311"))
<hr />

@if (configData != null)
{
    <form class="form-inline" onsubmit="return false">
        <label class="col-form-label col-sm-4">@(userConfig.GetText("recertificationPeriod")):</label>
        <div class="col-sm-2">
            <input type="number" class="form-control form-control-sm w-100" @bind="configData!.RecertificationPeriod" />
        </div>
    </form>
    <form class="form-inline" onsubmit="return false">
        <label class="col-form-label col-sm-4">@(userConfig.GetText("recertificationNoticePeriod")):</label>
        <div class="col-sm-2">
            <input type="number" class="form-control form-control-sm w-100" @bind="configData!.RecertificationNoticePeriod" />
        </div>
    </form>
    <form class="form-inline" onsubmit="return false">
        <label class="col-form-label col-sm-4">@(userConfig.GetText("recertificationDisplayPeriod"))*:</label>
        <div class="col-sm-2">
            <input type="number" class="form-control form-control-sm w-100" @bind="configData!.RecertificationDisplayPeriod" />
        </div>
    </form>
    <form class="form-inline" onsubmit="return false">
        <label class="col-form-label col-sm-4">@(userConfig.GetText("ruleRemovalGracePeriod")):</label>
        <div class="col-sm-2">
            <input type="number" class="form-control form-control-sm w-100" @bind="configData!.RuleRemovalGracePeriod" />
        </div>
    </form>
    <form class="form-inline">
        <label class="col-form-label col-sm-4">@(userConfig.GetText("commentRequired")):</label>
        <div class="col-sm-2">
            <input type="checkbox" class="w-100" @bind="configData!.CommentRequired" />
        </div>
    </form>
    <hr />
    <form class="form-inline">
        <label class="col-form-label col-sm-4">@(userConfig.GetText("recCheckActive")):</label>
        <div class="col-sm-2">
            <input type="checkbox" class="w-100" @bind="configData!.RecCheckActive" />
        </div>
    </form>
    <form class="form-inline" onsubmit="return false">
        <label class="col-form-label col-sm-4">@(userConfig.GetText("recert_check_every"))*:</label>
        <div class="col-sm-8">
            <div class="form-group row">
                <div class="col-sm-2">
                    <input type="number" min="1" class="form-control form-control-sm" @bind="recCheckParams.RecertCheckOffset" />
                </div>
                <div class="col-sm-4">
                    <select class="form-control form-control-sm" @bind="recCheckParams.RecertCheckInterval">
                        @foreach (Interval interval in Enum.GetValues(typeof(Interval)))
                        {
                            if (interval != Interval.Never && interval != Interval.Years)
                            {
                                <option value="@interval">@userConfig.GetText(interval.ToString())</option>
                            }
                        }
                    </select>
                </div>
                @if(recCheckParams.RecertCheckInterval == Interval.Weeks)
                {
                    <label class="col-sm-2 col-form-label col-form-label-sm">@(userConfig.GetText("each_on")):</label>
                    <div class="col-sm-4">
                        <select class="form-control form-control-sm" @bind="recCheckParams.RecertCheckWeekday">
                            <option value="-1">@userConfig.GetText("undefined")</option>
                            @foreach (DayOfWeek day in Enum.GetValues(typeof(DayOfWeek)))
                            {
                                <option value="@((int)day)">@userConfig.GetText(day.ToString())</option>
                            }
                        </select>
                    </div>
                }
                else if(recCheckParams.RecertCheckInterval == Interval.Months)
                {
                    <label class="col-sm-2 col-form-label col-form-label-sm">@(userConfig.GetText("each_on")):</label>
                    <div class="col-sm-2">
                        <input type="number" min="0" max="31" class="form-control form-control-sm" @bind="recCheckParams.RecertCheckDayOfMonth" />
                    </div>
                }
            </div>
        </div>
    </form>
    <form class="form-inline" onsubmit="return false">
        <label class="col-form-label col-sm-4">@(userConfig.GetText("recCheckEmailSubject")):</label>
        <div class="col-sm-7">
            <input type="text" class="form-control form-control-sm w-100" @bind="configData!.RecCheckEmailSubject" />
        </div>
    </form>
    <form class="form-inline" onsubmit="return false">
        <label class="col-form-label col-sm-4">@(userConfig.GetText("recCheckEmailUpcomingText")):</label>
        <div class="col-sm-7">
            <input type="text" class="form-control form-control-sm w-100" @bind="configData!.RecCheckEmailUpcomingText" />
        </div>
    </form>
    <form class="form-inline" onsubmit="return false">
        <label class="col-form-label col-sm-4">@(userConfig.GetText("recCheckEmailOverdueText")):</label>
        <div class="col-sm-7">
            <input type="text" class="form-control form-control-sm w-100" @bind="configData!.RecCheckEmailOverdueText" />
        </div>
    </form>
    <hr />
    <form class="form-inline">
        <label class="col-form-label col-sm-4">@(userConfig.GetText("recAutocreateDeleteTicket")):</label>
        <div class="col-sm-2">
            <input type="checkbox" class="w-100" @bind="configData!.RecAutoCreateDeleteTicket" />
        </div>
    </form>
    <form class="form-inline" onsubmit="return false">
        <label class="col-form-label col-sm-4">@(userConfig.GetText("recDeleteRuleTicketTitle")):</label>
        <div class="col-sm-7">
            <input type="text" class="form-control form-control-sm w-100" @bind="configData!.RecDeleteRuleTicketTitle" />
        </div>
    </form>
    <form class="form-inline" onsubmit="return false">
        <label class="col-form-label col-sm-4">@(userConfig.GetText("recDeleteRuleTicketReason")):</label>
        <div class="col-sm-7">
            <input type="text" class="form-control form-control-sm w-100" @bind="configData!.RecDeleteRuleTicketReason" />
        </div>
    </form>
    <form class="form-inline" onsubmit="return false">
        <label class="col-form-label col-sm-4">@(userConfig.GetText("recDeleteRuleReqTaskTitle")):</label>
        <div class="col-sm-7">
            <input type="text" class="form-control form-control-sm w-100" @bind="configData!.RecDeleteRuleReqTaskTitle" />
        </div>
    </form>
    <form class="form-inline" onsubmit="return false">
        <label class="col-form-label col-sm-4">@(userConfig.GetText("recDeleteRuleReqTaskReason")):</label>
        <div class="col-sm-7">
            <input type="text" class="form-control form-control-sm w-100" @bind="configData!.RecDeleteRuleReqTaskReason" />
        </div>
    </form>
    <form class="form-inline" onsubmit="return false">
        <label class="col-form-label col-sm-4">@(userConfig.GetText("recDeleteRuleTicketPriority")):</label>
        <div class="col-sm-7">
            <select class="form-control form-control-sm" @bind="configData!.RecDeleteRuleTicketPriority">
                @foreach (var prio in PrioList)
                {
                    <option value="@prio.NumPrio">@(prio.Name)</option>
                }
            </select>
        </div>
    </form>
    <form class="form-inline" onsubmit="return false">
        <label class="col-form-label col-sm-4">@(userConfig.GetText("recDeleteRuleInitState")):</label>
        <div class="col-sm-7">
            <select class="form-control form-control-sm" @bind="configData!.RecDeleteRuleInitState">
                @foreach (var state in states)
                {
                    <option value="@state.Id">@(state.Name)</option>
                }
            </select>
        </div>
    </form>
    <hr />
    <AuthorizeView Roles="admin">
        <Authorized>
            @if (!recertCalcInProgress)
            {
                <button class="btn btn-sm btn-info" @onclick:preventDefault="true" @onclick="@( async () => { 
                    recertCalcInProgress = true; 
                    if (await recertRefresh.RecalcRecerts())
                    {
                        DisplayMessageInUi(null, userConfig.GetText("fetch_data"), "Error during recertification refresh", true);
                    }
                    recertCalcInProgress = false; 
                })">@(userConfig.GetText("recalc_recerts"))</button>
            }
            else
            {
                <div class="spinner-border" role="status"><span class="sr-only">Loading...</span></div>
            }
            <br>
            <button class="btn btn-sm btn-primary" @onclick="Save" @onclick:preventDefault>@(userConfig.GetText("save"))</button>
        </Authorized>
        <NotAuthorized>
            <button class="btn btn-sm btn-primary" disabled>@(userConfig.GetText("save"))</button>
        </NotAuthorized>
    </AuthorizeView>
    <br><br>
    <p>@(userConfig.GetText("U5304"))</p>
}
else
{
    <div class="spinner-border" role="status">
        <span class="sr-only">Loading...</span>
    </div>
}



@code
{
    [CascadingParameter]
    Action<Exception?, string, string, bool> DisplayMessageInUi { get; set; } = DefaultInit.DoNothing;

    private ConfigData? configData;
    private List<RequestPriority> PrioList = new List<RequestPriority>();
    private RecertCheckParams recCheckParams = new RecertCheckParams();
    private List<RequestState> states = new List<RequestState>();
    private bool recertCalcInProgress = false;
    private RecertRefresh recertRefresh;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            configData = await globalConfig.GetEditableConfig();
            recertRefresh = new RecertRefresh(userConfig, apiConnection);
            PrioList = System.Text.Json.JsonSerializer.Deserialize<List<RequestPriority>>(userConfig.ReqPriorities) ?? throw new Exception("Config data could not be parsed.");
            recCheckParams = System.Text.Json.JsonSerializer.Deserialize<RecertCheckParams>(userConfig.RecCheckParams) ?? throw new Exception("Config data could not be parsed.");
            states = await apiConnection.SendQueryAsync<List<RequestState>>(FWO.Api.Client.Queries.RequestQueries.getStates);
        }
        catch (Exception exception)
        {
            DisplayMessageInUi(exception, userConfig.GetText("read_config"), userConfig.GetText("E5301"), false);
        }
    }

    private async Task Save()
    {
        try
        {
            if (configData != null)
            {
                if(recCheckParams.RecertCheckDayOfMonth == 0)
                {
                    recCheckParams.RecertCheckDayOfMonth = null;
                }
                if(recCheckParams.RecertCheckWeekday == -1)
                {
                    recCheckParams.RecertCheckWeekday = null;
                }
                configData.RecCheckParams = System.Text.Json.JsonSerializer.Serialize(recCheckParams);
                await globalConfig.WriteToDatabase(configData, apiConnection);
                DisplayMessageInUi(null, userConfig.GetText("change_default"), userConfig.GetText("U5301"), false);
            }
            else
            {
                throw new Exception("Data saved before loaded. This should be impossible.");
            }
        }
        catch (Exception exception)
        {
            DisplayMessageInUi(exception, userConfig.GetText("change_default"), "", true);
        }
    }
}
