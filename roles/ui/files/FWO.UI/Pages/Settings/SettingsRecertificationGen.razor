@using FWO.Api.Client
@using FWO.Config.Api
@using FWO.Config.Api.Data

@page "/settings/recertificationgeneral"
@attribute [Authorize(Roles = "admin, auditor")]

@inject ApiConnection apiConnection
@inject GlobalConfig globalConfig
@inject UserConfig userConfig

<h3>@(userConfig.GetText("recert_settings"))</h3>
@(userConfig.GetText("U5311"))
<hr />

@if (configData != null)
{
    <form class="form-inline" onsubmit="return false">
        <label for="recertificationPeriod" class="col-form-label col-sm-4">@(userConfig.GetText("recertificationPeriod")):</label>
        <div class="col-sm-2">
            <input id="recertificationPeriod" type="number" class="form-control form-control-sm w-100" @bind="configData!.RecertificationPeriod" />
        </div>
    </form>
    <form class="form-inline" onsubmit="return false">
        <label for="recertificationNoticePeriod" class="col-form-label col-sm-4">@(userConfig.GetText("recertificationNoticePeriod")):</label>
        <div class="col-sm-2">
            <input id="recertificationNoticePeriod" type="number" class="form-control form-control-sm w-100" @bind="configData!.RecertificationNoticePeriod" />
        </div>
    </form>
    <form class="form-inline" onsubmit="return false">
        <label for="recertificationDisplayPeriod" class="col-form-label col-sm-4">@(userConfig.GetText("recertificationDisplayPeriod"))*:</label>
        <div class="col-sm-2">
            <input id="recertificationDisplayPeriod" type="number" class="form-control form-control-sm w-100" @bind="configData!.RecertificationDisplayPeriod" />
        </div>
    </form>
    <form class="form-inline" onsubmit="return false">
        <label for="ruleRemovalGracePeriod" class="col-form-label col-sm-4">@(userConfig.GetText("ruleRemovalGracePeriod")):</label>
        <div class="col-sm-2">
            <input id="ruleRemovalGracePeriod" type="number" class="form-control form-control-sm w-100" @bind="configData!.RuleRemovalGracePeriod" />
        </div>
    </form>
    <form class="form-inline">
        <label for="commentRequired" class="col-form-label col-sm-4">@(userConfig.GetText("commentRequired")):</label>
        <div class="col-sm-2">
            <input id="commentRequired" type="checkbox" class="w-100" @bind="configData!.CommentRequired">
        </div>
    </form>
    <hr />
    <AuthorizeView Roles="admin">
        <Authorized>
            <button class="btn btn-sm btn-primary" @onclick="Save" @onclick:preventDefault>@(userConfig.GetText("save"))</button>
        </Authorized>
        <NotAuthorized>
            <button class="btn btn-sm btn-primary" disabled>@(userConfig.GetText("save"))</button>
        </NotAuthorized> 
    </AuthorizeView>
    <br><br>
    <p>@(userConfig.GetText("U5303"))</p>
}
else
{
    <div class="spinner-border" role="status">
        <span class="sr-only">Loading...</span>
    </div>
}



@code
{
    [CascadingParameter]
    Action<Exception?, string, string, bool> DisplayMessageInUi { get; set; } = DefaultInit.DoNothing;

    private ConfigData? configData;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            configData = await globalConfig.GetEditableConfig();
        }
        catch (Exception exception)
        {
            DisplayMessageInUi(exception, userConfig.GetText("read_config"), userConfig.GetText("E5301"), false);
        }
    }

    private async Task Save()
    {
        try
        {
            if (configData != null)
            {
                await globalConfig.WriteToDatabase(configData, apiConnection);
                DisplayMessageInUi(null, userConfig.GetText("change_default"), userConfig.GetText("U5301"), false);
            }
            else
            {
                throw new Exception("Data saved before loaded. This should be impossible.");
            }
        }
        catch (Exception exception)
        {
            DisplayMessageInUi(exception, userConfig.GetText("change_default"), "", true);
        }
    }
}
