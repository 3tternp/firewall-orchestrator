@using FWO.Api.Data

@inject UserConfig userConfig

<div class="form-group row">
    <label class="col-sm-3 col-form-label col-form-label-sm">@(userConfig.GetText("ip_addresses")):</label>
    <div class="col-sm-9">
        @foreach(var ipAdd in IpAddresses)
        {
            <div class="col-sm-12">
                <div class="form-group row">
                    <input type="text" class="col-sm-11 form-control form-control-sm" readonly @bind="ipAdd.Cidr.CidrString" />
                    <button type="button" class="col-sm-1 btn btn-sm btn-secondary" @onclick:preventDefault @onclick="() => DeleteIp(ipAdd)">x</button>
                </div>
            </div>
        }
        <div class="col-sm-12">
            <div class="form-group row">
                <input @onsubmit:preventDefault @onsubmit:stopPropagation type="text" class="col-sm-12 form-control form-control-sm" placeholder="@(userConfig.GetText("insert_ip"))" @bind="newIpString"/>
            </div>
        </div>
    </div>
</div>

@code
{
    [Parameter]
    public List<NwObjectElement> IpAddresses { get; set; } = new List<NwObjectElement>();

    [Parameter]
    public EventCallback<List<NwObjectElement>> IpAddressesChanged { get; set; }
    
    [Parameter]
    public Func<bool> IpAltered { get; set; } = DefaultInit.DoNothingSync;


    private string newIpInt = "";
    private string newIpString
    {
        get => newIpInt;
        set
        {
            if(value != null && value != "")
            {
                NwObjectElement obj = new NwObjectElement(value, 0);
                if (obj.Cidr.Valid)
                {
                    IpAddresses.Add(obj);
                    newIpInt = "";
                }
            }
            IpAltered();
        }
    }

    private void DeleteIp(NwObjectElement obj)
    {
        IpAddresses.Remove(obj);
        IpAltered();
    }
}
