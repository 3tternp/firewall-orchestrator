@typeparam ElementType

<div class="btn-group">
	<div class="input-group input-group-sm" @onclick="Toggle">
		<div class="input-group-prepend">
			<span class="input-group-text"><span class="oi oi-magnifying-glass"></span></span>
		</div>
		<input class="custom-select" @onfocus="ClearFilter" @onblur="ToggleWithDelay" @oninput="Filter" @bind="searchValue" />
	</div>
	<ul class="dropdown-menu" style="@(Toggled ? "" : "display: inline;")">
		@if (!Toggled)
		{
			@if (Value != null)
			{
				<li><div class="dropdown-item">@ElementTemplate(Value)</div></li>
				<li><hr class="dropdown-divider"></li>
			}
			@foreach (ElementType element in FilteredElements)
			{
				<li><button class="dropdown-item" @onclick="() => Value = element">@ElementTemplate(element)</button></li>
			}
		}
	</ul>
</div>


@code
{
	[Parameter]
	public Func<ElementType, string> ElementToString { get; set; } = (o => o.ToString() ?? "");

	[Parameter]
	public RenderFragment<ElementType> ElementTemplate { get; set; } = element => __builder => { @element };

	public IEnumerable<ElementType> FilteredElements { get; private set; } = Enumerable.Empty<ElementType>();

	private IEnumerable<ElementType> _elements = Enumerable.Empty<ElementType>();

	[Parameter]
	public IEnumerable<ElementType> Elements
	{
		get { return _elements; }
		set 
		{ 
			_elements = value;
			Filter(searchValue);
			Value = _elements.FirstOrDefault();
		}
	}

	private ElementType? _value;

	[Parameter]
	public ElementType? Value
	{
		get { return _value; }
		set
		{
			_value = value;
			DisplayValue(value);
			ValueChanged.InvokeAsync(value);
		}
	}

	[Parameter]
	public EventCallback<ElementType> ValueChanged { get; set; }

	public bool Toggled { get; private set; } = true;

	private string searchValue = "";

	public void Toggle()
	{
		Toggled = !Toggled;
	}

	private void Filter(ChangeEventArgs input)
	{
		Filter((input.Value ?? "").ToString() ?? "");
	}

	private void Filter(string filter)
	{
		FilteredElements = Elements.Where(e => ElementToString(e).Contains(filter));
	}

	private void ClearFilter()
	{
		searchValue = "";
		Filter(""); // No filter
	}

	private void DisplayValue(ElementType? value)
	{
		if (value != null)
		{
			searchValue = ElementToString(value);  // set search / display field to current value
		}
	}

	private void ToggleWithDelay(FocusEventArgs input)
	{
		Task.Run(async () =>
		{
			await Task.Delay(200); // Close with a slight delay, so that value changes can be processed
			DisplayValue(Value); // Reset display
			Toggled = true;
			await InvokeAsync(StateHasChanged);				
		});
	}
}
