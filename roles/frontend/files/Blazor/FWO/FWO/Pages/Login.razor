@using FWO.Auth
@using FWO.Backend.Auth
@using FWO_Auth_Client

@inject AuthClient AuthClient
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage
@inject AuthenticationStateProvider AuthService
@inject APIConnection ApiConnection

@if (showLoginForm)
{
    <div class="row m-4 justify-content-center">
        <div>
            <h2 class="text-center"> Login </h2>
            <div class="shadow-sm card p-2">
                <input type="text" style="width: 200px" class="m-2 form-control" id="UsernameInput" placeholder="Enter Username" @bind="Username">
                <input type="password" style="width: 200px" class="m-2 form-control" id="PasswordInput" placeholder="Enter Password" @bind="Password">
                <button class="btn btn-primary m-2" @onclick="LoginSubmit">Login</button>
            </div>
        </div>
    </div>
}

@code
{
    // dont immediately show login page because session storage is only available after render, so there might be a immediate redirect
    private bool showLoginForm = false;

    private string Username = "";
    private string Password = "";

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        string jwt = await sessionStorage.GetItemAsync<string>("jwt");

        if (jwt != null)
        {
            // This might be a reconnect. Check if there is a jwt in session storage.
            ((AuthStateProvider)AuthService).AuthenticateUser(Username, Password, jwt);
        }

        showLoginForm = true;
        if (firstRender)
            StateHasChanged();
    }

    private async Task LoginSubmit()
    {
        // There is no jwt in session storage. Get one from auth module.
        string jwt = await AuthClient.GetJWT(Username, Password);

        // Save it in session storage.
        await sessionStorage.SetItemAsync<string>("jwt", jwt);

        ApiConnection.ChangeAuthHeader(jwt);

        // Try to auth with jwt (validates it, gets roles, ...).
        ((AuthStateProvider)AuthService).AuthenticateUser(Username, Password, jwt);
    }
}