@using BlazorTable
@using FWO.Ui.Data.API
@using FWO.ApiClient

@page "/settings/managements"

@inject APIConnection apiConnection

<h3 class="m-2">Managements</h3>

<div class="d-flex flex-column m-2">
    <Table class="table table-bordered table-responsive" TableItem="Management" Items="managements" @ref="table" PageSize="0" ColumnReorder="true">
        <Column TableItem="Management" Title="Name" Field="@(x => x.Name)" Sortable="true" Filterable="true">
            <Template>
                @{
                    if (EditMode && context.Id == ManagementIdEdit)
                    {
                        <input type="text" @bind-value="@context.Name" class="form-control form-control-sm" />
                    }
                    else
                    {
                        @context.Name
                    }
                }
            </Template>
        </Column>
        <Column TableItem="Management" Title="Type" Field="@(x => x.Type)" Sortable="true" Filterable="true">
            <Template>
                @{
                    if (EditMode && context.Id == ManagementIdEdit)
                    {
                        <input type="text" @bind-value="@context.Type" class="form-control form-control-sm" />
                    }
                    else
                    {
                        @DevTypeName(context.Type)
                    }
                }
            </Template>
        </Column>
        <Column TableItem="Management" Title="Version" Field="@(x => x.Type)" Sortable="true" Filterable="true">
            <Template>
                @{
                    if (EditMode && context.Id == ManagementIdEdit)
                    {
                        <input type="text" @bind-value="@context.Type" class="form-control form-control-sm" />
                    }
                    else
                    {
                        @DevTypeVersion(context.Type)
                    }
                }
            </Template>
        </Column>
        <Column TableItem="Management" Title="Private Key" Field="@(x => x.PrivateKey)" Sortable="false" Filterable="false">
            <Template>
                @{
                    if (EditMode && context.Id == ManagementIdEdit)
                    {
                        <input type="text" @bind-value="@context.PrivateKey" class="form-control form-control-sm" />
                    }
                    else
                    {
                        @context.PrivateKey.Substring(0, (context.PrivateKey.Length < 60 ? context.PrivateKey.Length : 60))
                    }
                }
            </Template>
        </Column>
        <Column TableItem="Management" Title="Action" Field="(x => x.Id)" Sortable="false" Filterable="false">
            <Template>
                @{
                    if (EditMode && ManagementIdEdit == context.Id)
                    {
                        <div class="btn-group">
                            <button class="btn btn-sm btn-primary" @onclick="Save">Save</button>
                            <button class="btn btn-sm btn-secondary" @onclick="Cancel">Cancel</button>
                        </div>
                    }
                    else
                    {
                        <div class="btn-group">
                            <button class="btn btn-sm btn-warning" @onclick="() => Edit(context)">Edit</button>
                            <button class="btn btn-sm btn-danger" @onclick="() => Delete(context)">Delete</button>
                        </div>
                    }
                }
            </Template>
        </Column>
    </Table>

    @*<form class="form-inline m-2">
            <div class="form-group m-1">
                <label for="rulesPerDeviceHtml">Load rules per fetch: </label>
                <input id="rulesPerDeviceHtml" type="number" class="form-control m-1" @bind="rulesPerFetch" />
            </div>
            <div class="form-group m-1">
                <label for="rulesPerPageHtml">Show rules per page: </label>
                <input id="rulesPerPageHtml" type="number" class="form-control m-1" @bind="rulesPerPage" />
            </div>
        </form>*@
</div>

<button class="btn btn-success m-2" @onclick="Add">Add new management</button>


@code
{
    private List<Management> managements = new List<Management>();
    private List<DeviceType> deviceTypes = new List<DeviceType>();

    private ITable<Management> table;

    private bool EditMode = false;
    // private bool DeleteMode = false;
    private bool AddMode = false;

    private int ManagementIdEdit = int.MinValue;
    // private int ManagementIdDelete = int.MinValue;

    Management newManagement;
    // Management unchangedManagement;

    protected override async Task OnInitializedAsync()
    {
        managements = (await Task.Run(() => apiConnection.SendQueryAsync<Management[]>(FWO.ApiClient.Queries.BasicQueries.getManagementsDetails))).ToList();
        deviceTypes = (await Task.Run(() => apiConnection.SendQueryAsync<DeviceType[]>(FWO.ApiClient.Queries.BasicQueries.getDeviceTypeDetails))).ToList();
    }

    private string DevTypeName(int id)
    {
        return deviceTypes.Find(x => x.Id == id).Name;
    }

    private string DevTypeVersion(int id)
    {
        return deviceTypes.Find(x => x.Id == id).Version;
    }
    private void Edit(Management management)
    {
        ManagementIdEdit = management.Id;
        // unchangedManagement = management;
        EditMode = true;
    }

    private async Task Delete(Management management)
    {
        var Variables = new { id = management.Id };
        int delId = (await Task.Run(() => apiConnection.SendQueryAsync<Management>(FWO.ApiClient.Queries.BasicQueries.deleteManagement, Variables))).Id;
        if(delId == management.Id)
        {
            managements.Remove(management);
        }
    }

    private void Add()
    {
        AddMode = true;
        newManagement = new Management() { Id = int.MaxValue, Name = "" };
        managements.Add(newManagement);
        Edit(newManagement);
    }

    private async Task Save()
    {
        try
        {
            if (AddMode)
            {
                // insert new management
                var Variables = new { dev_typ_id = newManagement.Type, mgm_name = newManagement.Name, ssh_private_key = newManagement.PrivateKey };
                newManagement.Id = (await Task.Run(() => apiConnection.SendQueryAsync<ReturnManagement>(FWO.ApiClient.Queries.BasicQueries.newManagement, Variables))).ReturnId[0].Id;
            }
            else
            {
                // Update existing management
                var Variables = new { mgm_id = ManagementIdEdit, dev_typ_id = newManagement.Type, mgm_name = newManagement.Name, ssh_private_key = newManagement.PrivateKey };
                await Task.Run(() => apiConnection.SendQueryAsync<Management>(FWO.ApiClient.Queries.BasicQueries.updateManagement, Variables));
            }
            EditMode = false;
            AddMode = false;
        }
        catch (Exception exception)
        {
            // Todo: Error message? Ignore?
            Log.WriteDebug("Save Management", $"Exception occurred: {exception}");
        }
    }

    private void Cancel()
    {
        if (AddMode)
        {
            // forget the new management
            managements.Remove(newManagement);
        }
        else
        {
            // Todo: reset to unchanged values (without changing the Id)
        }
        AddMode = false;
        EditMode = false;
    }
}



