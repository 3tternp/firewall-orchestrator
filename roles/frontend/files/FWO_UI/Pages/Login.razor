@using FWO.Ui.Auth
@using FWO.ApiClient
@using FWO.Auth.Client
@using System.Net

@inject AuthClient AuthClient
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage
@inject AuthenticationStateProvider AuthService
@inject APIConnection ApiConnection
@inject IJSRuntime js

<div class="row m-4 justify-content-center">
    <div>
        <h2 class="text-center"> Login </h2>
        <div class="shadow-sm card p-2 d-flex flex-column">
            <input type="text" class="m-2 form-control @InputClass" style="width: 200px;" id="UsernameInput" placeholder="Username" @bind="Username" @bind:event="oninput" @onkeypress="PotentialSubmit">
            <input type="password" class="m-2 form-control @InputClass" style="width: 200px;" id="PasswordInput" placeholder="Password" @bind="Password" @bind:event="oninput" @onkeypress="PotentialSubmit">

            @if (loginInProgress == false)
            {
                <button class="btn btn-primary m-2" @onclick="LoginSubmit"><div class="oi oi-account-login"></div></button>
            }
            else
            {
                <div class="spinner-border text-primary align-self-center" role="status">
                    <span class="sr-only">Loading...</span>
                </div>
            }
        </div>
    </div>
</div>

@code
{
    // dont immediately show login page because session storage is only available after render, so there might be a immediate redirect
    private bool showLoginForm = false;

    private bool loginInProgress = false;

    private string Username = "";
    private string Password = "";

    private string InputClass = "";

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        // This might be a reconnect. Check if there is a jwt in session storage.
        string jwt = await sessionStorage.GetItemAsync<string>("jwt");

        if (jwt != null)
        {
            ((AuthStateProvider)AuthService).AuthenticateUser(jwt);
        }

        if (firstRender)
        {
            showLoginForm = true;
            StateHasChanged();
            //await js.InvokeVoidAsync("jsfunction.focusElement", "UsernameInput"); // focus userinput field
        }
    }

    private async Task PotentialSubmit(KeyboardEventArgs e)
    {
        InputClass = "";

        if (e.Key == "Enter")
            await LoginSubmit();
    }

    private async Task LoginSubmit()
    {
        loginInProgress = true;

        // There is no jwt in session storage. Get one from auth module.
        RequestResult result = await AuthClient.AuthenticateUser(Username, Password);

        // There was an error trying to authenticate the user. Probably invalid credentials
        if (result.Status == HttpStatusCode.BadRequest)
        {
            // Visualisize there was an error by making border of inputboxes red
            InputClass = "is-invalid";
            loginInProgress = false;
        }

        else
        {
            string jwt = result.GetResult<string>("jwt");

            // Save it in session storage.
            await sessionStorage.SetItemAsync<string>("jwt", jwt);

            // Tell api connection to use jwt as authentication
            ApiConnection.SetAuthHeader(jwt);

            // Try to auth with jwt (validates it, gets roles, ...).
            ((AuthStateProvider)AuthService).AuthenticateUser(jwt);

            loginInProgress = false;
        }
    }
}