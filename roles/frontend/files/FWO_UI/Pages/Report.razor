@using BlazorTable
@using FWO.ApiClient
@using FWO.ApiClient.Queries
@using FWO.Ui.Data.API

@inject APIConnection Connection

@page "/report"

<div class="d-flex flex-row justify-content-between">

    <div class="report-content w-100" style="margin-right: @($"{sidebarWidth + 10}px")">
        <h4 class="m-1">Reporting</h4>

        <button class="btn btn-primary btn-sm m-1" @onclick="GenerateTestReport">Generate Report</button>
        <button class="btn btn-danger btn-sm m-1" @onclick="() => ShowPopUp = true">Show Pop up</button>

        <PopUp Title="test" Show="@ShowPopUp" OnClose="() => ShowPopUp = false">test</PopUp>

        <form class="form-inline m-1">
            <div class="form-group mt-1 mb-1 mr-2">
                <label for="rulesPerDeviceHtml" class="mr-1">Load rules per fetch: </label>
                <input id="rulesPerDeviceHtml" type="number" class="form-control-sm" @bind="rulesPerFetch" />
            </div>
            <div class="form-group mt-1 mb-1">
                <label for="rulesPerPageHtml" class="mr-1">Show rules per page: </label>
                <input id="rulesPerPageHtml" type="number" class="form-control-sm" @bind="rulesPerPage" />
            </div>
        </form>

        <div class="mr-1 ml-1">
            <input type="text" class="form-control" placeholder="Filter" />
        </div>

        <div class="card m-1 shadow">
            <div class="card-body">

                @foreach (Management management in managementsReport)
                {
                    <Collapse Title="@management.Name" Style="@("primary")" StartToggled="false">
                        <hr />

                        @foreach (Device device in management.Devices)
                        {
                            <Collapse Title="@device.Name" Style="@("secondary")" StartToggled="false">
                                <Table SelectedItems="selectedItemsReportRuleTable"
                                       RowClickAction="tableItem => { if (!selectedItemsReportRuleTable.Remove(tableItem)) selectedItemsReportRuleTable.Add(tableItem); StateHasChanged(); }"
                                       style="font-size:small" TableClass="table table-bordered table-sm table-responsive" TableItem="Rule" Items="device.Rules" ShowSearchBar="true"
                                       PageSize="rulesPerPage" ColumnReorder="true" TableRowClass="@(rule => rule.SectionHeader != null ? "hide-all-but-second-child second-child-full-width" : "")">
                                    <Column TableItem="Rule" @ref="test" Title="Number" DefaultSortColumn="true" Field="@(x => x.OrderNumber)" Sortable="true" Filterable="true">
                                        <Template>
                                            @{
                                                if (context.SectionHeader != null)
                                                {
                                                    @context.SectionHeader
                                                }

                                                else
                                                {
                                                    @(Array.IndexOf(device.Rules, context) + 1)
                                                    @($"DEBUG: {context.OrderNumber}")
                                                }
                                            }
                                        </Template>
                                    </Column>
                                    <Column TableItem="Rule" Title="Name" Field="@(x => x.Name)" Sortable="true" Filterable="true" />
                                    <Column TableItem="Rule" Title="Source Zone" Field="@(x => x.SourceZone)" Sortable="true" Filterable="true">
                                        <Template>
                                            @(context.SourceZone?.Name)
                                        </Template>
                                    </Column>
                                    <Column TableItem="Rule" Title="Source" Field="@(x => x.Name)" Sortable="true" Filterable="true">
                                        <Template>
                                            <p>
                                                @{
                                                    if (context.SourceNegated)
                                                    {
                                                        @("anything but") <br>
                                                    }

                                                    foreach (NetworkObjectWrapper source in context.Froms)
                                                    {
                                                        @($"{source.Content.Name}" + (source.Content.IP != null ? $" ({source.Content.IP})" : ""))<br>
                                                    }
                                                }
                                            </p>
                                        </Template>
                                    </Column>
                                    <Column TableItem="Rule" Title="Destination Zone" Field="@(x => x.Name)" Sortable="true" Filterable="true">
                                        <Template>
                                            @(context.DestinationZone?.Name)
                                        </Template>
                                    </Column>
                                    <Column TableItem="Rule" Title="Destination" Field="@(x => x.Name)" Sortable="true" Filterable="true">
                                        <Template>
                                            <p>
                                                @{
                                                    if (context.DestinationNegated)
                                                    {
                                                        @("anything but") <br>
                                                    }

                                                    foreach (NetworkObjectWrapper destination in context.Tos)
                                                    {
                                                        @($"{destination.Content.Name}" + (destination.Content.IP != null ? $" ({destination.Content.IP})" : ""))<br>
                                                    }
                                                }
                                            </p>
                                        </Template>
                                    </Column>
                                    <Column TableItem="Rule" Title="Services" Field="@(x => x.Name)" Sortable="true" Filterable="true">
                                        <Template>
                                            <p>
                                                @{
                                                    if (context.ServiceNegated)
                                                    {
                                                        @("anything but") <br>
                                                    }

                                                    foreach (ServiceWrapper service in context.Services)
                                                    {
                                                        @($"{service.Content.Name}" + (service.Content.DestinationPort != null ? $" ({service.Content.DestinationPort}/{service.Content.Protocol.Name})" : ""))<br>
                                                    }
                                                }
                                            </p>
                                        </Template>
                                    </Column>
                                    <Column TableItem="Rule" Title="Action" Field="@(x => x.Action)" Sortable="true" Filterable="true" />
                                    <Column TableItem="Rule" Title="Track" Field="@(x => x.Track)" Sortable="true" Filterable="true" />
                                    <Column TableItem="Rule" Title="Disabled" Field="@(x => x.Disabled)" Sortable="true" Filterable="true">
                                        <Template>
                                            <div class="oi @(context.Disabled? "oi-check" : "oi-x")"></div>
                                        </Template>
                                    </Column>
                                    <Column TableItem="Rule" Title="UID" Field="@(x => x.Uid)" Sortable="true" Filterable="true" />
                                    <Column TableItem="Rule" Title="Comment" Field="@(x => x.Comment)" Sortable="true" Filterable="true" />

                                    <DetailTemplate TableItem="Rule">
                                        <div>test</div>
                                    </DetailTemplate>

                                    <Pager ShowPageNumber="true" ShowTotalCount="true" />
                                </Table>
                            </Collapse>
                        }
                    </Collapse>
                }
            </div>
        </div>
    </div>

    <div class="sidebar-main d-flex flex-row" style="right: 0px;">
        <div class="btn-dark btn-sm sidebar-min-max-button align-self-center text-left" @onclick="MinMaxSidebar" draggable="true" @ondragstart="ResizeStart" @ondragend="Resize">
            <div class="oi oi-@minMaxButtonSymbol" style="vertical-align: top; margin-left:-5px; margin-top:-3px;"></div>
        </div>
        <div class="sidebar-sizer" draggable="true" @ondragstart="ResizeStart" @ondragend="Resize"></div>
        <div style="z-index:@sidebarLayerZ; width:@($"{sidebarWidth}px"); overflow-x:@overflowSidebar;">
            <div class="p-3">
                @* Sidebar Content *@
                <TabSet>
                    <Tab Title="All">
                        <ObjectGroup InputDataType="Management" Data="managementsAllObjects" NameExtractor="man => man.Name" NetworkObjectExtractor="man => man.Objects"
                                     NetworkServiceExtractor="man => man.Services" NetworkUserExtractor="man => man.Users" />
                    </Tab>
                    <Tab Title="Report">
                        <ObjectGroup InputDataType="Management" Data="managementsReport" NameExtractor="man => man.Name" NetworkObjectExtractor="man => man.Objects"
                                     NetworkServiceExtractor="man => man.Services" NetworkUserExtractor="man => man.Users" />
                    </Tab>
                    <Tab Title="Rule">
                        <ObjectGroup InputDataType="Rule" Data="selectedItemsReportRuleTable" NameExtractor="rule => rule.Name"
                                     NetworkObjectExtractor="rule => Array.ConvertAll(rule.Tos, wrapper => wrapper.Content)"
                                     NetworkServiceExtractor="rule => Array.ConvertAll(rule.Services, wrapper => wrapper.Content)" NetworkUserExtractor="rule => null" />
                    </Tab>
                </TabSet>
            </div>
        </div>
    </div>
</div>

@code
{
    private string FilterCollapseCSS = "show";
    private string FilterButtonCollapse = "oi-minus";

    private List<Rule> selectedItemsReportRuleTable = new List<Rule>();

    private Management[] managementsReport = new Management[0];

    private Management[] managementsAllObjects = new Management[0];
    private Management[] managementsServices = new Management[0];
    private Management[] managementsObjects = new Management[0];
    private Management[] managementsUsers = new Management[0];

    Column<Rule> test;

    private int rulesPerFetch = 10;
    private int rulesPerPage = 0;

    private bool ShowPopUp = false;

    [CascadingParameter]
    Action<string, string> ShowError { get; set; }

    protected override void OnInitialized()
    {
        //List<Task> tasks = new List<Task>();

        Task.Run(async () =>
        {
            try
            {
                PaginationVariables paginationVariables = new PaginationVariables() { Limit = rulesPerFetch, Offset = 0 };

                managementsAllObjects = await Connection.SendQueryAsync<Management>(ObjectQueries.getAllObjectDetails, paginationVariables);
                await InvokeAsync(StateHasChanged);

                bool newObjects = true;

                while (newObjects)
                {
                    paginationVariables.Offset += rulesPerFetch;
                    Management[] managementsCurrentFetch = await Connection.SendQueryAsync<Management>(ObjectQueries.getAllObjectDetails, paginationVariables);
                    newObjects = managementsAllObjects.Merge(managementsCurrentFetch);

                    await InvokeAsync(StateHasChanged);
                }
            }
            catch (Exception exception)
            {
                Log.WriteError("Object Fetching Error", "Error while fetching objects from API.", exception);
                ShowError("Object Fetching Error", "Error while fetching objects from API.");
            }
        });

        //managementsObjects = await Connection.SendQueryAsync<Management>(ObjectQueries.getNetworkObjectDetails);
        //managementsServices = await Connection.SendQueryAsync<Management>(ObjectQueries.getNetworkServiceObjectDetails);
        //managementsUsers = await Connection.SendQueryAsync<Management>(ObjectQueries.getUserDetails);


        //// Workaround
        //managementsAllObjects = managementsServices;

        //for (int i = 0; i < managementsAllObjects.Length; i++)
        //{
        //    managementsAllObjects[i].Objects = managementsObjects[i].Objects;
        //    managementsAllObjects[i].Users = managementsUsers[i].Users;
        //}
        //// Workaround

        //StateHasChanged();

        ////tasks.Add(
        //Task.Run(async () =>
        //{
        //    try
        //    {
        //        managementsServices = await Connection.SendQueryAsync<Management>(ObjectQueries.getNetworkServiceObjectDetails);
        //        await InvokeAsync(StateHasChanged); // Tell UI Thread to call "StateHasChanged"
        //    }
        //    catch (Exception exception)
        //    {
        //        Log.WriteError("Fetching Error", "Error while fetching network services from API.", exception);
        //    }
        //});
        ////);

        ////tasks.Add(
        //Task.Run(async () =>
        //{
        //    managementsObjects = await Connection.SendQueryAsync<Management>(ObjectQueries.getNetworkObjectDetails);
        //    await InvokeAsync(StateHasChanged); // Tell UI Thread to call "StateHasChanged"
        //});
        ////);

        ////tasks.Add(
        //Task.Run(async () =>
        //{
        //    managementsUsers = await Connection.SendQueryAsync<Management>(ObjectQueries.getUserDetails);
        //    await InvokeAsync(StateHasChanged); // Tell UI Thread to call "StateHasChanged"
        //});
        ////);

        //while (tasks.Count > 0)
        //{
        //    tasks.Remove(await Task.WhenAny(tasks.ToArray()));
        //    StateHasChanged();
        //}
    }

    private void GenerateTestReport(MouseEventArgs e)
    {
        Task.Run(async () =>
        {
            try
            {
                PaginationVariables paginationVariables = new PaginationVariables() { Limit = rulesPerFetch, Offset = 0 };

                managementsReport = await Connection.SendQueryAsync<Management>(RuleQueries.getRuleOverview, paginationVariables);
                await InvokeAsync(StateHasChanged);

                bool newObjects = true;

                while (newObjects)
                {
                    paginationVariables.Offset += rulesPerFetch;
                    Management[] managementsCurrentFetch = await Connection.SendQueryAsync<Management>(RuleQueries.getRuleOverview, paginationVariables);
                    newObjects = managementsReport.Merge(managementsCurrentFetch);

                    await InvokeAsync(StateHasChanged);
                }
            }
            catch (Exception exception)
            {
                if (exception.Message == "no such type exists in the schema: 'cidr'")
                {
                    Log.WriteError("Report generation", "User does not have sufficient access rights.", exception);
                    ShowError("Report generation", "You dont have sufficient acces rights.");

                // this is the default error message when user's access rights are not sufficient (e.g. user = anonymous)
                // leave managementsReport as default = empty array
            }
                else
                {
                    Log.WriteError("Report generation", "Unclassified error.", exception);
                    ShowError("Report generation", "Unclassified error.");
                }
            }
        });
    }

    private void CollapseButtonClicked(MouseEventArgs e)
    {
        FilterCollapseCSS = (FilterCollapseCSS == "") ? "show" : "";
        FilterButtonCollapse = (FilterButtonCollapse == "oi-plus") ? "oi-minus" : "oi-plus";
    }

    private double resizeStartX;

    private void ResizeStart(DragEventArgs dragArgs)
    {
        dragArgs.DataTransfer.DropEffect = "link";
        dragArgs.DataTransfer.EffectAllowed = "copyMove";
        resizeStartX = dragArgs.ScreenX;
    }

    private void Resize(DragEventArgs mouseArgs)
    {
        int postitionDiffrence = (int)(resizeStartX - mouseArgs.ScreenX);

        sidebarWidth = (int)(sidebarWidth + postitionDiffrence);
        //contentMarginRight = (int)(contentMarginRight + postitionDiffrence);

        resizeStartX = mouseArgs.ScreenX;
    }

    private int sidebarLayerZ = 0;
    private int sidebarWidth = 300;
    private int sidebarWidthBeforeMinimize;

    private string minMaxButtonSymbol = "minus";
    private string overflowSidebar = "auto";

    private void MinMaxSidebar()
    {
        if (sidebarWidth == 0)
        {
            overflowSidebar = "hidden";
            minMaxButtonSymbol = "minus";
            sidebarWidth = sidebarWidthBeforeMinimize;

        }

        else
        {
            overflowSidebar = "auto";
            minMaxButtonSymbol = "plus";
            sidebarWidthBeforeMinimize = sidebarWidth;
            sidebarWidth = 0;
        }
    }
}
