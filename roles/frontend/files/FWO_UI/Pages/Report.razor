@using BlazorTable
@using FWO.ApiClient
@using FWO.ApiClient.Queries
@using FWO.Ui.Data.Api

@inject APIConnection Connection

@page "/report"

<div class="d-flex flex-row justify-content-between">

    <div class="report-content" style="margin-right: @($"{sidebarWidth + 10}px")">
        <h3>Test-Report</h3>

        <button class="btn btn-primary m-2" @onclick="GenerateTestReport">Generate Report</button>

        <form class="form-inline m-2">
            <div class="form-group m-1">
                <label for="rulesPerDeviceHtml">Load rules per fetch: </label>
                <input id="rulesPerDeviceHtml" type="number" class="form-control m-1" @bind="rulesPerFetch" />
            </div>
            <div class="form-group m-1">
                <label for="rulesPerPageHtml">Show rules per page: </label>
                <input id="rulesPerPageHtml" type="number" class="form-control m-1" @bind="rulesPerPage" />
            </div>
        </form>

        <div class="m-2">
            <input type="text" class="form-control" placeholder="Filter" />
        </div>

        @*<div class="card m-2">
                <div class="card-header d-flex justify-content-between align-items-center">
                    <h4 class="d-inline-flex align-items-center">
                        Filter
                        <button class="btn btn-dark btn-sm ml-3 oi @FilterButtonCollapse" @onclick="CollapseButtonClicked"></button>
                    </h4>
                    <h4 class="btn-group">
                        <button class="btn btn-success btn-sm">Add</button>
                        <button class="btn btn-danger btn-sm">Remove</button>
                    </h4>
                </div>
                <div class="collapse card-body @FilterCollapseCSS">
                    <div class="m-2 d-flex flex-wrap">
                        @foreach (DataTable CurrentFilterDataTable in FilterDataTables)
                        {
                            <Filter Data="CurrentFilterDataTable"></Filter>
                        }
                    </div>
                </div>
            </div>*@

        <div class="card m-2 shadow">
            <div class="card-body">

                @foreach (Management management in Managements)
                {
                    <h3>@management.Name</h3>
                    <hr />

                    @foreach (Device device in management.Devices)
                    {
                        <h4>@device.Name</h4>

                        Array.Sort(device.Rules, (a, b) => (int)(a.OrderNumber - b.OrderNumber));

                        <Table style="font-size:small" TableClass="table table-bordered table-sm table-responsive" TableItem="Rule" Items="device.Rules" ShowSearchBar="true" PageSize="rulesPerPage" ColumnReorder="true">
                            <Column TableItem="Rule" Title="Number" DefaultSortColumn="true" Field="@(x => x.OrderNumber)" Sortable="true" Filterable="true">
                                <Template>
                                    @{
                                        for (int i = 0; i < device.Rules.Length; i++)
                                        {
                                            if (device.Rules[i].OrderNumber == context.OrderNumber)
                                            {
                                                @(i + 1)
                                            }
                                        }
                                    }
                                </Template>
                            </Column>
                            <Pager ShowPageNumber="true"></Pager>
                            <Column TableItem="Rule" Title="Name" Field="@(x => x.Name)" Sortable="true" Filterable="true" />
                            <Column TableItem="Rule" Title="Source" Field="@(x => x.Froms)" Sortable="true" Filterable="true">
                                <Template>
                                    <p>
                                        @{
                                            if (context.SourceNegated)
                                            {
                                                @("anything but") <br>
                                            }

                                            @foreach (NetworkObjectWrapper source in context.Froms)
                                            {
                                                @($"{source.Content.Name}" + (source.Content.IP != null ? $" ({source.Content.IP})" : ""))<br>
                                            }
                                        }
                                    </p>
                                </Template>
                            </Column>
                            <Column TableItem="Rule" Title="Destination" Field="@(x => x.Tos)" Sortable="true" Filterable="true">
                                <Template>
                                    <p>
                                        @{
                                            if (context.DestinationNegated)
                                            {
                                                @("anything but") <br>
                                            }

                                            foreach (NetworkObjectWrapper destination in context.Tos)
                                            {
                                                @($"{destination.Content.Name}" + (destination.Content.IP != null ? $" ({destination.Content.IP})" : ""))<br>
                                            }
                                        }
                                    </p>
                                </Template>
                            </Column>
                            <Column TableItem="Rule" Title="Services" Field="@(x => x.Services)" Sortable="true" Filterable="true">
                                <Template>
                                    <p>
                                        @{
                                            if (context.ServiceNegated)
                                            {
                                                @("anything but") <br>
                                            }

                                            foreach (ServiceWrapper service in context.Services)
                                            {
                                                @($"{service.Content.Name}" + (service.Content.DestinationPort != null ? $" ({service.Content.DestinationPort}/{service.Content.Protocol.Name})" : ""))<br>
                                            }
                                        }
                                    </p>
                                </Template>
                            </Column>
                            <Column TableItem="Rule" Title="Action" Field="@(x => x.Action)" Sortable="true" Filterable="true" />
                            <Column TableItem="Rule" Title="Track" Field="@(x => x.Track)" Sortable="true" Filterable="true" />
                            <Column TableItem="Rule" Title="Disabled" Field="@(x => x.Disabled)" Sortable="true" Filterable="true">
                                <Template>
                                    <div class="oi @(context.Disabled? "oi-check" : "oi-x")"></div>
                                </Template>
                            </Column>
                            <Column TableItem="Rule" Title="UID" Field="@(x => x.Uid)" Sortable="true" Filterable="true" />
                            <Column TableItem="Rule" Title="Comment" Field="@(x => x.Comment)" Sortable="true" Filterable="true" />

                            <DetailTemplate TableItem="Rule">
                                <div>test</div>
                            </DetailTemplate>
                        </Table>
                    }
                }
            </div>
        </div>
    </div>

    <div class="sidebar-main d-flex flex-row" style="right: 0px;">
        <div class="btn-dark btn-sm sidebar-min-max-button align-self-center text-left" @onclick="MinMaxSidebar" draggable="true" @ondragstart="ResizeStart" @ondragend="Resize">
            <div class="oi oi-@minMaxButtonSymbol" style="vertical-align: top; margin-left:-5px; margin-top:-3px;"></div>
        </div>
        <div class="sidebar-sizer" draggable="true" @ondragstart="ResizeStart" @ondragend="Resize"></div>
        <div style="z-index:@sidebarLayerZ; width:@($"{sidebarWidth}px"); overflow-x:@overflowSidebar;">
            <div class="m-3">
                @* Sidebar Content *@

                <div class="d-flex justify-content-center m-2">
                    <h5>Services</h5>
                </div>
                <Table style="font-size:small" class="table table-bordered table-sm table-responsive" TableItem="NetworkService" Items="networkServices" PageSize="0" ColumnReorder="true">
                    <Column TableItem="NetworkService" Title="Name" Field="@(x => x.Name)" />
                    <DetailTemplate TableItem="NetworkService">
                        <b>UID</b> @context.Uid <br />
                        <b>Source Port</b> @(context.SourcePort == context.SourcePortEnd ? context.SourcePort.ToString() : $"{context.SourcePort.ToString()}-{context.SourcePortEnd.ToString()}") <br />
                        <b>Destination Port</b> @(context.DestinationPort == context.DestinationPortEnd ? context.DestinationPort.ToString() : $"{context.DestinationPort.ToString()}-{context.DestinationPortEnd.ToString()}") <br />
                        <b>Type</b> @context.Type.Name
                    </DetailTemplate>
                </Table>

                <div class="d-flex justify-content-center m-2">
                    <h5>Netzwerkobjekte</h5>
                </div>
                <Table style="font-size:small" class="table table-bordered table-sm table-responsive" TableItem="NetworkObject" Items="networkObjects" PageSize="0" ColumnReorder="true">
                    <Column TableItem="NetworkObject" Title="Name" Field="@(x => x.Name)" />
                    <DetailTemplate TableItem="NetworkObject">
                        <b>UID</b> @context <br />
                        <b>IP</b> @(context.IP == context.IP ? context.IP.ToString() : $"{context.IP.ToString()}-{context.IP.ToString()}") <br />
                        <b>Type</b> @context
                    </DetailTemplate>
                </Table>

                <div class="d-flex justify-content-center m-2">
                    <h5>User</h5>
                </div>
                <Table style="font-size:small" class="table table-bordered table-sm table-responsive" TableItem="NetworkUser" Items="networkUsers" PageSize="0" ColumnReorder="true">
                    <Column TableItem="NetworkUser" Title="Name" Field="@(x => x.Name)" />
                    <DetailTemplate TableItem="NetworkUser">
                        <b>UID</b> @context.Uid <br />
                        <b>Name</b> @context.Name <br />
                        <b>Real Name</b> @($"{context.FirstName} {context.LastName}") <br />
                        <b>Comment</b> @context.Comment <br />
                        <b>Type</b> @context.Type.Name
                    </DetailTemplate>
                </Table>
            </div>
        </div>
    </div>
</div>


@code
{
    private string FilterCollapseCSS = "show";
    private string FilterButtonCollapse = "oi-minus";

    private Management[] Managements = new Management[0];
    private NetworkService[] networkServices = new NetworkService[0];
    private NetworkObject[] networkObjects = new NetworkObject[0];
    private NetworkUser[] networkUsers = new NetworkUser[0];

    private int rulesPerFetch = 0;
    private int rulesPerPage = 0;

    protected override void OnInitialized()
    {
        //List<Task> tasks = new List<Task>();

        //tasks.Add(
        Task.Run(async () =>
        {
            try
            {
                Management[] managementsServices = await Connection.SendQueryAsync<Management>(ObjectQueries.getNetworkServiceObjectDetails);

                foreach (Management management in managementsServices)
                {
                    networkServices = networkServices.Concat(management.Services).ToArray();
                }

                await InvokeAsync(StateHasChanged); // Tell UI Thread to call "StateHasChanged"
        }
            catch (Exception exception)
            {
                Log.WriteError("Fetching Error", "Error while fetching network services from API.", exception);
            }
        });
        //);

        //tasks.Add(
        Task.Run(async () =>
        {
            Management[] managementsObjects = await Connection.SendQueryAsync<Management>(ObjectQueries.getNetworkObjectDetails);

            foreach (Management management in managementsObjects)
            {
                networkObjects = networkObjects.Concat(management.Objects).ToArray();
            }

            await InvokeAsync(StateHasChanged); // Tell UI Thread to call "StateHasChanged"
    });
        //);

        //tasks.Add(
        Task.Run(async () =>
        {
            Management[] managementsUsers = await Connection.SendQueryAsync<Management>(ObjectQueries.getUserDetails);

            foreach (Management management in managementsUsers)
            {
                networkUsers = networkUsers.Concat(management.Users).ToArray();
            }

            await InvokeAsync(StateHasChanged); // Tell UI Thread to call "StateHasChanged"
    });
        //);

        //while (tasks.Count > 0)
        //{
        //    tasks.Remove(await Task.WhenAny(tasks.ToArray()));
        //    StateHasChanged();
        //}
    }

    private async Task GenerateTestReport(MouseEventArgs e)
    {
        try
        {
            Managements = await Connection.SendQueryAsync<Management>(RuleQueries.getRuleOverview);
        }
        catch (Exception exception)
        {
            if (exception.Message == "no such type exists in the schema: 'cidr'")
            {
                // this is the default error message when user's access rights are not sufficient (e.g. user = anonymous)
                // leave Managements as default = empty array
            }
            else
            {
                Log.WriteError("Access rights", "User does not have sufficient access rights", exception);
            }
        }
    }

    private void CollapseButtonClicked(MouseEventArgs e)
    {
        FilterCollapseCSS = (FilterCollapseCSS == "") ? "show" : "";
        FilterButtonCollapse = (FilterButtonCollapse == "oi-plus") ? "oi-minus" : "oi-plus";
    }

    private double resizeStartX;

    private void ResizeStart(DragEventArgs dragArgs)
    {
        dragArgs.DataTransfer.DropEffect = "link";
        dragArgs.DataTransfer.EffectAllowed = "copyMove";
        resizeStartX = dragArgs.ScreenX;
    }

    private void Resize(DragEventArgs mouseArgs)
    {
        int postitionDiffrence = (int)(resizeStartX - mouseArgs.ScreenX);

        sidebarWidth = (int)(sidebarWidth + postitionDiffrence);
        //contentMarginRight = (int)(contentMarginRight + postitionDiffrence);

        resizeStartX = mouseArgs.ScreenX;
    }

    private int sidebarLayerZ = 0;
    private int sidebarWidth = 300;
    private int sidebarWidthBeforeMinimize;

    private string minMaxButtonSymbol = "minus";
    private string overflowSidebar = "auto";

    private void MinMaxSidebar()
    {
        if (sidebarWidth == 0)
        {
            overflowSidebar = "hidden";
            minMaxButtonSymbol = "minus";
            sidebarWidth = sidebarWidthBeforeMinimize;

        }

        else
        {
            overflowSidebar = "auto";
            minMaxButtonSymbol = "plus";
            sidebarWidthBeforeMinimize = sidebarWidth;
            sidebarWidth = 0;
        }
    }
}
