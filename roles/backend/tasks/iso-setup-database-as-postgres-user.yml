- block:
     - name: create dbadmin user (owner of database isodb and all tables)
       shell: 'psql -c "DO \$do\$ BEGIN IF NOT EXISTS (SELECT * FROM pg_catalog.pg_roles WHERE rolname = ''dbadmin'') THEN CREATE ROLE dbadmin PASSWORD ''{{ dbadmin_pwd }}'' SUPERUSER CREATEDB CREATEROLE INHERIT LOGIN; END IF; END \$do\$"'

     - name: create itsecorg user
       shell: 'psql -c "DO \$do\$ BEGIN IF NOT EXISTS (SELECT * FROM pg_catalog.pg_roles WHERE rolname = ''itsecorg'') THEN CREATE ROLE itsecorg PASSWORD ''{{ itsecorg_pwd }}'' LOGIN; END IF; END \$do\$"'

#     leave out tablespace creation for now as this cannot be done within a pgsql function (might use dblink later on) 
#     - name: create tablespace itsecorg
#       shell: 'psql -c "DO \$do\$ BEGIN IF NOT EXISTS (SELECT 1 FROM pg_tablespace WHERE spcname = ''{{ table_space_name }}'') THEN CREATE TABLESPACE {{ table_space_name }} OWNER dbadmin LOCATION ''{{ table_space }}''; END IF; END \$do\$"'
#       when: table_space is defined
#
#     also move temp tablespace to large disk:
#     postgres=# create tablespace temp_tbs location '/var/db/tmp_tablespace';
#     grep temp_tablespaces /etc/postgresql/9.5/main/postgresql.conf 
#     temp_tablespaces = 'temp_tbs'                   # a list of tablespace names, '' uses
#     postgres=# select pg_reload_conf();

     - name: create admin user (default admin for web login)
       shell: 'psql -At -c "SELECT count(*) FROM pg_database WHERE datname=''{{ iso_db_name }}''"'
       register: db_exists

     - debug:
         var: db_exists.stdout

#     - name: stop import process to allow database drop when database exists
#       shell:  "/etc/init.d/itsecorg-importer stop"
#       when: db_exists.stdout=="1"

     - name: initialize iso database and delete all existing data)
       shell:  "{{ iso_home }}/install/database/db-install-scripts/db-init1-user-and-structure.sh"
       when: clean_install is defined or db_exists.stdout=="0"

     - name: create admin user (default admin for web login)
       shell: 'psql -c "DO \$do\$ BEGIN IF NOT EXISTS (SELECT * FROM pg_catalog.pg_roles WHERE rolname = ''admin'') THEN CREATE ROLE admin PASSWORD ''{{ admin_pwd }}'' IN ROLE isoadmins, secuadmins LOGIN; END IF; END \$do\$"'

     - name: (re)defines functions and views (idempotent)
       shell:  "{{ iso_home }}/install/database/db-install-scripts/db-init2-functions.sh"

     - name: adds base data to the database
       shell:  "{{ iso_home }}/install/database/db-install-scripts/db-init3-fill.sh"
       when: clean_install is defined or db_exists.stdout=="0"

     - name: create admin user (default admin for web login)
       shell: 'psql -c "DO \$do\$ BEGIN IF NOT EXISTS (SELECT * FROM pg_catalog.pg_roles WHERE rolname = ''admin'') THEN CREATE ROLE admin PASSWORD ''{{ admin_pwd }}'' IN ROLE isoadmins, secuadmins LOGIN; END IF; END \$do\$"'

#     - name: create test user (eg. for demo.itsecorg.de)
#       shell: 'psql -c "DO \$do\$ BEGIN IF NOT EXISTS (SELECT FROM pg_catalog.pg_roles WHERE rolname = ''test'') THEN CREATE ROLE test PASSWORD ''{{ test_pwd }}'' IN ROLE secuadmins LOGIN; END IF; END \$do\$"'
  become: yes
  become_user: postgres
