---
- name: create middleware directory
  file:
    dest: "{{ middleware_server_base_dir }}"
    state: directory
    owner: "{{ fworch_user }}"
    group: "{{ fworch_user }}"
  become: yes

- name: copy middleware module files to middlewareserver
  copy:
    src: "{{ middleware_path_rel }}"
    dest: "{{ middleware_server_base_dir }}"
    owner: "{{ fworch_user }}"
    group: "{{ fworch_user }}"
  become: yes

- name: install python3-openssl for openssl key generation
  package:
    name: "{{ item }}"
  loop:
    - python3-cryptography
    - python3-openssl
  become: yes

- name: create auth secrets (jwt key, ldap)
  include_tasks: create_auth_secrets.yml

- name: check if there already is an ldap connection in DB
  command: psql -qtAX -d {{ fworch_db_name | quote }} -c "SELECT COUNT(*) FROM ldap_connection"
  become: yes
  become_user: postgres
  register: ldap_conn_present

- name: change value for middleware_change_local_ldap if ldap conn already exists to prevent re-creation errors
  set_fact:
    middleware_change_local_ldap: "no"
  when: ldap_conn_present.stdout >= "1"

- name: import ldif driven changes
  import_tasks: set_initial_ldap_tree.yml

- name: import ldif driven upgrades
  import_tasks: upgrade_ldap_tree.yml
  when: installation_mode == "upgrade"

- name: Set {{ middleware_ldap_internal_readonly_user }} password in ldap
  command: "ldappasswd -s {{ ldap_inspector_pw }} -H {{ middleware_ldap_internal_url }} -D {{ auth_ldap_superuser_name }} -w {{ ldap_manager_pwd }} -x 'uid={{ middleware_ldap_internal_readonly_user }},ou=systemuser,ou=user,{{ middleware_ldap_path }}'"

- name: Set admin password in ldap
  command: "ldappasswd -s {{ admin_pwd }} -H {{ middleware_ldap_internal_url }} -D {{ middleware_ldap_superuser_name }} -w {{ ldap_manager_pwd }} -x 'uid=admin,ou=tenant0,ou=operator,ou=user,{{ middleware_ldap_path }}'"
  
- name: insert admin tenant0 to database
  command: 'psql -d {{ fworch_db_name }} -c "DO $do$ BEGIN IF NOT EXISTS (SELECT tenant_id FROM tenant WHERE tenant_name=''tenant0'') THEN insert into tenant (tenant_name, tenant_can_view_all_devices, tenant_is_superadmin) values (''tenant0'', true, true); END IF; END $do$"'
  become: yes
  become_user: postgres

- name: add local ldap connection
  shell: psql -d {{ fworch_db_name | quote }} -c "DO \$do\$ BEGIN IF NOT EXISTS (SELECT * FROM ldap_connection) THEN INSERT INTO ldap_connection (ldap_server, ldap_port, ldap_searchpath_for_users, ldap_searchpath_for_roles, ldap_tenant_level, ldap_search_user, ldap_search_user_pwd) VALUES ('{{ middleware_ldap_server_internal | quote }}', 636, '{{ middleware_ldap_std_user_path | quote }}', '{{ middleware_ldap_std_role_path | quote }}', 1, '{{ middleware_ldap_internal_readonly_user_fq | quote }}', '{{ ldap_inspector_pw }}'); END IF; END \$do\$"
  become: yes
  become_user: postgres

- name: update password for local ldap connection  in case of upgrade
  shell: psql -d {{ fworch_db_name | quote }} -c "DO \$do\$ BEGIN IF EXISTS (SELECT * FROM ldap_connection) THEN UPDATE ldap_connection SET ldap_server='{{ middleware_ldap_server_internal | quote }}', ldap_port=636, ldap_searchpath_for_users='{{ middleware_ldap_std_user_path | quote }}', ldap_searchpath_for_roles='{{ middleware_ldap_std_role_path | quote }}', ldap_tenant_level=1, ldap_search_user='{{ middleware_ldap_internal_readonly_user_fq | quote }}', ldap_search_user_pwd='{{ ldap_inspector_pw }}' WHERE ldap_server='{{ middleware_ldap_server_internal | quote }}'; END IF; END \$do\$"
  become: yes
  become_user: postgres

- name: install dot net
  import_tasks: middleware_install_dot_net.yml
