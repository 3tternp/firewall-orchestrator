# create query collection for basic tasks fworch_basics via direct hasura DB access
# NB: this crashes the API on reboot if there is a syntax error in any json file!
#      might be better to give API access another try (https://hasura.io/docs/1.0/graphql/manual/api-reference/schema-metadata-api/index.html#metadata-apis)

- set_fact:
    query_collection_dict:
      - basic:
        collection_name: report-basic
        collection_comment: "basic report queries"
      - filters:
        collection_name: report-filters
        collection_comment: "filter queries"
      - rule:
        collection_name: report-rule
        collection_comment: "rule queries"
      - localization:
        collection_name: basic-localization
        collection_comment: "localization queries"
      - auth:
        collection_name: auth
        collection_comment: "auth queries"

- name: copy query files to target
  copy:
    src: "query-collections"
    dest: "{{ api_home }}/"
    owner: "{{ fworch_user }}"
    group: "{{ fworch_user }}"
  become: yes

- name: create sql command files from template for adding query collections
  template:
    src: "api-set-queries.sql.j2"
    dest: "{{ api_home }}/query-collections/api-set-queries-{{ item.collection_name }}.sql"
    mode: "0644"
    owner: "{{ fworch_user }}"
    group: "{{ fworch_user }}"
  become: yes
  loop: "{{ query_collection_dict }}"

- block:
    - name: create .pgpass file
      lineinfile:
        path: "{{ fworch_home }}/.pgpass"
        create: yes
        mode: "0600"
        line: "{{ fworch_db_host }}:{{ fworch_db_port }}:{{ fworch_db_name }}:{{ fworch_dbadmin_name }}:{{ dbadmin_pwd }}"

    - name: removeline breaks and multiple consecutive spaces from json files
      shell: "cat api-queries-{{ item.collection_name }}.json | tr -s '[:space:]' | tr -d '\n' > api-queries-{{ item.collection_name }}-squashed.json"
      args:
        chdir: "{{ api_home }}/query-collections/reporting"
        creates: "{{ api_home }}/query-collections/api-queries-{{ item.collection_name }}-squashed.json"
      loop: "{{ query_collection_dict }}"
      register: tr_result
      # todo: error handling

    - name: execute sql command files for adding query collections
      command: 'psql -h {{ fworch_db_host }} -U {{ fworch_dbadmin_name }} -d {{ fworch_db_name }} -c "\i {{ api_home }}/query-collections/api-set-queries-{{ item.collection_name }}.sql"'
      args:
        chdir: "{{ api_home }}/query-collections"
      loop: "{{ query_collection_dict }}"
      register: sql_result
      # todo: error handling

    - name: clean up .pgpass file
      file:
        path: "{{ fworch_home }}/.pgpass"
        state: absent

  become: yes
  become_user: "{{ fworch_user }}"
