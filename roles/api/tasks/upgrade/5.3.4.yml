
- name: read dbadmin pwd from secrets file
  slurp:
    src: "{{ dbadmin_password_file }}"
  register: api_user_password
  become: yes

- name: decode dbadmin pwd
  set_fact:
    api_user_password: "{{ api_user_password['content'] | b64decode }}"

- name: read jwt public key from file as JWT secret
  slurp:
    src: "{{ jwt_public_key_file }}"
  register: api_hasura_jwt_secret_dict
  become: yes

- name: decode key
  set_fact:
    api_hasura_jwt_secret: "{{ api_hasura_jwt_secret_dict['content'] | b64decode }}"

- name: make sure {{ fworch_secrets_dir }} exists
  file:
    path: "{{ fworch_secrets_dir }}"
    state: directory
    mode: "0700"
    owner: "{{ fworch_user }}"
    group: "{{ fworch_group }}"
  become: yes

- name: set hasura env variable
  set_fact:
    hasura_env:
      HASURA_GRAPHQL_DATABASE_URL:     "postgres://{{ api_user }}:{{ api_user_password }}@{{ fworch_db_host }}:{{ fworch_db_port }}/{{ fworch_db_name }}"
      HASURA_GRAPHQL_ENABLE_CONSOLE:   "true"
      HASURA_GRAPHQL_ENABLE_TELEMETRY: "false"
      HASURA_GRAPHQL_ADMIN_SECRET:     "{{ api_hasura_admin_secret }}"
      HASURA_GRAPHQL_LOG_LEVEL:        "{{ api_log_level }}"
      HASURA_GRAPHQL_ENABLED_LOG_TYPES: '{{ api_HASURA_GRAPHQL_ENABLED_LOG_TYPES }}'
      HASURA_GRAPHQL_CONSOLE_ASSETS_DIR: "/srv/console-assets"
      HASURA_GRAPHQL_CORS_DOMAIN:       "*"
      HASURA_GRAPHQL_JWT_SECRET:        '
                                        {
                                          "type": "{{ api_hasura_jwt_alg|quote }}",
                                          "key": "{{ api_hasura_jwt_secret | regex_replace(''\n'', ''\\n'') }}",
                                          "claims_namespace_path": "$"
                                        }
                                        '
      HTTP_PROXY:                      "{{ http_proxy }}"
      HTTPS_PROXY:                     "{{ https_proxy }}"

- name: show hasura env for debugging
  debug:
    var:
      hasura_env
  when: debug_level > '1'

- name: stop old version of hasura container
  docker_container:
    name: "{{ api_container_name }}"
    state: absent
  become: yes
  become_user: "{{ fworch_user }}"

- name: start new hasura container
  docker_container:
    name: "{{ api_container_name }}"
    image: hasura/graphql-engine:{{ api_hasura_version }}
    state: started
    network_mode: host
    networks_cli_compatible: yes
    log_driver: syslog
    log_options:
      syslog-address: "{{ syslog_proto }}://{{ syslog_host }}:{{ syslog_port }}"
      syslog-facility: daemon
      tag: "{{ api_container_name }}"
    recreate: yes
    exposed_ports:
      - "{{ api_port }}:{{ api_port }}"
    env:
      "{{ hasura_env }}"
  register: docker_return
  become: yes
  become_user: "{{ fworch_user }}"
  environment: "{{ proxy_env }}"

- name: show docker result
  debug:
    var:
      docker_return
  when: debug_level > '1'

- name: Get info on container
  docker_container_info:
    name: "{{ api_container_name }}"
  register: result
  become: yes
  become_user: "{{ fworch_user }}"

- name: Print the status of the container in case of problems only
  fail: 
    msg: "The container status is: {{ result }}"
  #when: result.exists and result.container['State']['Status'] == 'exited'

- name: update hasura cli
  command: "{{ api_hasura_cli_bin }} update-cli --version={{ api_hasura_version }}"
  args:
    chdir: "{{ api_home }}/{{ product_name }}"
  become: yes
  environment: "{{ proxy_env }}"

- name:  wait for hasura port to become available
  wait_for:
    port: "{{ api_port }}"
    host: "{{ api_ip_address }}"
    connect_timeout: 1
    delay: 10
    timeout: 25
  #when: "not run_on_github|bool"

- name: update hasura config to v3
  command: "{{ api_hasura_cli_bin }} scripts update-project-v3"
  args:
    chdir: "{{ api_home }}/{{ product_name }}"
  become: yes
  become_user: "{{ fworch_user }}"
  environment: "{{ proxy_env }}"
  
# api config (metadata)

# hasura scripts update-project-v3 --move-state-only.

- name: import hasura metadata
  command: "{{ api_hasura_cli_bin }} metadata apply"
  args:
    chdir: "{{ api_home }}/{{ product_name }}"
  become: yes
  become_user: "{{ fworch_user }}"
  environment: "{{ proxy_env }}"
  when: "not api_no_metadata | bool"

- name: migrate hasura metadata
  command: "{{ api_hasura_cli_bin }} migrate apply --all-databases"
  args:
    chdir: "{{ api_home }}/{{ product_name }}"
  become: yes
  become_user: "{{ fworch_user }}"
  environment: "{{ proxy_env }}"
  when: "not api_no_metadata | bool"

- name: reload hasura metadata
  command: "{{ api_hasura_cli_bin }} metadata reload"
  args:
    chdir: "{{ api_home }}/{{ product_name }}"
  become: yes
  become_user: "{{ fworch_user }}"
  environment: "{{ proxy_env }}"
  when: "not api_no_metadata | bool"
