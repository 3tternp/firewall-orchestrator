---
# working under ubuntu 20.4 with
# tim@ubu204test:~$ ansible --version
# ansible 2.9.6
# python version = 3.8.2 (default, Apr 27 2020, 15:53:34) [GCC 9.3.0]

- block:  
   - set_fact: api_home="{{ iso_home }}/api"
   - set_fact: hasura_bin="/usr/local/bin/hasura"

   - name: remove api home
     file:
        path: "{{ api_home }}"
        state: absent
   
   - name: create api home
     file:
        path: "{{ api_home }}"
        state: directory
        mode: 0755
        owner: "{{ iso_user }}"
   
   - name: add user {{ iso_user }} to group docker
     user: name={{ iso_user }}
           groups=docker
           append=yes
  become: yes

- name: drop hasura docker containers when clean_install is set
  docker_container:
    name: hasura_fw_orch
    state: absent
  when: clean_install is defined
  become: yes
  become_user: "{{ iso_user }}"

- name: start hasura container
  docker_container:
    name: hasura_fw_orch
    image: hasura/graphql-engine:{{ api_hasura_version }}
    state: started
    network_mode: host
    recreate: yes
    ports:
      - "{{ api_listener_ip }}:{{ api_listener_port }}:{{ api_listener_port }}"
    env:
      HASURA_GRAPHQL_DATABASE_URL:     "postgres://{{ api_user }}:{{ api_user_password }}@{{ isodb_host }}:{{ iso_db_port }}/{{ iso_db_name }}"
      HASURA_GRAPHQL_ENABLE_CONSOLE:   "true"
      HASURA_GRAPHQL_ADMIN_SECRET:     "{{ api_hasura_admin_secret }}"
      HASURA_GRAPHQL_JWT_SECRET:       '
        {
          "type": "{{ api_hasura_jwt_alg|quote }}",
          "key": "{{ api_hasura_jwt_secret|quote }}",
          "claims_namespace_path": "$.hasura.claims"
        }
      '
      HTTP_PROXY:                      "{{ http_proxy }}"
      HTTPS_PROXY:                     "{{ https_proxy }}"
  become: yes
  become_user: "{{ iso_user }}"

- name: download hasura cli installer
  get_url:
      url: https://github.com/hasura/graphql-engine/raw/master/cli/get.sh
      dest: "{{ api_home }}"
      mode: 0755
  environment: "{{ proxy_env }}"
  become: yes
  become_user: "{{ iso_user }}"

- name: execute hasura cli installer
  shell: "{{ api_home }}/get.sh"
  environment: "{{ proxy_env }}"
  become: yes

- name: initialize hasura cli directory
  shell: "cd {{ api_home }} && {{ hasura_bin }} init --directory itsecorg --endpoint http://{{ api_hostname }}:{{ api_port }} --admin-secret {{ api_hasura_admin_secret }}"
  become: yes
  become_user: "{{ iso_user }}"

- name: copy hasura metadata to cli directory
  copy:
     src: hasura_metadata.yaml
     dest: "{{ api_home }}/itsecorg/migrations/metadata.yaml"
     backup: yes
     mode: 0644
     owner: "{{ iso_user }}"
  become: yes

- name: import hasura metadata
  shell: "cd {{ api_home }}/itsecorg && {{ hasura_bin }} metadata apply --from-file"
  become: yes
  become_user: "{{ iso_user }}"

- name: copy hasura docker systemd service script
  template:
     src: hasura-docker-api.service.j2
     dest: "/lib/systemd/system/hasura-docker-api.service"
     backup: yes
     mode: 0644
     owner: "root"
  become: yes

- name: make hasura docker container run at host startup
  command: "systemctl enable hasura-docker-api"
  become: yes
